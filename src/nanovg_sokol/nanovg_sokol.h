// see https://github.com/floooh/sokol/issues/633 for history
//
// @darkuranium
// - initial version
//
// @zeromake
// - sampler support
// - additional changes
//
// @void256 24.10.2024
// - inline shaders
// - fix partial texture updates (and with it text rendering)
// - optional debug trace logging
//
// @void256 25.10.2024
// - embedded original .glsl files and awk command to extract them to single files
// - clean up sgnvg__renderUpdateTexture and fix issues when x0 is not 0
//
// @void256 26.10.2024
// - don't call sg_update_image() when creating texture in sgnvg__renderCreateTexture()
// - renamed debug trace logging macros and added "SGNVG_" prefix there as well
//
// @void256 23.02.2025
// - update sokol (sokol_app.h, sokol_gfx.h, sokol_log.h, sokol_time.h) to
//   the version of Feb 11, 2025 (https://github.com/floooh/sokol/commit/b0aa42fa061759908a6c68029703e0988a854b53)
//

#ifndef NANOVG_SOKOL_H
#define NANOVG_SOKOL_H

#ifdef __cplusplus
extern "C" {
#endif

#include <nanovg.h>
#include <sokol_gfx.h>

// Create flags

enum NVGcreateFlags {
    // Flag indicating if geometry based anti-aliasing is used (may not be needed when using MSAA).
    NVG_ANTIALIAS 		= 1<<0,
    // Flag indicating if strokes should be drawn using stencil buffer. The rendering will be a little
    // slower, but path overlaps (i.e. self-intersecting or sharp turns) will be drawn just once.
    NVG_STENCIL_STROKES	= 1<<1,
    // Flag indicating that additional debug checks are done.
    NVG_DEBUG 			= 1<<2,
};

NVGcontext* nvgCreateSokol(int flags);
void nvgDeleteSokol(NVGcontext* ctx);

int nvsgCreateImageFromHandleSokol(NVGcontext* ctx, sg_image imageSokol, sg_sampler samplerSokol, int type, int w, int h, int flags);
struct sg_image nvsgImageHandleSokol(NVGcontext* ctx, int image);

// These are additional flags on top of NVGimageFlags.
enum NVGimageFlagsGL {
    NVG_IMAGE_NODELETE			= 1<<16,	// Do not delete Sokol image.
};

#ifdef __cplusplus
}
#endif

#endif /* NANOVG_SOKOL_H */

#ifdef NANOVG_SOKOL_IMPLEMENTATION

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <assert.h>

/*
    Embedded shader source code follows below.

    Notes:

    There are two main shader files included below:
    - shd.glsl
    - shd.aa.glsl

    as well as the following two support files that are included by the main files:
    - internal_shd.fs.glsl
    - internal_shd.vs.glsl

    To extract all four shader source code files back use the following awk command:

    awk '/^8< / {out_file=$2; print "// " out_file > out_file; next} /^>8/ {out_file=""; next} {if (out_file) print $0 >> out_file}' nanovg_sokol.h

    You can then use the sokol shader compiler to compile the shader code into
    a include (.h) file using the following commands;

    sokol-shdc --input shd.glsl --output shd.glsl.h --slang glsl410:glsl300es:hlsl4:metal_macos:metal_ios:metal_sim:wgsl --ifdef
    sokol-shdc --input shd.aa.glsl --output shd.aa.glsl.h --defines=EDGE_AA --slang glsl410:glsl300es:hlsl4:metal_macos:metal_ios:metal_sim:wgsl --ifdef

    The sokol-shdc tool from this commit was used to compile it:
    https://github.com/floooh/sokol-tools-bin/commit/b2858f214eb333665d897741b48d3a55369304eb

    After you compiled the shader source code to the include files you can
    either replace the files below or use the following awk to do this
    automatically:

    awk '/\/\/ -- START --/ {print $0; getline; file=substr($3, 2, length($3)-2); print $0; next} /\/\/ -- END --/ {print $0; file=""; next} {if (!file) { print $0 } else { while((getline line < file) > 0) { print line } }}' nanovg_sokol.h > nanovg_sokol.h.new

    This will create a file "nanovg_sokol.h.new" which should be the new
    nanovg_sokol.h.

8< internal_shd.fs.glsl

precision highp float;
#if defined(_HLSL5_) && !defined(USE_SOKOL)
    uniform frag {
        mat4 _scissorMat;
        vec4 _scissorExt;
        vec4 _scissorScale;
        mat4 _paintMat;
        vec4 _extent;
        vec4 _radius;
        vec4 _feather;
        vec4 innerCol;
        vec4 outerCol;
        vec4 _strokeMult;
        int texType;
        int type;
    };
    #define scissorMat mat3(_scissorMat)
    #define scissorExt _scissorExt.xy
    #define scissorScale _scissorScale.xy
    #define paintMat mat3(_paintMat)
    #define extent _extent.xy
    #define radius _radius.x
    #define feather _feather.x
    #define strokeMult _strokeMult.x
    #define strokeThr _strokeMult.y
#else
    #ifdef USE_UNIFORMBUFFER
        layout(std140,binding=1) uniform frag {
            mat3 scissorMat;
            mat3 paintMat;
            vec4 innerCol;
            vec4 outerCol;
            vec2 scissorExt;
            vec2 scissorScale;
            vec2 extent;
            float radius;
            float feather;
            float strokeMult;
            float strokeThr;
            int texType;
            int type;
        };
    #else
        layout(std140,binding=1) uniform frag {
            vec4 dummy[11];
        };
        #define scissorMat mat3(dummy[0].xyz, dummy[1].xyz, dummy[2].xyz)
        #define paintMat mat3(dummy[3].xyz, dummy[4].xyz, dummy[5].xyz)
        #define innerCol dummy[6]
        #define outerCol dummy[7]
        #define scissorExt dummy[8].xy
        #define scissorScale dummy[8].zw
        #define extent dummy[9].xy
        #define radius dummy[9].z
        #define feather dummy[9].w
        #define strokeMult dummy[10].x
        #define strokeThr dummy[10].y
        #define texType int(dummy[10].z)
        #define type int(dummy[10].w)
    #endif
#endif

layout(binding=2) uniform texture2D tex;
layout(binding=3) uniform sampler smp;
layout(location = 0) in vec2 ftcoord;
layout(location = 1) in vec2 fpos;
layout(location = 0) out vec4 outColor;

float sdroundrect(vec2 pt, vec2 ext, float rad) {
    vec2 ext2 = ext - vec2(rad,rad);
    vec2 d = abs(pt) - ext2;
    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rad;
}

// Scissoring
float scissorMask(vec2 p) {
    vec2 sc = (abs((scissorMat * vec3(p,1.0)).xy) - scissorExt);
    sc = vec2(0.5,0.5) - sc * scissorScale;
    return clamp(sc.x,0.0,1.0) * clamp(sc.y,0.0,1.0);
}

#ifdef EDGE_AA
// Stroke - from [0..1] to clipped pyramid, where the slope is 1px.
float strokeMask() {
    return min(1.0, (1.0-abs(ftcoord.x*2.0-1.0))*strokeMult) * min(1.0, ftcoord.y);
}
#endif

void main(void) {
    vec4 result;

#ifdef EDGE_AA
    float strokeAlpha = strokeMask();
// #ifdef _HLSL5_
// #endif
    if (strokeAlpha < strokeThr) discard;
#else
    float strokeAlpha = 1.0;
#endif
    float scissor = scissorMask(fpos);

    if (scissor == 0) {
        discard;
    }

    if (type == 0) {    // Gradient
        // Calculate gradient color using box gradient
        vec2 pt = (paintMat * vec3(fpos,1.0)).xy;
        float d = clamp((sdroundrect(pt, extent, radius) + feather*0.5) / feather, 0.0, 1.0);
        vec4 color = mix(innerCol,outerCol,d);
        // Combine alpha
        color *= strokeAlpha * scissor;
        result = color;
    } else if (type == 1) {// Image
        // Calculate color fron texture
        vec2 pt = (paintMat * vec3(fpos,1.0)).xy / extent;
        vec4 color = texture(sampler2D(tex, smp), pt);
        if (texType == 1) color = vec4(color.xyz*color.w,color.w);
        if (texType == 2) color = vec4(color.x);
        // stencil support
        if (texType == 3 && color.a == 1.0) discard;
        // Apply color tint and alpha.
        color *= innerCol;
        // Combine alpha
        color *= strokeAlpha * scissor;
        result = color;
    } else if (type == 2) {// Stencil fill
        result = vec4(1,1,1,1);
    } else if (type == 3) {// Textured tris
        vec4 color = texture(sampler2D(tex, smp), ftcoord);
        if (texType == 1) color = vec4(color.xyz*color.w,color.w);
        if (texType == 2) color = vec4(color.x);
        result = color * scissor * innerCol;
    }
    outColor = result;
}
>8

8< internal_shd.vs.glsl

layout (binding = 0) uniform viewSize {
#if defined(_HLSL5_) && !defined(USE_SOKOL)
    mat4 dummy;
#endif
    vec4 _viewSize;
};
layout (location = 0) in vec2 vertex;
layout (location = 1) in vec2 tcoord;
layout (location = 0) out vec2 ftcoord;
layout (location = 1) out vec2 fpos;

void main(void) {
	ftcoord = tcoord;
	fpos = vertex;
    float x = 2.0 * vertex.x / _viewSize.x - 1.0;
    float y = 1.0 - 2.0 * vertex.y / _viewSize.y;
	gl_Position = vec4(
        x,
        y,
        0,
        1
    );
}
>8

8< shd.glsl

@module nanovg

@vs vs
@include internal_shd.vs.glsl
@end

@fs fs
@include internal_shd.fs.glsl
@end

@program sg vs fs
>8

8< shd.aa.glsl

@module nanovg_aa

@vs vs_aa
@include internal_shd.vs.glsl
@end

@fs fs_aa
@include internal_shd.fs.glsl
@end

@program sg vs_aa fs_aa

>8

*/


// -- START --
// #include "shd.glsl.h"
#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input shd.glsl --output shd.glsl.h --slang glsl410:glsl300es:hlsl4:metal_macos:metal_ios:metal_sim:wgsl --ifdef

    Overview:
    =========
    Shader program: 'sg':
        Get shader desc: nanovg_sg_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_nanovg_sg_vertex => 0
            ATTR_nanovg_sg_tcoord => 1
    Bindings:
        Uniform block 'viewSize':
            C struct: nanovg_viewSize_t
            Bind slot: UB_nanovg_viewSize => 0
        Uniform block 'frag':
            C struct: nanovg_frag_t
            Bind slot: UB_nanovg_frag => 1
        Texture 'tex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: VIEW_nanovg_tex => 2
        Sampler 'smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_nanovg_smp => 3
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before shd.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_nanovg_sg_vertex (0)
#define ATTR_nanovg_sg_tcoord (1)
#define UB_nanovg_viewSize (0)
#define UB_nanovg_frag (1)
#define VIEW_nanovg_tex (2)
#define SMP_nanovg_smp (3)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct nanovg_viewSize_t {
    float _viewSize[4];
} nanovg_viewSize_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct nanovg_frag_t {
    float dummy[11][4];
} nanovg_frag_t;
#pragma pack(pop)
/*
    #version 410

    uniform vec4 viewSize[1];
    layout(location = 0) out vec2 ftcoord;
    layout(location = 1) in vec2 tcoord;
    layout(location = 1) out vec2 fpos;
    layout(location = 0) in vec2 vertex;

    void main()
    {
        ftcoord = tcoord;
        fpos = vertex;
        gl_Position = vec4(((2.0 * vertex.x) / viewSize[0].x) - 1.0, 1.0 - ((2.0 * vertex.y) / viewSize[0].y), 0.0, 1.0);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t nanovg_vs_source_glsl410[367] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,0x65,0x77,0x53,
    0x69,0x7a,0x65,0x5b,0x31,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x63,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x32,0x2e,
    0x30,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x2e,0x78,0x29,0x20,0x2f,0x20,
    0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2d,
    0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x28,0x28,0x32,0x2e,
    0x30,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x2e,0x79,0x29,0x20,0x2f,0x20,
    0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 410

    uniform vec4 frag[11];
    uniform sampler2D tex_smp;

    layout(location = 1) in vec2 fpos;
    layout(location = 0) in vec2 ftcoord;
    layout(location = 0) out vec4 outColor;

    float scissorMask(vec2 p)
    {
        vec2 _105 = vec2(0.5) - ((abs((mat3(vec3(frag[0].xyz), vec3(frag[1].xyz), vec3(frag[2].xyz)) * vec3(p, 1.0)).xy) - frag[8].xy) * frag[8].zw);
        return clamp(_105.x, 0.0, 1.0) * clamp(_105.y, 0.0, 1.0);
    }

    float sdroundrect(vec2 pt, vec2 ext, float rad)
    {
        vec2 _29 = abs(pt) - (ext - vec2(rad));
        return (min(max(_29.x, _29.y), 0.0) + length(max(_29, vec2(0.0)))) - rad;
    }

    void main()
    {
        vec2 param = fpos;
        float _121 = scissorMask(param);
        if (_121 == 0.0)
        {
            discard;
        }
        int _133 = int(frag[10].w);
        vec4 result;
        if (_133 == 0)
        {
            vec2 param_1 = (mat3(vec3(frag[3].xyz), vec3(frag[4].xyz), vec3(frag[5].xyz)) * vec3(fpos, 1.0)).xy;
            vec2 param_2 = frag[9].xy;
            float param_3 = frag[9].z;
            result = mix(frag[6], frag[7], vec4(clamp((sdroundrect(param_1, param_2, param_3) + (frag[9].w * 0.5)) / frag[9].w, 0.0, 1.0))) * _121;
        }
        else
        {
            if (_133 == 1)
            {
                vec4 color = texture(tex_smp, (mat3(vec3(frag[3].xyz), vec3(frag[4].xyz), vec3(frag[5].xyz)) * vec3(fpos, 1.0)).xy / frag[9].xy);
                int _263 = int(frag[10].z);
                if (_263 == 1)
                {
                    color = vec4(color.xyz * color.w, color.w);
                }
                if (_263 == 2)
                {
                    color = vec4(color.x);
                }
                bool _290 = _263 == 3;
                bool _296;
                if (_290)
                {
                    _296 = color.w == 1.0;
                }
                else
                {
                    _296 = _290;
                }
                if (_296)
                {
                    discard;
                }
                vec4 _302 = color;
                vec4 _308 = (_302 * frag[6]) * _121;
                color = _308;
                result = _308;
            }
            else
            {
                if (_133 == 2)
                {
                    result = vec4(1.0);
                }
                else
                {
                    if (_133 == 3)
                    {
                        vec4 color_1 = texture(tex_smp, ftcoord);
                        int _334 = int(frag[10].z);
                        if (_334 == 1)
                        {
                            color_1 = vec4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_334 == 2)
                        {
                            color_1 = vec4(color_1.x);
                        }
                        result = (color_1 * _121) * frag[6];
                    }
                }
            }
        }
        outColor = result;
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t nanovg_fs_source_glsl410[2719] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5b,
    0x31,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x70,
    0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,
    0x4d,0x61,0x73,0x6b,0x28,0x76,0x65,0x63,0x32,0x20,0x70,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x30,0x35,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x20,0x2d,0x20,0x28,0x28,0x61,0x62,0x73,
    0x28,0x28,0x6d,0x61,0x74,0x33,0x28,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,
    0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,
    0x72,0x61,0x67,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,
    0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x70,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,
    0x78,0x79,0x29,0x20,0x2d,0x20,0x66,0x72,0x61,0x67,0x5b,0x38,0x5d,0x2e,0x78,0x79,
    0x29,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,0x38,0x5d,0x2e,0x7a,0x77,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x63,0x6c,0x61,0x6d,
    0x70,0x28,0x5f,0x31,0x30,0x35,0x2e,0x78,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,
    0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,
    0x65,0x63,0x74,0x28,0x76,0x65,0x63,0x32,0x20,0x70,0x74,0x2c,0x20,0x76,0x65,0x63,
    0x32,0x20,0x65,0x78,0x74,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x61,0x64,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x39,
    0x20,0x3d,0x20,0x61,0x62,0x73,0x28,0x70,0x74,0x29,0x20,0x2d,0x20,0x28,0x65,0x78,
    0x74,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x72,0x61,0x64,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x6d,0x69,0x6e,0x28,
    0x6d,0x61,0x78,0x28,0x5f,0x32,0x39,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x39,0x2e,0x79,
    0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x20,0x2b,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,
    0x28,0x6d,0x61,0x78,0x28,0x5f,0x32,0x39,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,0x30,
    0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,
    0x66,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x31,0x32,0x31,0x20,0x3d,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,
    0x73,0x6b,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x31,0x32,0x31,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,
    0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x33,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,
    0x66,0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x30,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,
    0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x28,0x6d,
    0x61,0x74,0x33,0x28,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x33,0x5d,
    0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,
    0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,
    0x72,0x61,0x67,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,
    0x65,0x63,0x33,0x28,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,
    0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5b,
    0x39,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x66,
    0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x66,
    0x72,0x61,0x67,0x5b,0x36,0x5d,0x2c,0x20,0x66,0x72,0x61,0x67,0x5b,0x37,0x5d,0x2c,
    0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x73,0x64,0x72,
    0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x33,0x29,0x20,0x2b,0x20,0x28,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x77,
    0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x29,0x20,0x2f,0x20,0x66,0x72,0x61,0x67,0x5b,
    0x39,0x5d,0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,
    0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x28,0x6d,0x61,0x74,0x33,0x28,
    0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x34,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,
    0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,
    0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x20,0x2f,
    0x20,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,
    0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x72,0x61,0x67,0x5b,0x31,0x30,
    0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x2c,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x36,0x33,0x20,0x3d,0x3d,
    0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,
    0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x39,0x30,0x20,0x3d,0x20,0x5f,
    0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x39,0x36,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x32,0x39,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,
    0x5f,0x32,0x39,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x36,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x5f,0x33,0x30,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,
    0x33,0x30,0x38,0x20,0x3d,0x20,0x28,0x5f,0x33,0x30,0x32,0x20,0x2a,0x20,0x66,0x72,
    0x61,0x67,0x5b,0x36,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x5f,0x33,0x30,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x33,
    0x30,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,
    0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x33,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,0x73,
    0x6d,0x70,0x2c,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x33,0x34,0x20,0x3d,0x20,0x69,0x6e,0x74,
    0x28,0x66,0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x33,0x34,0x20,0x3d,0x3d,0x20,0x31,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x5f,0x31,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x33,0x33,0x34,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x29,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,
    0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 300 es

    uniform vec4 viewSize[1];
    out vec2 ftcoord;
    layout(location = 1) in vec2 tcoord;
    out vec2 fpos;
    layout(location = 0) in vec2 vertex;

    void main()
    {
        ftcoord = tcoord;
        fpos = vertex;
        gl_Position = vec4(((2.0 * vertex.x) / viewSize[0].x) - 1.0, 1.0 - ((2.0 * vertex.y) / viewSize[0].y), 0.0, 1.0);
    }

*/
#if defined(SOKOL_GLES3)
static const uint8_t nanovg_vs_source_glsl300es[328] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,
    0x65,0x77,0x53,0x69,0x7a,0x65,0x5b,0x31,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x65,
    0x72,0x74,0x65,0x78,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x20,0x3d,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x70,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x2e,0x78,0x29,0x20,0x2f,0x20,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,
    0x65,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x20,0x2d,0x20,0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x2e,0x79,0x29,0x20,0x2f,0x20,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,
    0x65,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    uniform highp vec4 frag[11];
    uniform highp sampler2D tex_smp;

    in highp vec2 fpos;
    in highp vec2 ftcoord;
    layout(location = 0) out highp vec4 outColor;

    highp float scissorMask(highp vec2 p)
    {
        highp vec2 _105 = vec2(0.5) - ((abs((mat3(vec3(frag[0].xyz), vec3(frag[1].xyz), vec3(frag[2].xyz)) * vec3(p, 1.0)).xy) - frag[8].xy) * frag[8].zw);
        return clamp(_105.x, 0.0, 1.0) * clamp(_105.y, 0.0, 1.0);
    }

    highp float sdroundrect(highp vec2 pt, highp vec2 ext, highp float rad)
    {
        highp vec2 _29 = abs(pt) - (ext - vec2(rad));
        return (min(max(_29.x, _29.y), 0.0) + length(max(_29, vec2(0.0)))) - rad;
    }

    void main()
    {
        highp vec2 param = fpos;
        highp float _121 = scissorMask(param);
        if (_121 == 0.0)
        {
            discard;
        }
        int _133 = int(frag[10].w);
        highp vec4 result;
        if (_133 == 0)
        {
            highp vec2 param_1 = (mat3(vec3(frag[3].xyz), vec3(frag[4].xyz), vec3(frag[5].xyz)) * vec3(fpos, 1.0)).xy;
            highp vec2 param_2 = frag[9].xy;
            highp float param_3 = frag[9].z;
            result = mix(frag[6], frag[7], vec4(clamp((sdroundrect(param_1, param_2, param_3) + (frag[9].w * 0.5)) / frag[9].w, 0.0, 1.0))) * _121;
        }
        else
        {
            if (_133 == 1)
            {
                highp vec4 color = texture(tex_smp, (mat3(vec3(frag[3].xyz), vec3(frag[4].xyz), vec3(frag[5].xyz)) * vec3(fpos, 1.0)).xy / frag[9].xy);
                int _263 = int(frag[10].z);
                if (_263 == 1)
                {
                    color = vec4(color.xyz * color.w, color.w);
                }
                if (_263 == 2)
                {
                    color = vec4(color.x);
                }
                bool _290 = _263 == 3;
                bool _296;
                if (_290)
                {
                    _296 = color.w == 1.0;
                }
                else
                {
                    _296 = _290;
                }
                if (_296)
                {
                    discard;
                }
                highp vec4 _302 = color;
                highp vec4 _308 = (_302 * frag[6]) * _121;
                color = _308;
                result = _308;
            }
            else
            {
                if (_133 == 2)
                {
                    result = vec4(1.0);
                }
                else
                {
                    if (_133 == 3)
                    {
                        highp vec4 color_1 = texture(tex_smp, ftcoord);
                        int _334 = int(frag[10].z);
                        if (_334 == 1)
                        {
                            color_1 = vec4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_334 == 2)
                        {
                            color_1 = vec4(color_1.x);
                        }
                        result = (color_1 * _121) * frag[6];
                    }
                }
            }
        }
        outColor = result;
    }

*/
#if defined(SOKOL_GLES3)
static const uint8_t nanovg_fs_source_glsl300es[2864] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x66,0x72,0x61,0x67,0x5b,0x31,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x69,0x6e,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x70,0x6f,0x73,
    0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,
    0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x75,0x74,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,
    0x31,0x30,0x35,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x20,
    0x2d,0x20,0x28,0x28,0x61,0x62,0x73,0x28,0x28,0x6d,0x61,0x74,0x33,0x28,0x76,0x65,
    0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x31,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x32,0x5d,
    0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x70,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x66,0x72,0x61,
    0x67,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,
    0x38,0x5d,0x2e,0x7a,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,0x2e,0x78,0x2c,
    0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x63,0x6c,0x61,
    0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,
    0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x74,0x2c,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x65,0x78,0x74,0x2c,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x61,0x64,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x32,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,0x61,0x62,0x73,0x28,0x70,0x74,0x29,0x20,
    0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x72,0x61,
    0x64,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x28,0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x5f,0x32,0x39,0x2e,0x78,0x2c,0x20,
    0x5f,0x32,0x39,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x20,0x2b,0x20,0x6c,
    0x65,0x6e,0x67,0x74,0x68,0x28,0x6d,0x61,0x78,0x28,0x5f,0x32,0x39,0x2c,0x20,0x76,
    0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,
    0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,
    0x61,0x73,0x6b,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x32,0x31,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,
    0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x33,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,
    0x28,0x66,0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,
    0x33,0x20,0x3d,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x33,
    0x28,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x33,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x34,0x5d,
    0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,
    0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,
    0x28,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,
    0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x66,0x72,
    0x61,0x67,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,
    0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,
    0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x66,0x72,0x61,0x67,0x5b,0x36,0x5d,0x2c,
    0x20,0x66,0x72,0x61,0x67,0x5b,0x37,0x5d,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x63,
    0x6c,0x61,0x6d,0x70,0x28,0x28,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,
    0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x20,0x2b,0x20,0x28,
    0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,
    0x29,0x20,0x2f,0x20,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x77,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,
    0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x28,0x6d,0x61,0x74,0x33,0x28,0x76,
    0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x34,0x5d,0x2e,0x78,
    0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x35,
    0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x66,
    0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,
    0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x36,
    0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,
    0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x2c,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,
    0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x39,0x30,0x20,0x3d,0x20,0x5f,0x32,
    0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x39,0x36,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x32,0x39,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,0x5f,
    0x32,0x39,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x32,0x39,0x36,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x30,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x30,0x38,0x20,0x3d,
    0x20,0x28,0x5f,0x33,0x30,0x32,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,0x36,0x5d,
    0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x33,
    0x30,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x33,0x30,0x38,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,
    0x33,0x33,0x20,0x3d,0x3d,0x20,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,
    0x73,0x6d,0x70,0x2c,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x33,0x34,0x20,0x3d,0x20,0x69,0x6e,
    0x74,0x28,0x66,0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x33,0x34,0x20,0x3d,0x3d,0x20,0x31,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x31,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,
    0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x33,0x33,0x34,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x29,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,
    0x5b,0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,

};
#endif
/*
    cbuffer viewSize : register(b0)
    {
        float4 _28_viewSize : packoffset(c0);
    };


    static float4 gl_Position;
    static float2 ftcoord;
    static float2 tcoord;
    static float2 fpos;
    static float2 vertex;

    struct SPIRV_Cross_Input
    {
        float2 vertex : TEXCOORD0;
        float2 tcoord : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float2 ftcoord : TEXCOORD0;
        float2 fpos : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        ftcoord = tcoord;
        fpos = vertex;
        gl_Position = float4(((2.0f * vertex.x) / _28_viewSize.x) - 1.0f, 1.0f - ((2.0f * vertex.y) / _28_viewSize.y), 0.0f, 1.0f);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        tcoord = stage_input.tcoord;
        vertex = stage_input.vertex;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.ftcoord = ftcoord;
        stage_output.fpos = fpos;
        return stage_output;
    }
*/
#if defined(SOKOL_D3D11)
static const uint8_t nanovg_vs_source_hlsl4[926] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,
    0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x38,
    0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,
    0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,
    0x72,0x64,0x20,0x3d,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x66,0x20,
    0x2a,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x2e,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,
    0x38,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,0x78,0x29,0x20,0x2d,0x20,
    0x31,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x20,0x2d,0x20,0x28,0x28,0x32,
    0x2e,0x30,0x66,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x2e,0x79,0x29,0x20,
    0x2f,0x20,0x5f,0x32,0x38,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,
    0x29,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x66,0x74,0x63,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x66,0x70,0x6f,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
/*
    cbuffer frag : register(b1)
    {
        float4 _55_dummy[11] : packoffset(c0);
    };

    Texture2D<float4> tex : register(t0);
    SamplerState smp : register(s3);

    static float2 fpos;
    static float2 ftcoord;
    static float4 outColor;

    struct SPIRV_Cross_Input
    {
        float2 ftcoord : TEXCOORD0;
        float2 fpos : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float4 outColor : SV_Target0;
    };

    float scissorMask(float2 p)
    {
        float2 _105 = 0.5f.xx - ((abs(mul(float3(p, 1.0f), float3x3(float3(_55_dummy[0].xyz), float3(_55_dummy[1].xyz), float3(_55_dummy[2].xyz))).xy) - _55_dummy[8].xy) * _55_dummy[8].zw);
        return clamp(_105.x, 0.0f, 1.0f) * clamp(_105.y, 0.0f, 1.0f);
    }

    float sdroundrect(float2 pt, float2 ext, float rad)
    {
        float2 _29 = abs(pt) - (ext - rad.xx);
        return (min(max(_29.x, _29.y), 0.0f) + length(max(_29, 0.0f.xx))) - rad;
    }

    void frag_main()
    {
        float2 param = fpos;
        float _121 = scissorMask(param);
        if (_121 == 0.0f)
        {
            discard;
        }
        int _133 = int(_55_dummy[10].w);
        float4 result;
        if (_133 == 0)
        {
            float2 param_1 = mul(float3(fpos, 1.0f), float3x3(float3(_55_dummy[3].xyz), float3(_55_dummy[4].xyz), float3(_55_dummy[5].xyz))).xy;
            float2 param_2 = _55_dummy[9].xy;
            float param_3 = _55_dummy[9].z;
            result = lerp(_55_dummy[6], _55_dummy[7], clamp((sdroundrect(param_1, param_2, param_3) + (_55_dummy[9].w * 0.5f)) / _55_dummy[9].w, 0.0f, 1.0f).xxxx) * _121;
        }
        else
        {
            if (_133 == 1)
            {
                float4 color = tex.Sample(smp, mul(float3(fpos, 1.0f), float3x3(float3(_55_dummy[3].xyz), float3(_55_dummy[4].xyz), float3(_55_dummy[5].xyz))).xy / _55_dummy[9].xy);
                int _263 = int(_55_dummy[10].z);
                if (_263 == 1)
                {
                    color = float4(color.xyz * color.w, color.w);
                }
                if (_263 == 2)
                {
                    color = color.x.xxxx;
                }
                bool _290 = _263 == 3;
                bool _296;
                if (_290)
                {
                    _296 = color.w == 1.0f;
                }
                else
                {
                    _296 = _290;
                }
                if (_296)
                {
                    discard;
                }
                float4 _302 = color;
                float4 _308 = (_302 * _55_dummy[6]) * _121;
                color = _308;
                result = _308;
            }
            else
            {
                if (_133 == 2)
                {
                    result = 1.0f.xxxx;
                }
                else
                {
                    if (_133 == 3)
                    {
                        float4 color_1 = tex.Sample(smp, ftcoord);
                        int _334 = int(_55_dummy[10].z);
                        if (_334 == 1)
                        {
                            color_1 = float4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_334 == 2)
                        {
                            color_1 = color_1.x.xxxx;
                        }
                        result = (color_1 * _121) * _55_dummy[6];
                    }
                }
            }
        }
        outColor = result;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        fpos = stage_input.fpos;
        ftcoord = stage_input.ftcoord;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.outColor = outColor;
        return stage_output;
    }
*/
#if defined(SOKOL_D3D11)
static const uint8_t nanovg_fs_source_hlsl4[3349] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x66,0x72,0x61,0x67,0x20,0x3a,0x20,0x72,
    0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x31,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x31,0x5d,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x74,
    0x65,0x78,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,
    0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,
    0x73,0x6d,0x70,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,
    0x33,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,
    0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x70,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,
    0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,0x69,
    0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x70,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x5f,0x31,0x30,0x35,0x20,0x3d,0x20,0x30,0x2e,0x35,0x66,0x2e,0x78,0x78,0x20,0x2d,
    0x20,0x28,0x28,0x61,0x62,0x73,0x28,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x70,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x5f,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x5f,0x35,0x35,0x5f,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,0x20,0x2a,0x20,0x5f,0x35,0x35,
    0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x7a,0x77,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,
    0x5f,0x31,0x30,0x35,0x2e,0x78,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,
    0x30,0x66,0x29,0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,
    0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,
    0x64,0x72,0x65,0x63,0x74,0x28,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x74,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x65,0x78,0x74,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,0x61,0x62,0x73,0x28,0x70,
    0x74,0x29,0x20,0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,0x20,0x72,0x61,0x64,0x2e,
    0x78,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x28,0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x5f,0x32,0x39,0x2e,0x78,0x2c,0x20,
    0x5f,0x32,0x39,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x20,0x2b,0x20,
    0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x6d,0x61,0x78,0x28,0x5f,0x32,0x39,0x2c,0x20,
    0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x70,0x6f,0x73,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x31,0x20,
    0x3d,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,
    0x32,0x31,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x66,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,
    0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,
    0x20,0x5f,0x31,0x33,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x35,0x5f,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,
    0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x66,0x70,
    0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x5f,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,
    0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,
    0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,
    0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6c,0x65,0x72,0x70,0x28,0x5f,
    0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x2c,0x20,0x5f,0x35,0x35,
    0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x37,0x5d,0x2c,0x20,0x63,0x6c,0x61,0x6d,0x70,
    0x28,0x28,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x20,0x2b,0x20,0x28,0x5f,0x35,0x35,0x5f,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,
    0x66,0x29,0x29,0x20,0x2f,0x20,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x39,0x5d,0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,
    0x29,0x2e,0x78,0x78,0x78,0x78,0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,
    0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x66,0x70,0x6f,0x73,
    0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,
    0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,
    0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x29,
    0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x39,0x5d,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x36,0x33,0x20,0x3d,0x20,0x69,
    0x6e,0x74,0x28,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,
    0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,
    0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x36,0x33,0x20,0x3d,
    0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x78,0x2e,0x78,0x78,0x78,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x39,0x30,0x20,0x3d,0x20,0x5f,
    0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x32,0x39,0x36,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x32,0x39,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x66,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x39,0x36,0x20,0x3d,
    0x20,0x5f,0x32,0x39,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x36,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x5f,0x33,0x30,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x5f,0x33,0x30,0x38,0x20,0x3d,0x20,0x28,0x5f,0x33,0x30,0x32,
    0x20,0x2a,0x20,0x5f,0x35,0x35,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x29,
    0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x33,0x30,
    0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x33,0x30,0x38,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,
    0x20,0x31,0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,
    0x33,0x20,0x3d,0x3d,0x20,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,
    0x20,0x5f,0x33,0x33,0x34,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x35,0x5f,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x33,0x34,0x20,0x3d,0x3d,0x20,0x31,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x33,0x33,0x34,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x5f,0x31,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x2e,
    0x78,0x78,0x78,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x29,0x20,0x2a,0x20,0x5f,0x35,0x35,0x5f,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x74,
    0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,
    0x70,0x75,0x74,0x2e,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6f,
    0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct viewSize
    {
        float4 _viewSize;
    };

    struct main0_out
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float2 vertex0 [[attribute(0)]];
        float2 tcoord [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant viewSize& _28 [[buffer(0)]])
    {
        main0_out out = {};
        out.ftcoord = in.tcoord;
        out.fpos = in.vertex0;
        out.gl_Position = float4(((2.0 * in.vertex0.x) / _28._viewSize.x) - 1.0, 1.0 - ((2.0 * in.vertex0.y) / _28._viewSize.y), 0.0, 1.0);
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_vs_source_metal_macos[665] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x69,
    0x65,0x77,0x53,0x69,0x7a,0x65,0x26,0x20,0x5f,0x32,0x38,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x74,0x63,
    0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x20,
    0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x2e,0x78,0x29,0x20,
    0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,
    0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,
    0x78,0x30,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,
    0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct frag
    {
        float4 dummy[11];
    };

    struct main0_out
    {
        float4 outColor [[color(0)]];
    };

    struct main0_in
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
    };

    static inline __attribute__((always_inline))
    float scissorMask(thread const float2& p, constant frag& _55)
    {
        float2 _105 = float2(0.5) - ((abs((float3x3(float3(_55.dummy[0].xyz), float3(_55.dummy[1].xyz), float3(_55.dummy[2].xyz)) * float3(p, 1.0)).xy) - _55.dummy[8].xy) * _55.dummy[8].zw);
        return fast::clamp(_105.x, 0.0, 1.0) * fast::clamp(_105.y, 0.0, 1.0);
    }

    static inline __attribute__((always_inline))
    float sdroundrect(thread const float2& pt, thread const float2& ext, thread const float& rad)
    {
        float2 _29 = abs(pt) - (ext - float2(rad));
        return (fast::min(fast::max(_29.x, _29.y), 0.0) + length(fast::max(_29, float2(0.0)))) - rad;
    }

    fragment main0_out main0(main0_in in [[stage_in]], constant frag& _55 [[buffer(1)]], texture2d<float> tex [[texture(0)]], sampler smp [[sampler(3)]])
    {
        main0_out out = {};
        float2 param = in.fpos;
        float _121 = scissorMask(param, _55);
        if (_121 == 0.0)
        {
            discard_fragment();
        }
        int _133 = int(_55.dummy[10].w);
        float4 result;
        if (_133 == 0)
        {
            float2 param_1 = (float3x3(float3(_55.dummy[3].xyz), float3(_55.dummy[4].xyz), float3(_55.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy;
            float2 param_2 = _55.dummy[9].xy;
            float param_3 = _55.dummy[9].z;
            result = mix(_55.dummy[6], _55.dummy[7], float4(fast::clamp((sdroundrect(param_1, param_2, param_3) + (_55.dummy[9].w * 0.5)) / _55.dummy[9].w, 0.0, 1.0))) * _121;
        }
        else
        {
            if (_133 == 1)
            {
                float4 color = tex.sample(smp, ((float3x3(float3(_55.dummy[3].xyz), float3(_55.dummy[4].xyz), float3(_55.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy / _55.dummy[9].xy));
                int _263 = int(_55.dummy[10].z);
                if (_263 == 1)
                {
                    color = float4(color.xyz * color.w, color.w);
                }
                if (_263 == 2)
                {
                    color = float4(color.x);
                }
                bool _290 = _263 == 3;
                bool _296;
                if (_290)
                {
                    _296 = color.w == 1.0;
                }
                else
                {
                    _296 = _290;
                }
                if (_296)
                {
                    discard_fragment();
                }
                float4 _302 = color;
                float4 _308 = (_302 * _55.dummy[6]) * _121;
                color = _308;
                result = _308;
            }
            else
            {
                if (_133 == 2)
                {
                    result = float4(1.0);
                }
                else
                {
                    if (_133 == 3)
                    {
                        float4 color_1 = tex.sample(smp, in.ftcoord);
                        int _334 = int(_55.dummy[10].z);
                        if (_334 == 1)
                        {
                            color_1 = float4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_334 == 2)
                        {
                            color_1 = float4(color_1.x);
                        }
                        result = (color_1 * _121) * _55.dummy[6];
                    }
                }
            }
        }
        out.outColor = result;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_fs_source_metal_macos[3475] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,0x72,0x61,0x67,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,
    0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x74,0x68,0x72,0x65,
    0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,
    0x20,0x70,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,0x61,
    0x67,0x26,0x20,0x5f,0x35,0x35,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x5f,0x31,0x30,0x35,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x30,0x2e,0x35,0x29,0x20,0x2d,0x20,0x28,0x28,0x61,0x62,0x73,0x28,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x30,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x32,
    0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x70,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,
    0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,
    0x20,0x2a,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,
    0x7a,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,
    0x2e,0x78,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,
    0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,
    0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,
    0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,
    0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x26,0x20,0x70,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x65,
    0x78,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,
    0x61,0x62,0x73,0x28,0x70,0x74,0x29,0x20,0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x72,0x61,0x64,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x66,0x61,0x73,0x74,0x3a,
    0x3a,0x6d,0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x5f,
    0x32,0x39,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x39,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x20,0x2b,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x66,0x61,0x73,0x74,
    0x3a,0x3a,0x6d,0x61,0x78,0x28,0x5f,0x32,0x39,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x28,0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,
    0x66,0x72,0x61,0x67,0x26,0x20,0x5f,0x35,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,
    0x65,0x72,0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x74,0x65,0x78,0x20,0x5b,0x5b,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,0x6d,0x70,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x28,0x33,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,
    0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,
    0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x2c,0x20,0x5f,0x35,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x31,0x32,0x31,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,
    0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x31,0x33,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x30,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,
    0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,0x5d,0x2e,0x78,
    0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x35,
    0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,0x35,0x35,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x2c,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x37,0x5d,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x66,
    0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x73,0x64,0x72,0x6f,
    0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x33,0x29,0x20,0x2b,0x20,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x29,0x20,0x2f,0x20,0x5f,
    0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x77,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,
    0x6d,0x70,0x2c,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x36,
    0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x36,0x33,0x20,0x3d,
    0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x32,0x39,0x30,0x20,0x3d,0x20,0x5f,0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,
    0x6f,0x6c,0x20,0x5f,0x32,0x39,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x39,
    0x36,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,
    0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,
    0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,0x5f,0x32,0x39,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x36,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x30,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x30,0x38,0x20,0x3d,0x20,0x28,0x5f,0x33,
    0x30,0x32,0x20,0x2a,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,
    0x5d,0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,
    0x33,0x30,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x33,0x30,0x38,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,
    0x70,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x33,0x34,0x20,0x3d,0x20,0x69,
    0x6e,0x74,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,
    0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x33,
    0x34,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,
    0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x2c,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x33,0x34,0x20,0x3d,
    0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,
    0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x2a,0x20,0x5f,0x31,
    0x32,0x31,0x29,0x20,0x2a,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct viewSize
    {
        float4 _viewSize;
    };

    struct main0_out
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float2 vertex0 [[attribute(0)]];
        float2 tcoord [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant viewSize& _28 [[buffer(0)]])
    {
        main0_out out = {};
        out.ftcoord = in.tcoord;
        out.fpos = in.vertex0;
        out.gl_Position = float4(((2.0 * in.vertex0.x) / _28._viewSize.x) - 1.0, 1.0 - ((2.0 * in.vertex0.y) / _28._viewSize.y), 0.0, 1.0);
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_vs_source_metal_ios[665] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x69,
    0x65,0x77,0x53,0x69,0x7a,0x65,0x26,0x20,0x5f,0x32,0x38,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x74,0x63,
    0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x20,
    0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x2e,0x78,0x29,0x20,
    0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,
    0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,
    0x78,0x30,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,
    0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct frag
    {
        float4 dummy[11];
    };

    struct main0_out
    {
        float4 outColor [[color(0)]];
    };

    struct main0_in
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
    };

    static inline __attribute__((always_inline))
    float scissorMask(thread const float2& p, constant frag& _55)
    {
        float2 _105 = float2(0.5) - ((abs((float3x3(float3(_55.dummy[0].xyz), float3(_55.dummy[1].xyz), float3(_55.dummy[2].xyz)) * float3(p, 1.0)).xy) - _55.dummy[8].xy) * _55.dummy[8].zw);
        return fast::clamp(_105.x, 0.0, 1.0) * fast::clamp(_105.y, 0.0, 1.0);
    }

    static inline __attribute__((always_inline))
    float sdroundrect(thread const float2& pt, thread const float2& ext, thread const float& rad)
    {
        float2 _29 = abs(pt) - (ext - float2(rad));
        return (fast::min(fast::max(_29.x, _29.y), 0.0) + length(fast::max(_29, float2(0.0)))) - rad;
    }

    fragment main0_out main0(main0_in in [[stage_in]], constant frag& _55 [[buffer(1)]], texture2d<float> tex [[texture(0)]], sampler smp [[sampler(3)]])
    {
        main0_out out = {};
        float2 param = in.fpos;
        float _121 = scissorMask(param, _55);
        if (_121 == 0.0)
        {
            discard_fragment();
        }
        int _133 = int(_55.dummy[10].w);
        float4 result;
        if (_133 == 0)
        {
            float2 param_1 = (float3x3(float3(_55.dummy[3].xyz), float3(_55.dummy[4].xyz), float3(_55.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy;
            float2 param_2 = _55.dummy[9].xy;
            float param_3 = _55.dummy[9].z;
            result = mix(_55.dummy[6], _55.dummy[7], float4(fast::clamp((sdroundrect(param_1, param_2, param_3) + (_55.dummy[9].w * 0.5)) / _55.dummy[9].w, 0.0, 1.0))) * _121;
        }
        else
        {
            if (_133 == 1)
            {
                float4 color = tex.sample(smp, ((float3x3(float3(_55.dummy[3].xyz), float3(_55.dummy[4].xyz), float3(_55.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy / _55.dummy[9].xy));
                int _263 = int(_55.dummy[10].z);
                if (_263 == 1)
                {
                    color = float4(color.xyz * color.w, color.w);
                }
                if (_263 == 2)
                {
                    color = float4(color.x);
                }
                bool _290 = _263 == 3;
                bool _296;
                if (_290)
                {
                    _296 = color.w == 1.0;
                }
                else
                {
                    _296 = _290;
                }
                if (_296)
                {
                    discard_fragment();
                }
                float4 _302 = color;
                float4 _308 = (_302 * _55.dummy[6]) * _121;
                color = _308;
                result = _308;
            }
            else
            {
                if (_133 == 2)
                {
                    result = float4(1.0);
                }
                else
                {
                    if (_133 == 3)
                    {
                        float4 color_1 = tex.sample(smp, in.ftcoord);
                        int _334 = int(_55.dummy[10].z);
                        if (_334 == 1)
                        {
                            color_1 = float4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_334 == 2)
                        {
                            color_1 = float4(color_1.x);
                        }
                        result = (color_1 * _121) * _55.dummy[6];
                    }
                }
            }
        }
        out.outColor = result;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_fs_source_metal_ios[3475] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,0x72,0x61,0x67,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,
    0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x74,0x68,0x72,0x65,
    0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,
    0x20,0x70,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,0x61,
    0x67,0x26,0x20,0x5f,0x35,0x35,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x5f,0x31,0x30,0x35,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x30,0x2e,0x35,0x29,0x20,0x2d,0x20,0x28,0x28,0x61,0x62,0x73,0x28,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x30,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x32,
    0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x70,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,
    0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,
    0x20,0x2a,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,
    0x7a,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,
    0x2e,0x78,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,
    0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,
    0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,
    0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,
    0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x26,0x20,0x70,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x65,
    0x78,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,
    0x61,0x62,0x73,0x28,0x70,0x74,0x29,0x20,0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x72,0x61,0x64,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x66,0x61,0x73,0x74,0x3a,
    0x3a,0x6d,0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x5f,
    0x32,0x39,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x39,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x20,0x2b,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x66,0x61,0x73,0x74,
    0x3a,0x3a,0x6d,0x61,0x78,0x28,0x5f,0x32,0x39,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x28,0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,
    0x66,0x72,0x61,0x67,0x26,0x20,0x5f,0x35,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,
    0x65,0x72,0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x74,0x65,0x78,0x20,0x5b,0x5b,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,0x6d,0x70,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x28,0x33,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,
    0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,
    0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x2c,0x20,0x5f,0x35,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x31,0x32,0x31,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,
    0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x31,0x33,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x30,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,
    0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,0x5d,0x2e,0x78,
    0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x35,
    0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,0x35,0x35,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x2c,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x37,0x5d,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x66,
    0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x73,0x64,0x72,0x6f,
    0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x33,0x29,0x20,0x2b,0x20,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x29,0x20,0x2f,0x20,0x5f,
    0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x77,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,
    0x6d,0x70,0x2c,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x36,
    0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x36,0x33,0x20,0x3d,
    0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x32,0x39,0x30,0x20,0x3d,0x20,0x5f,0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,
    0x6f,0x6c,0x20,0x5f,0x32,0x39,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x39,
    0x36,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,
    0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,
    0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,0x5f,0x32,0x39,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x36,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x30,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x30,0x38,0x20,0x3d,0x20,0x28,0x5f,0x33,
    0x30,0x32,0x20,0x2a,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,
    0x5d,0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,
    0x33,0x30,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x33,0x30,0x38,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,
    0x70,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x33,0x34,0x20,0x3d,0x20,0x69,
    0x6e,0x74,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,
    0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x33,
    0x34,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,
    0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x2c,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x33,0x34,0x20,0x3d,
    0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,
    0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x2a,0x20,0x5f,0x31,
    0x32,0x31,0x29,0x20,0x2a,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct viewSize
    {
        float4 _viewSize;
    };

    struct main0_out
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float2 vertex0 [[attribute(0)]];
        float2 tcoord [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant viewSize& _28 [[buffer(0)]])
    {
        main0_out out = {};
        out.ftcoord = in.tcoord;
        out.fpos = in.vertex0;
        out.gl_Position = float4(((2.0 * in.vertex0.x) / _28._viewSize.x) - 1.0, 1.0 - ((2.0 * in.vertex0.y) / _28._viewSize.y), 0.0, 1.0);
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_vs_source_metal_sim[665] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x69,
    0x65,0x77,0x53,0x69,0x7a,0x65,0x26,0x20,0x5f,0x32,0x38,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x74,0x63,
    0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x20,
    0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x2e,0x78,0x29,0x20,
    0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,
    0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,
    0x78,0x30,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,
    0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct frag
    {
        float4 dummy[11];
    };

    struct main0_out
    {
        float4 outColor [[color(0)]];
    };

    struct main0_in
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
    };

    static inline __attribute__((always_inline))
    float scissorMask(thread const float2& p, constant frag& _55)
    {
        float2 _105 = float2(0.5) - ((abs((float3x3(float3(_55.dummy[0].xyz), float3(_55.dummy[1].xyz), float3(_55.dummy[2].xyz)) * float3(p, 1.0)).xy) - _55.dummy[8].xy) * _55.dummy[8].zw);
        return fast::clamp(_105.x, 0.0, 1.0) * fast::clamp(_105.y, 0.0, 1.0);
    }

    static inline __attribute__((always_inline))
    float sdroundrect(thread const float2& pt, thread const float2& ext, thread const float& rad)
    {
        float2 _29 = abs(pt) - (ext - float2(rad));
        return (fast::min(fast::max(_29.x, _29.y), 0.0) + length(fast::max(_29, float2(0.0)))) - rad;
    }

    fragment main0_out main0(main0_in in [[stage_in]], constant frag& _55 [[buffer(1)]], texture2d<float> tex [[texture(0)]], sampler smp [[sampler(3)]])
    {
        main0_out out = {};
        float2 param = in.fpos;
        float _121 = scissorMask(param, _55);
        if (_121 == 0.0)
        {
            discard_fragment();
        }
        int _133 = int(_55.dummy[10].w);
        float4 result;
        if (_133 == 0)
        {
            float2 param_1 = (float3x3(float3(_55.dummy[3].xyz), float3(_55.dummy[4].xyz), float3(_55.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy;
            float2 param_2 = _55.dummy[9].xy;
            float param_3 = _55.dummy[9].z;
            result = mix(_55.dummy[6], _55.dummy[7], float4(fast::clamp((sdroundrect(param_1, param_2, param_3) + (_55.dummy[9].w * 0.5)) / _55.dummy[9].w, 0.0, 1.0))) * _121;
        }
        else
        {
            if (_133 == 1)
            {
                float4 color = tex.sample(smp, ((float3x3(float3(_55.dummy[3].xyz), float3(_55.dummy[4].xyz), float3(_55.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy / _55.dummy[9].xy));
                int _263 = int(_55.dummy[10].z);
                if (_263 == 1)
                {
                    color = float4(color.xyz * color.w, color.w);
                }
                if (_263 == 2)
                {
                    color = float4(color.x);
                }
                bool _290 = _263 == 3;
                bool _296;
                if (_290)
                {
                    _296 = color.w == 1.0;
                }
                else
                {
                    _296 = _290;
                }
                if (_296)
                {
                    discard_fragment();
                }
                float4 _302 = color;
                float4 _308 = (_302 * _55.dummy[6]) * _121;
                color = _308;
                result = _308;
            }
            else
            {
                if (_133 == 2)
                {
                    result = float4(1.0);
                }
                else
                {
                    if (_133 == 3)
                    {
                        float4 color_1 = tex.sample(smp, in.ftcoord);
                        int _334 = int(_55.dummy[10].z);
                        if (_334 == 1)
                        {
                            color_1 = float4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_334 == 2)
                        {
                            color_1 = float4(color_1.x);
                        }
                        result = (color_1 * _121) * _55.dummy[6];
                    }
                }
            }
        }
        out.outColor = result;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_fs_source_metal_sim[3475] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,0x72,0x61,0x67,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,
    0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x74,0x68,0x72,0x65,
    0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,
    0x20,0x70,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,0x61,
    0x67,0x26,0x20,0x5f,0x35,0x35,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x5f,0x31,0x30,0x35,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x28,0x30,0x2e,0x35,0x29,0x20,0x2d,0x20,0x28,0x28,0x61,0x62,0x73,0x28,
    0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x30,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x32,
    0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x70,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,
    0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,
    0x20,0x2a,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,
    0x7a,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,
    0x2e,0x78,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,
    0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x35,
    0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,
    0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,
    0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,
    0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x26,0x20,0x70,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x65,
    0x78,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x26,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x32,0x39,0x20,0x3d,0x20,
    0x61,0x62,0x73,0x28,0x70,0x74,0x29,0x20,0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x72,0x61,0x64,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x66,0x61,0x73,0x74,0x3a,
    0x3a,0x6d,0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x5f,
    0x32,0x39,0x2e,0x78,0x2c,0x20,0x5f,0x32,0x39,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,
    0x30,0x29,0x20,0x2b,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x66,0x61,0x73,0x74,
    0x3a,0x3a,0x6d,0x61,0x78,0x28,0x5f,0x32,0x39,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x28,0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,
    0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,
    0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,
    0x66,0x72,0x61,0x67,0x26,0x20,0x5f,0x35,0x35,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,
    0x65,0x72,0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x32,0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x74,0x65,0x78,0x20,0x5b,0x5b,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x20,0x73,0x6d,0x70,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x28,0x33,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,
    0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x32,0x31,0x20,0x3d,
    0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x2c,0x20,0x5f,0x35,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x31,0x32,0x31,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,
    0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x31,0x33,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x30,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,
    0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,0x5d,0x2e,0x78,
    0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x35,
    0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x5f,0x35,0x35,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x2c,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x37,0x5d,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x66,
    0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x73,0x64,0x72,0x6f,
    0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x33,0x29,0x20,0x2b,0x20,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x29,0x20,0x2f,0x20,0x5f,
    0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x77,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,
    0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,
    0x6d,0x70,0x2c,0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x36,
    0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x36,0x33,0x20,0x3d,
    0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x32,0x39,0x30,0x20,0x3d,0x20,0x5f,0x32,0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,
    0x6f,0x6c,0x20,0x5f,0x32,0x39,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x30,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x32,0x39,
    0x36,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,
    0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,
    0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,0x5f,0x32,0x39,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x36,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x30,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x30,0x38,0x20,0x3d,0x20,0x28,0x5f,0x33,
    0x30,0x32,0x20,0x2a,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,
    0x5d,0x29,0x20,0x2a,0x20,0x5f,0x31,0x32,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,
    0x33,0x30,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x33,0x30,0x38,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x33,0x33,0x20,0x3d,0x3d,0x20,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,
    0x70,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x33,0x34,0x20,0x3d,0x20,0x69,
    0x6e,0x74,0x28,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,
    0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x33,
    0x34,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,
    0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x2c,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x33,0x34,0x20,0x3d,
    0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,
    0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x2a,0x20,0x5f,0x31,
    0x32,0x31,0x29,0x20,0x2a,0x20,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
#endif
/*
    diagnostic(off, derivative_uniformity);

    struct viewSize {
      /_ @offset(0) _/
      x_viewSize : vec4f,
    }

    var<private> ftcoord : vec2f;

    var<private> tcoord : vec2f;

    var<private> fpos : vec2f;

    var<private> vertex_1 : vec2f;

    @binding(0) @group(0) var<uniform> x_28 : viewSize;

    var<private> gl_Position : vec4f;

    fn main_1() {
      var x : f32;
      var y : f32;
      ftcoord = tcoord;
      fpos = vertex_1;
      x = (((2.0f * vertex_1.x) / x_28.x_viewSize.x) - 1.0f);
      y = (1.0f - ((2.0f * vertex_1.y) / x_28.x_viewSize.y));
      gl_Position = vec4f(x, y, 0.0f, 1.0f);
      return;
    }

    struct main_out {
      @location(0)
      ftcoord_1 : vec2f,
      @location(1)
      fpos_1 : vec2f,
      @builtin(position)
      gl_Position : vec4f,
    }

    @vertex
    fn main(@location(1) tcoord_param : vec2f, @location(0) vertex_1_param : vec2f) -> main_out {
      tcoord = tcoord_param;
      vertex_1 = vertex_1_param;
      main_1();
      return main_out(ftcoord, fpos, gl_Position);
    }
*/
#if defined(SOKOL_WGPU)
static const uint8_t nanovg_vs_source_wgsl[917] = {
    0x64,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x28,0x6f,0x66,0x66,0x2c,0x20,
    0x64,0x65,0x72,0x69,0x76,0x61,0x74,0x69,0x76,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x69,0x74,0x79,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x20,0x7b,0x0a,0x20,0x20,0x2f,0x2a,0x20,
    0x40,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x30,0x29,0x20,0x2a,0x2f,0x0a,0x20,0x20,
    0x78,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x34,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,
    0x74,0x65,0x3e,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x76,0x65,
    0x63,0x32,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,
    0x65,0x3e,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,
    0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,
    0x20,0x66,0x70,0x6f,0x73,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,
    0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,
    0x40,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x28,0x30,0x29,0x20,0x40,0x67,0x72,0x6f,
    0x75,0x70,0x28,0x30,0x29,0x20,0x76,0x61,0x72,0x3c,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x3e,0x20,0x78,0x5f,0x32,0x38,0x20,0x3a,0x20,0x76,0x69,0x65,0x77,0x53,0x69,
    0x7a,0x65,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,
    0x3e,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,
    0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x5f,
    0x31,0x28,0x29,0x20,0x7b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x78,0x20,0x3a,0x20,
    0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x79,0x20,0x3a,0x20,0x66,
    0x33,0x32,0x3b,0x0a,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x66,0x70,0x6f,0x73,0x20,0x3d,
    0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x31,0x3b,0x0a,0x20,0x20,0x78,0x20,0x3d,
    0x20,0x28,0x28,0x28,0x32,0x2e,0x30,0x66,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x31,0x2e,0x78,0x29,0x20,0x2f,0x20,0x78,0x5f,0x32,0x38,0x2e,0x78,0x5f,
    0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,
    0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x79,0x20,0x3d,0x20,0x28,0x31,0x2e,0x30,0x66,
    0x20,0x2d,0x20,0x28,0x28,0x32,0x2e,0x30,0x66,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x31,0x2e,0x79,0x29,0x20,0x2f,0x20,0x78,0x5f,0x32,0x38,0x2e,0x78,
    0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x66,0x28,0x78,0x2c,0x20,0x79,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,
    0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x5f,0x6f,0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x28,0x30,0x29,0x0a,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x5f,
    0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x2c,0x0a,0x20,0x20,0x40,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x31,0x29,0x0a,0x20,0x20,0x66,0x70,0x6f,0x73,
    0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x2c,0x0a,0x20,0x20,0x40,0x62,
    0x75,0x69,0x6c,0x74,0x69,0x6e,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,
    0x0a,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x34,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x40,0x76,0x65,0x72,0x74,
    0x65,0x78,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x28,0x40,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x28,0x31,0x29,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x2c,0x20,0x40,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x31,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,
    0x66,0x29,0x20,0x2d,0x3e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x20,0x7b,
    0x0a,0x20,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,0x63,0x6f,0x6f,
    0x72,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x31,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x31,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,
    0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x61,0x69,0x6e,
    0x5f,0x6f,0x75,0x74,0x28,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x66,0x70,
    0x6f,0x73,0x2c,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,
    0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
/*
    diagnostic(off, derivative_uniformity);

    alias Arr = array<vec4f, 11u>;

    struct frag {
      /_ @offset(0) _/
      dummy : Arr,
    }

    @binding(9) @group(0) var<uniform> x_55 : frag;

    var<private> fpos : vec2f;

    @binding(64) @group(1) var tex : texture_2d<f32>;

    @binding(65) @group(1) var smp : sampler;

    var<private> ftcoord : vec2f;

    var<private> outColor : vec4f;

    fn scissorMask_vf2_(p : ptr<function, vec2f>) -> f32 {
      var sc : vec2f;
      let x_62 = x_55.dummy[0i].xyz;
      let x_66 = x_55.dummy[1i].xyz;
      let x_70 = x_55.dummy[2i].xyz;
      let x_86 = *(p);
      sc = (abs(((mat3x3f(vec3f(x_62.x, x_62.y, x_62.z), vec3f(x_66.x, x_66.y, x_66.z), vec3f(x_70.x, x_70.y, x_70.z)) * vec3f(x_86.x, x_86.y, 1.0f))).xy) - x_55.dummy[8i].xy);
      sc = (vec2f(0.5f) - (sc * x_55.dummy[8i].zw));
      let x_107 = sc.x;
      let x_110 = sc.y;
      return (clamp(x_107, 0.0f, 1.0f) * clamp(x_110, 0.0f, 1.0f));
    }

    fn sdroundrect_vf2_vf2_f1_(pt : ptr<function, vec2f>, ext : ptr<function, vec2f>, rad : ptr<function, f32>) -> f32 {
      var ext2 : vec2f;
      var d : vec2f;
      ext2 = (*(ext) - vec2f(*(rad)));
      d = (abs(*(pt)) - ext2);
      let x_33 = d.x;
      let x_36 = d.y;
      let x_40 = d;
      let x_45 = *(rad);
      return ((min(max(x_33, x_36), 0.0f) + length(max(x_40, vec2f(0.0f)))) - x_45);
    }

    fn main_1() {
      var strokeAlpha : f32;
      var scissor : f32;
      var param : vec2f;
      var pt_1 : vec2f;
      var d_1 : f32;
      var param_1 : vec2f;
      var param_2 : vec2f;
      var param_3 : f32;
      var color : vec4f;
      var result : vec4f;
      var pt_2 : vec2f;
      var color_1 : vec4f;
      var color_2 : vec4f;
      strokeAlpha = 1.0f;
      param = fpos;
      let x_121 = scissorMask_vf2_(&(param));
      scissor = x_121;
      if ((scissor == 0.0f)) {
        discard;
      }
      if ((i32(x_55.dummy[10i].w) == 0i)) {
        let x_141 = x_55.dummy[3i].xyz;
        let x_145 = x_55.dummy[4i].xyz;
        let x_149 = x_55.dummy[5i].xyz;
        pt_1 = ((mat3x3f(vec3f(x_141.x, x_141.y, x_141.z), vec3f(x_145.x, x_145.y, x_145.z), vec3f(x_149.x, x_149.y, x_149.z)) * vec3f(fpos.x, fpos.y, 1.0f))).xy;
        param_1 = pt_1;
        param_2 = x_55.dummy[9i].xy;
        param_3 = x_55.dummy[9i].z;
        let x_181 = sdroundrect_vf2_vf2_f1_(&(param_1), &(param_2), &(param_3));
        d_1 = clamp(((x_181 + (x_55.dummy[9i].w * 0.5f)) / x_55.dummy[9i].w), 0.0f, 1.0f);
        color = mix(x_55.dummy[6i], x_55.dummy[7i], vec4f(d_1));
        color = (color * (strokeAlpha * scissor));
        result = color;
      } else {
        var x_295 : bool;
        var x_296 : bool;
        if ((i32(x_55.dummy[10i].w) == 1i)) {
          let x_218 = x_55.dummy[3i].xyz;
          let x_221 = x_55.dummy[4i].xyz;
          let x_224 = x_55.dummy[5i].xyz;
          pt_2 = (((mat3x3f(vec3f(x_218.x, x_218.y, x_218.z), vec3f(x_221.x, x_221.y, x_221.z), vec3f(x_224.x, x_224.y, x_224.z)) * vec3f(fpos.x, fpos.y, 1.0f))).xy / x_55.dummy[9i].xy);
          let x_259 = pt_2;
          let x_260 = textureSample(tex, smp, x_259);
          color_1 = x_260;
          if ((i32(x_55.dummy[10i].z) == 1i)) {
            let x_271 = (color_1.xyz * color_1.w);
            color_1 = vec4f(x_271.x, x_271.y, x_271.z, color_1.w);
          }
          if ((i32(x_55.dummy[10i].z) == 2i)) {
            color_1 = vec4f(color_1.x);
          }
          let x_290 = (i32(x_55.dummy[10i].z) == 3i);
          x_296 = x_290;
          if (x_290) {
            x_295 = (color_1.w == 1.0f);
            x_296 = x_295;
          }
          if (x_296) {
            discard;
          }
          color_1 = (color_1 * x_55.dummy[6i]);
          color_1 = (color_1 * (strokeAlpha * scissor));
          result = color_1;
        } else {
          if ((i32(x_55.dummy[10i].w) == 2i)) {
            result = vec4f(1.0f);
          } else {
            if ((i32(x_55.dummy[10i].w) == 3i)) {
              let x_330 = ftcoord;
              let x_331 = textureSample(tex, smp, x_330);
              color_2 = x_331;
              if ((i32(x_55.dummy[10i].z) == 1i)) {
                let x_342 = (color_2.xyz * color_2.w);
                color_2 = vec4f(x_342.x, x_342.y, x_342.z, color_2.w);
              }
              if ((i32(x_55.dummy[10i].z) == 2i)) {
                color_2 = vec4f(color_2.x);
              }
              result = ((color_2 * scissor) * x_55.dummy[6i]);
            }
          }
        }
      }
      outColor = result;
      return;
    }

    struct main_out {
      @location(0)
      outColor_1 : vec4f,
    }

    @fragment
    fn main(@location(1) fpos_param : vec2f, @location(0) ftcoord_param : vec2f) -> main_out {
      fpos = fpos_param;
      ftcoord = ftcoord_param;
      main_1();
      return main_out(outColor);
    }
*/
#if defined(SOKOL_WGPU)
static const uint8_t nanovg_fs_source_wgsl[4346] = {
    0x64,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x28,0x6f,0x66,0x66,0x2c,0x20,
    0x64,0x65,0x72,0x69,0x76,0x61,0x74,0x69,0x76,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x69,0x74,0x79,0x29,0x3b,0x0a,0x0a,0x61,0x6c,0x69,0x61,0x73,0x20,0x41,
    0x72,0x72,0x20,0x3d,0x20,0x61,0x72,0x72,0x61,0x79,0x3c,0x76,0x65,0x63,0x34,0x66,
    0x2c,0x20,0x31,0x31,0x75,0x3e,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x66,0x72,0x61,0x67,0x20,0x7b,0x0a,0x20,0x20,0x2f,0x2a,0x20,0x40,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x30,0x29,0x20,0x2a,0x2f,0x0a,0x20,0x20,0x64,0x75,0x6d,0x6d,
    0x79,0x20,0x3a,0x20,0x41,0x72,0x72,0x2c,0x0a,0x7d,0x0a,0x0a,0x40,0x62,0x69,0x6e,
    0x64,0x69,0x6e,0x67,0x28,0x39,0x29,0x20,0x40,0x67,0x72,0x6f,0x75,0x70,0x28,0x30,
    0x29,0x20,0x76,0x61,0x72,0x3c,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x3e,0x20,0x78,
    0x5f,0x35,0x35,0x20,0x3a,0x20,0x66,0x72,0x61,0x67,0x3b,0x0a,0x0a,0x76,0x61,0x72,
    0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x66,0x70,0x6f,0x73,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,0x40,0x62,0x69,0x6e,0x64,0x69,0x6e,
    0x67,0x28,0x36,0x34,0x29,0x20,0x40,0x67,0x72,0x6f,0x75,0x70,0x28,0x31,0x29,0x20,
    0x76,0x61,0x72,0x20,0x74,0x65,0x78,0x20,0x3a,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x5f,0x32,0x64,0x3c,0x66,0x33,0x32,0x3e,0x3b,0x0a,0x0a,0x40,0x62,0x69,0x6e,
    0x64,0x69,0x6e,0x67,0x28,0x36,0x35,0x29,0x20,0x40,0x67,0x72,0x6f,0x75,0x70,0x28,
    0x31,0x29,0x20,0x76,0x61,0x72,0x20,0x73,0x6d,0x70,0x20,0x3a,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,
    0x74,0x65,0x3e,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x76,0x65,
    0x63,0x32,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,
    0x65,0x3e,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x76,0x65,
    0x63,0x34,0x66,0x3b,0x0a,0x0a,0x66,0x6e,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,
    0x4d,0x61,0x73,0x6b,0x5f,0x76,0x66,0x32,0x5f,0x28,0x70,0x20,0x3a,0x20,0x70,0x74,
    0x72,0x3c,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x76,0x65,0x63,0x32,
    0x66,0x3e,0x29,0x20,0x2d,0x3e,0x20,0x66,0x33,0x32,0x20,0x7b,0x0a,0x20,0x20,0x76,
    0x61,0x72,0x20,0x73,0x63,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,
    0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x36,0x32,0x20,0x3d,0x20,0x78,0x5f,0x35,0x35,
    0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x30,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x36,0x36,0x20,0x3d,0x20,0x78,0x5f,0x35,
    0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,
    0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x37,0x30,0x20,0x3d,0x20,0x78,0x5f,
    0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x32,0x69,0x5d,0x2e,0x78,0x79,0x7a,
    0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x38,0x36,0x20,0x3d,0x20,0x2a,
    0x28,0x70,0x29,0x3b,0x0a,0x20,0x20,0x73,0x63,0x20,0x3d,0x20,0x28,0x61,0x62,0x73,
    0x28,0x28,0x28,0x6d,0x61,0x74,0x33,0x78,0x33,0x66,0x28,0x76,0x65,0x63,0x33,0x66,
    0x28,0x78,0x5f,0x36,0x32,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x36,0x32,0x2e,0x79,0x2c,
    0x20,0x78,0x5f,0x36,0x32,0x2e,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,
    0x78,0x5f,0x36,0x36,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x36,0x36,0x2e,0x79,0x2c,0x20,
    0x78,0x5f,0x36,0x36,0x2e,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,
    0x5f,0x37,0x30,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x37,0x30,0x2e,0x79,0x2c,0x20,0x78,
    0x5f,0x37,0x30,0x2e,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x66,0x28,
    0x78,0x5f,0x38,0x36,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x38,0x36,0x2e,0x79,0x2c,0x20,
    0x31,0x2e,0x30,0x66,0x29,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x78,0x5f,
    0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x69,0x5d,0x2e,0x78,0x79,0x29,
    0x3b,0x0a,0x20,0x20,0x73,0x63,0x20,0x3d,0x20,0x28,0x76,0x65,0x63,0x32,0x66,0x28,
    0x30,0x2e,0x35,0x66,0x29,0x20,0x2d,0x20,0x28,0x73,0x63,0x20,0x2a,0x20,0x78,0x5f,
    0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x69,0x5d,0x2e,0x7a,0x77,0x29,
    0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x30,0x37,0x20,0x3d,
    0x20,0x73,0x63,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,
    0x31,0x30,0x20,0x3d,0x20,0x73,0x63,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,0x78,0x5f,0x31,0x30,0x37,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x20,0x2a,0x20,
    0x63,0x6c,0x61,0x6d,0x70,0x28,0x78,0x5f,0x31,0x31,0x30,0x2c,0x20,0x30,0x2e,0x30,
    0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6e,
    0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x5f,0x76,0x66,0x32,
    0x5f,0x76,0x66,0x32,0x5f,0x66,0x31,0x5f,0x28,0x70,0x74,0x20,0x3a,0x20,0x70,0x74,
    0x72,0x3c,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x76,0x65,0x63,0x32,
    0x66,0x3e,0x2c,0x20,0x65,0x78,0x74,0x20,0x3a,0x20,0x70,0x74,0x72,0x3c,0x66,0x75,
    0x6e,0x63,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x76,0x65,0x63,0x32,0x66,0x3e,0x2c,0x20,
    0x72,0x61,0x64,0x20,0x3a,0x20,0x70,0x74,0x72,0x3c,0x66,0x75,0x6e,0x63,0x74,0x69,
    0x6f,0x6e,0x2c,0x20,0x66,0x33,0x32,0x3e,0x29,0x20,0x2d,0x3e,0x20,0x66,0x33,0x32,
    0x20,0x7b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x65,0x78,0x74,0x32,0x20,0x3a,0x20,
    0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x64,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x65,0x78,0x74,0x32,0x20,0x3d,
    0x20,0x28,0x2a,0x28,0x65,0x78,0x74,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x66,
    0x28,0x2a,0x28,0x72,0x61,0x64,0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x64,0x20,0x3d,
    0x20,0x28,0x61,0x62,0x73,0x28,0x2a,0x28,0x70,0x74,0x29,0x29,0x20,0x2d,0x20,0x65,
    0x78,0x74,0x32,0x29,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x33,0x33,
    0x20,0x3d,0x20,0x64,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,
    0x33,0x36,0x20,0x3d,0x20,0x64,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x34,0x30,0x20,0x3d,0x20,0x64,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x34,0x35,0x20,0x3d,0x20,0x2a,0x28,0x72,0x61,0x64,0x29,0x3b,0x0a,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x28,0x6d,0x69,0x6e,0x28,0x6d,0x61,
    0x78,0x28,0x78,0x5f,0x33,0x33,0x2c,0x20,0x78,0x5f,0x33,0x36,0x29,0x2c,0x20,0x30,
    0x2e,0x30,0x66,0x29,0x20,0x2b,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x6d,0x61,
    0x78,0x28,0x78,0x5f,0x34,0x30,0x2c,0x20,0x76,0x65,0x63,0x32,0x66,0x28,0x30,0x2e,
    0x30,0x66,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x78,0x5f,0x34,0x35,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,0x29,0x20,0x7b,
    0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x41,0x6c,0x70,
    0x68,0x61,0x20,0x3a,0x20,0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,
    0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x20,0x3a,0x20,0x66,0x33,0x32,0x3b,0x0a,0x20,
    0x20,0x76,0x61,0x72,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x32,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x74,0x5f,0x31,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x64,0x5f,
    0x31,0x20,0x3a,0x20,0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,
    0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3a,0x20,
    0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x20,0x3a,0x20,0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,
    0x72,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,
    0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3a,0x20,
    0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x74,0x5f,
    0x32,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,
    0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x20,
    0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x20,0x20,0x73,0x74,0x72,0x6f,0x6b,
    0x65,0x41,0x6c,0x70,0x68,0x61,0x20,0x3d,0x20,0x31,0x2e,0x30,0x66,0x3b,0x0a,0x20,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x20,
    0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x32,0x31,0x20,0x3d,0x20,0x73,0x63,0x69,
    0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x5f,0x76,0x66,0x32,0x5f,0x28,0x26,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x29,0x3b,0x0a,0x20,0x20,0x73,0x63,0x69,0x73,0x73,
    0x6f,0x72,0x20,0x3d,0x20,0x78,0x5f,0x31,0x32,0x31,0x3b,0x0a,0x20,0x20,0x69,0x66,
    0x20,0x28,0x28,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x20,0x3d,0x3d,0x20,0x30,0x2e,
    0x30,0x66,0x29,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,
    0x72,0x64,0x3b,0x0a,0x20,0x20,0x7d,0x0a,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x69,
    0x33,0x32,0x28,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,
    0x69,0x5d,0x2e,0x77,0x29,0x20,0x3d,0x3d,0x20,0x30,0x69,0x29,0x29,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,
    0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,0x69,0x5d,0x2e,0x78,
    0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x34,
    0x35,0x20,0x3d,0x20,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,
    0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x31,0x34,0x39,0x20,0x3d,0x20,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x35,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x70,0x74,0x5f,0x31,0x20,0x3d,0x20,0x28,0x28,0x6d,0x61,0x74,0x33,0x78,0x33,0x66,
    0x28,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x31,0x34,0x31,0x2e,0x78,0x2c,0x20,
    0x78,0x5f,0x31,0x34,0x31,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x31,0x34,0x31,0x2e,0x7a,
    0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x31,0x34,0x35,0x2e,0x78,
    0x2c,0x20,0x78,0x5f,0x31,0x34,0x35,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x31,0x34,0x35,
    0x2e,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x31,0x34,0x39,
    0x2e,0x78,0x2c,0x20,0x78,0x5f,0x31,0x34,0x39,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x31,
    0x34,0x39,0x2e,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x66,
    0x70,0x6f,0x73,0x2e,0x78,0x2c,0x20,0x66,0x70,0x6f,0x73,0x2e,0x79,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x70,0x74,0x5f,0x31,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x78,0x5f,0x35,
    0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x69,0x5d,0x2e,0x78,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x78,0x5f,
    0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x69,0x5d,0x2e,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x38,0x31,0x20,0x3d,0x20,
    0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x5f,0x76,0x66,0x32,0x5f,
    0x76,0x66,0x32,0x5f,0x66,0x31,0x5f,0x28,0x26,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x29,0x2c,0x20,0x26,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x2c,0x20,
    0x26,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x64,0x5f,0x31,0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x28,0x78,
    0x5f,0x31,0x38,0x31,0x20,0x2b,0x20,0x28,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x39,0x69,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x66,0x29,
    0x29,0x20,0x2f,0x20,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,
    0x69,0x5d,0x2e,0x77,0x29,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,
    0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x6d,0x69,0x78,0x28,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,
    0x69,0x5d,0x2c,0x20,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x37,
    0x69,0x5d,0x2c,0x20,0x76,0x65,0x63,0x34,0x66,0x28,0x64,0x5f,0x31,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x28,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x2a,0x20,0x28,0x73,0x74,0x72,0x6f,0x6b,0x65,0x41,0x6c,0x70,
    0x68,0x61,0x20,0x2a,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x20,0x20,0x7d,0x20,0x65,0x6c,0x73,0x65,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x76,0x61,0x72,0x20,0x78,0x5f,0x32,0x39,0x35,0x20,0x3a,0x20,0x62,
    0x6f,0x6f,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x61,0x72,0x20,0x78,0x5f,0x32,
    0x39,0x36,0x20,0x3a,0x20,0x62,0x6f,0x6f,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x28,0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x77,0x29,0x20,0x3d,0x3d,0x20,0x31,0x69,
    0x29,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,
    0x5f,0x32,0x31,0x38,0x20,0x3d,0x20,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x33,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x32,0x31,0x20,0x3d,0x20,0x78,0x5f,0x35,
    0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x32,0x34,
    0x20,0x3d,0x20,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x35,0x69,
    0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x70,0x74,0x5f,
    0x32,0x20,0x3d,0x20,0x28,0x28,0x28,0x6d,0x61,0x74,0x33,0x78,0x33,0x66,0x28,0x76,
    0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x32,0x31,0x38,0x2e,0x78,0x2c,0x20,0x78,0x5f,
    0x32,0x31,0x38,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x32,0x31,0x38,0x2e,0x7a,0x29,0x2c,
    0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x32,0x32,0x31,0x2e,0x78,0x2c,0x20,
    0x78,0x5f,0x32,0x32,0x31,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x32,0x32,0x31,0x2e,0x7a,
    0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x32,0x32,0x34,0x2e,0x78,
    0x2c,0x20,0x78,0x5f,0x32,0x32,0x34,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x32,0x32,0x34,
    0x2e,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x66,0x70,0x6f,
    0x73,0x2e,0x78,0x2c,0x20,0x66,0x70,0x6f,0x73,0x2e,0x79,0x2c,0x20,0x31,0x2e,0x30,
    0x66,0x29,0x29,0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x78,0x5f,0x35,0x35,0x2e,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x39,0x69,0x5d,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x35,0x39,0x20,0x3d,0x20,
    0x70,0x74,0x5f,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x32,0x36,0x30,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,
    0x61,0x6d,0x70,0x6c,0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x73,0x6d,0x70,0x2c,0x20,
    0x78,0x5f,0x32,0x35,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x78,0x5f,0x32,0x36,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x69,0x33,0x32,0x28,0x78,0x5f,
    0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x7a,0x29,
    0x20,0x3d,0x3d,0x20,0x31,0x69,0x29,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x37,0x31,0x20,0x3d,0x20,0x28,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x66,0x28,0x78,0x5f,0x32,0x37,0x31,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x32,0x37,0x31,
    0x2e,0x79,0x2c,0x20,0x78,0x5f,0x32,0x37,0x31,0x2e,0x7a,0x2c,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x69,0x33,0x32,0x28,
    0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,
    0x7a,0x29,0x20,0x3d,0x3d,0x20,0x32,0x69,0x29,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x66,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,
    0x65,0x74,0x20,0x78,0x5f,0x32,0x39,0x30,0x20,0x3d,0x20,0x28,0x69,0x33,0x32,0x28,
    0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,
    0x7a,0x29,0x20,0x3d,0x3d,0x20,0x33,0x69,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x78,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,0x78,0x5f,0x32,0x39,0x30,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x78,0x5f,0x32,0x39,0x30,0x29,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x78,0x5f,0x32,0x39,0x35,
    0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x20,0x3d,0x3d,
    0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x78,0x5f,0x32,0x39,0x36,0x20,0x3d,0x20,0x78,0x5f,0x32,0x39,0x35,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x78,0x5f,0x32,0x39,0x36,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x2a,0x20,0x78,0x5f,
    0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x69,0x5d,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x28,
    0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x2a,0x20,0x28,0x73,0x74,0x72,0x6f,0x6b,
    0x65,0x41,0x6c,0x70,0x68,0x61,0x20,0x2a,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,
    0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x7d,0x20,0x65,0x6c,0x73,0x65,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x28,0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x77,0x29,0x20,0x3d,0x3d,0x20,0x32,0x69,
    0x29,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x66,0x28,0x31,0x2e,0x30,0x66,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x20,0x65,0x6c,0x73,0x65,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x69,
    0x33,0x32,0x28,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,
    0x69,0x5d,0x2e,0x77,0x29,0x20,0x3d,0x3d,0x20,0x33,0x69,0x29,0x29,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,
    0x33,0x33,0x30,0x20,0x3d,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x33,
    0x33,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x73,0x6d,0x70,0x2c,0x20,0x78,0x5f,0x33,
    0x33,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x20,0x3d,0x20,0x78,0x5f,0x33,0x33,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x69,
    0x33,0x32,0x28,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,
    0x69,0x5d,0x2e,0x7a,0x29,0x20,0x3d,0x3d,0x20,0x31,0x69,0x29,0x29,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x33,0x34,0x32,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x32,
    0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x2e,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x66,0x28,0x78,
    0x5f,0x33,0x34,0x32,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x33,0x34,0x32,0x2e,0x79,0x2c,
    0x20,0x78,0x5f,0x33,0x34,0x32,0x2e,0x7a,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x32,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x28,0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x30,0x69,0x5d,0x2e,0x7a,0x29,0x20,0x3d,0x3d,0x20,0x32,0x69,0x29,0x29,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x32,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x66,0x28,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x32,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x28,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x32,0x20,0x2a,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x29,0x20,0x2a,0x20,
    0x78,0x5f,0x35,0x35,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x69,0x5d,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x7d,0x0a,0x20,0x20,0x6f,
    0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,
    0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,
    0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x20,0x7b,
    0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,0x0a,
    0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3a,0x20,0x76,
    0x65,0x63,0x34,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x40,0x66,0x72,0x61,0x67,0x6d,0x65,
    0x6e,0x74,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x28,0x40,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x28,0x31,0x29,0x20,0x66,0x70,0x6f,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x2c,0x20,0x40,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x29,0x20,
    0x2d,0x3e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,
    0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x66,0x70,0x6f,0x73,0x5f,0x70,0x61,0x72,0x61,
    0x6d,0x3b,0x0a,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,
    0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x28,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x29,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
static inline const sg_shader_desc* nanovg_sg_shader_desc(sg_backend backend) {
    #if defined(SOKOL_GLCORE)
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_vs_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)nanovg_fs_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "vertex";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "tcoord";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "viewSize";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 11;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "frag";
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.texture_sampler_pairs[0].glsl_name = "tex_smp";
            desc.label = "nanovg_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLCORE */
    #if defined(SOKOL_GLES3)
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_vs_source_glsl300es;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)nanovg_fs_source_glsl300es;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "vertex";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "tcoord";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "viewSize";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 11;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "frag";
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.texture_sampler_pairs[0].glsl_name = "tex_smp";
            desc.label = "nanovg_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLES3 */
    #if defined(SOKOL_D3D11)
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_vs_source_hlsl4;
            desc.vertex_func.d3d11_target = "vs_4_0";
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)nanovg_fs_source_hlsl4;
            desc.fragment_func.d3d11_target = "ps_4_0";
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].hlsl_sem_name = "TEXCOORD";
            desc.attrs[0].hlsl_sem_index = 0;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].hlsl_sem_name = "TEXCOORD";
            desc.attrs[1].hlsl_sem_index = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].hlsl_register_b_n = 1;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.hlsl_register_t_n = 0;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].hlsl_register_s_n = 3;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_D3D11 */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_vs_source_metal_macos;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)nanovg_fs_source_metal_macos;
            desc.fragment_func.entry = "main0";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].msl_buffer_n = 1;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.msl_texture_n = 0;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].msl_sampler_n = 3;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_IOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_vs_source_metal_ios;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)nanovg_fs_source_metal_ios;
            desc.fragment_func.entry = "main0";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].msl_buffer_n = 1;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.msl_texture_n = 0;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].msl_sampler_n = 3;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_SIMULATOR) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_vs_source_metal_sim;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)nanovg_fs_source_metal_sim;
            desc.fragment_func.entry = "main0";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].msl_buffer_n = 1;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.msl_texture_n = 0;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].msl_sampler_n = 3;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_WGPU)
    if (backend == SG_BACKEND_WGPU) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_vs_source_wgsl;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)nanovg_fs_source_wgsl;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].wgsl_group0_binding_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].wgsl_group0_binding_n = 9;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.wgsl_group1_binding_n = 64;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].wgsl_group1_binding_n = 65;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_WGPU */
    return 0;
}
// -- END --

// -- START --
// #include "shd.aa.glsl.h"
#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc --input shd.aa.glsl --output shd.aa.glsl.h --defines=EDGE_AA --slang glsl410:glsl300es:hlsl4:metal_macos:metal_ios:metal_sim:wgsl --ifdef

    Overview:
    =========
    Shader program: 'sg':
        Get shader desc: nanovg_aa_sg_shader_desc(sg_query_backend());
        Vertex Shader: vs_aa
        Fragment Shader: fs_aa
        Attributes:
            ATTR_nanovg_aa_sg_vertex => 0
            ATTR_nanovg_aa_sg_tcoord => 1
    Bindings:
        Uniform block 'viewSize':
            C struct: nanovg_aa_viewSize_t
            Bind slot: UB_nanovg_aa_viewSize => 0
        Uniform block 'frag':
            C struct: nanovg_aa_frag_t
            Bind slot: UB_nanovg_aa_frag => 1
        Texture 'tex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: VIEW_nanovg_aa_tex => 2
        Sampler 'smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_nanovg_aa_smp => 3
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before shd.aa.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_nanovg_aa_sg_vertex (0)
#define ATTR_nanovg_aa_sg_tcoord (1)
#define UB_nanovg_aa_viewSize (0)
#define UB_nanovg_aa_frag (1)
#define VIEW_nanovg_aa_tex (2)
#define SMP_nanovg_aa_smp (3)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct nanovg_aa_viewSize_t {
    float _viewSize[4];
} nanovg_aa_viewSize_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct nanovg_aa_frag_t {
    float dummy[11][4];
} nanovg_aa_frag_t;
#pragma pack(pop)
/*
    #version 410

    uniform vec4 viewSize[1];
    layout(location = 0) out vec2 ftcoord;
    layout(location = 1) in vec2 tcoord;
    layout(location = 1) out vec2 fpos;
    layout(location = 0) in vec2 vertex;

    void main()
    {
        ftcoord = tcoord;
        fpos = vertex;
        gl_Position = vec4(((2.0 * vertex.x) / viewSize[0].x) - 1.0, 1.0 - ((2.0 * vertex.y) / viewSize[0].y), 0.0, 1.0);
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t nanovg_aa_vs_aa_source_glsl410[367] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,0x65,0x77,0x53,
    0x69,0x7a,0x65,0x5b,0x31,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x63,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,
    0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x32,0x2e,
    0x30,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x2e,0x78,0x29,0x20,0x2f,0x20,
    0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2d,
    0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,0x28,0x28,0x32,0x2e,
    0x30,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x2e,0x79,0x29,0x20,0x2f,0x20,
    0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 410

    uniform vec4 frag[11];
    uniform sampler2D tex_smp;

    layout(location = 0) in vec2 ftcoord;
    layout(location = 1) in vec2 fpos;
    layout(location = 0) out vec4 outColor;

    float strokeMask()
    {
        return min(1.0, (1.0 - abs((ftcoord.x * 2.0) - 1.0)) * frag[10].x) * min(1.0, ftcoord.y);
    }

    float scissorMask(vec2 p)
    {
        vec2 _108 = vec2(0.5) - ((abs((mat3(vec3(frag[0].xyz), vec3(frag[1].xyz), vec3(frag[2].xyz)) * vec3(p, 1.0)).xy) - frag[8].xy) * frag[8].zw);
        return clamp(_108.x, 0.0, 1.0) * clamp(_108.y, 0.0, 1.0);
    }

    float sdroundrect(vec2 pt, vec2 ext, float rad)
    {
        vec2 _32 = abs(pt) - (ext - vec2(rad));
        return (min(max(_32.x, _32.y), 0.0) + length(max(_32, vec2(0.0)))) - rad;
    }

    void main()
    {
        float _141 = strokeMask();
        if (_141 < frag[10].y)
        {
            discard;
        }
        vec2 param = fpos;
        float _154 = scissorMask(param);
        if (_154 == 0.0)
        {
            discard;
        }
        int _163 = int(frag[10].w);
        vec4 result;
        if (_163 == 0)
        {
            vec2 param_1 = (mat3(vec3(frag[3].xyz), vec3(frag[4].xyz), vec3(frag[5].xyz)) * vec3(fpos, 1.0)).xy;
            vec2 param_2 = frag[9].xy;
            float param_3 = frag[9].z;
            result = mix(frag[6], frag[7], vec4(clamp((sdroundrect(param_1, param_2, param_3) + (frag[9].w * 0.5)) / frag[9].w, 0.0, 1.0))) * (_141 * _154);
        }
        else
        {
            if (_163 == 1)
            {
                vec4 color = texture(tex_smp, (mat3(vec3(frag[3].xyz), vec3(frag[4].xyz), vec3(frag[5].xyz)) * vec3(fpos, 1.0)).xy / frag[9].xy);
                int _293 = int(frag[10].z);
                if (_293 == 1)
                {
                    color = vec4(color.xyz * color.w, color.w);
                }
                if (_293 == 2)
                {
                    color = vec4(color.x);
                }
                bool _320 = _293 == 3;
                bool _326;
                if (_320)
                {
                    _326 = color.w == 1.0;
                }
                else
                {
                    _326 = _320;
                }
                if (_326)
                {
                    discard;
                }
                vec4 _332 = color;
                vec4 _338 = (_332 * frag[6]) * (_141 * _154);
                color = _338;
                result = _338;
            }
            else
            {
                if (_163 == 2)
                {
                    result = vec4(1.0);
                }
                else
                {
                    if (_163 == 3)
                    {
                        vec4 color_1 = texture(tex_smp, ftcoord);
                        int _363 = int(frag[10].z);
                        if (_363 == 1)
                        {
                            color_1 = vec4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_363 == 2)
                        {
                            color_1 = vec4(color_1.x);
                        }
                        result = (color_1 * _154) * frag[6];
                    }
                }
            }
        }
        outColor = result;
    }

*/
#if defined(SOKOL_GLCORE)
static const uint8_t nanovg_aa_fs_aa_source_glsl410[2942] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x34,0x31,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5b,
    0x31,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x74,
    0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,
    0x61,0x73,0x6b,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6d,0x69,0x6e,0x28,0x31,0x2e,0x30,0x2c,0x20,0x28,0x31,0x2e,0x30,
    0x20,0x2d,0x20,0x61,0x62,0x73,0x28,0x28,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x2e,
    0x78,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x29,0x29,
    0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2a,
    0x20,0x6d,0x69,0x6e,0x28,0x31,0x2e,0x30,0x2c,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,
    0x64,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,
    0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x76,0x65,0x63,0x32,0x20,
    0x70,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,
    0x30,0x38,0x20,0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x20,0x2d,
    0x20,0x28,0x28,0x61,0x62,0x73,0x28,0x28,0x6d,0x61,0x74,0x33,0x28,0x76,0x65,0x63,
    0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x32,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x70,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x66,0x72,0x61,0x67,
    0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,0x38,
    0x5d,0x2e,0x7a,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x38,0x2e,0x78,0x2c,0x20,
    0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,
    0x70,0x28,0x5f,0x31,0x30,0x38,0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x64,
    0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x76,0x65,0x63,0x32,0x20,0x70,
    0x74,0x2c,0x20,0x76,0x65,0x63,0x32,0x20,0x65,0x78,0x74,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x32,0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x61,0x62,0x73,0x28,0x70,0x74,0x29,
    0x20,0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x72,
    0x61,0x64,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x28,0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x2e,0x78,0x2c,
    0x20,0x5f,0x33,0x32,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x20,0x2b,0x20,
    0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x2c,0x20,
    0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,
    0x61,0x64,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,
    0x31,0x34,0x31,0x20,0x3d,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,
    0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x34,0x31,
    0x20,0x3c,0x20,0x66,0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x79,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,
    0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x70,0x6f,
    0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x35,
    0x34,0x20,0x3d,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x31,0x35,0x34,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,
    0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x5f,0x31,0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x72,0x61,
    0x67,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x33,
    0x28,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x33,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x34,0x5d,
    0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,
    0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,
    0x28,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,
    0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,
    0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x66,0x72,0x61,0x67,
    0x5b,0x36,0x5d,0x2c,0x20,0x66,0x72,0x61,0x67,0x5b,0x37,0x5d,0x2c,0x20,0x76,0x65,
    0x63,0x34,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x73,0x64,0x72,0x6f,0x75,0x6e,
    0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,
    0x20,0x2b,0x20,0x28,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,
    0x30,0x2e,0x35,0x29,0x29,0x20,0x2f,0x20,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,
    0x77,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,
    0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,
    0x28,0x6d,0x61,0x74,0x33,0x28,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,
    0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,
    0x61,0x67,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x28,0x66,0x72,0x61,0x67,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x78,
    0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x6e,0x74,0x20,0x5f,0x32,0x39,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,
    0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,
    0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x33,
    0x32,0x30,0x20,0x3d,0x20,0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x33,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,
    0x20,0x5f,0x33,0x32,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x30,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x36,0x20,
    0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,
    0x33,0x32,0x36,0x20,0x3d,0x20,0x5f,0x33,0x32,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x36,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,
    0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x33,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x33,0x38,0x20,0x3d,0x20,0x28,0x5f,0x33,0x33,
    0x32,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,0x36,0x5d,0x29,0x20,0x2a,0x20,0x28,
    0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x33,0x33,
    0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,0x73,0x6d,
    0x70,0x2c,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,
    0x66,0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x31,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,
    0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,
    0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,
    0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,0x36,
    0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 300 es

    uniform vec4 viewSize[1];
    out vec2 ftcoord;
    layout(location = 1) in vec2 tcoord;
    out vec2 fpos;
    layout(location = 0) in vec2 vertex;

    void main()
    {
        ftcoord = tcoord;
        fpos = vertex;
        gl_Position = vec4(((2.0 * vertex.x) / viewSize[0].x) - 1.0, 1.0 - ((2.0 * vertex.y) / viewSize[0].y), 0.0, 1.0);
    }

*/
#if defined(SOKOL_GLES3)
static const uint8_t nanovg_aa_vs_aa_source_glsl300es[328] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x69,
    0x65,0x77,0x53,0x69,0x7a,0x65,0x5b,0x31,0x5d,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,
    0x65,0x63,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x6c,0x61,0x79,
    0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,
    0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x65,
    0x72,0x74,0x65,0x78,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x20,0x3d,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x70,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x2e,0x78,0x29,0x20,0x2f,0x20,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,
    0x65,0x5b,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x20,0x2d,0x20,0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x2e,0x79,0x29,0x20,0x2f,0x20,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,
    0x65,0x5b,0x30,0x5d,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    uniform highp vec4 frag[11];
    uniform highp sampler2D tex_smp;

    in highp vec2 ftcoord;
    in highp vec2 fpos;
    layout(location = 0) out highp vec4 outColor;

    highp float strokeMask()
    {
        return min(1.0, (1.0 - abs((ftcoord.x * 2.0) - 1.0)) * frag[10].x) * min(1.0, ftcoord.y);
    }

    highp float scissorMask(highp vec2 p)
    {
        highp vec2 _108 = vec2(0.5) - ((abs((mat3(vec3(frag[0].xyz), vec3(frag[1].xyz), vec3(frag[2].xyz)) * vec3(p, 1.0)).xy) - frag[8].xy) * frag[8].zw);
        return clamp(_108.x, 0.0, 1.0) * clamp(_108.y, 0.0, 1.0);
    }

    highp float sdroundrect(highp vec2 pt, highp vec2 ext, highp float rad)
    {
        highp vec2 _32 = abs(pt) - (ext - vec2(rad));
        return (min(max(_32.x, _32.y), 0.0) + length(max(_32, vec2(0.0)))) - rad;
    }

    void main()
    {
        highp float _141 = strokeMask();
        if (_141 < frag[10].y)
        {
            discard;
        }
        highp vec2 param = fpos;
        highp float _154 = scissorMask(param);
        if (_154 == 0.0)
        {
            discard;
        }
        int _163 = int(frag[10].w);
        highp vec4 result;
        if (_163 == 0)
        {
            highp vec2 param_1 = (mat3(vec3(frag[3].xyz), vec3(frag[4].xyz), vec3(frag[5].xyz)) * vec3(fpos, 1.0)).xy;
            highp vec2 param_2 = frag[9].xy;
            highp float param_3 = frag[9].z;
            result = mix(frag[6], frag[7], vec4(clamp((sdroundrect(param_1, param_2, param_3) + (frag[9].w * 0.5)) / frag[9].w, 0.0, 1.0))) * (_141 * _154);
        }
        else
        {
            if (_163 == 1)
            {
                highp vec4 color = texture(tex_smp, (mat3(vec3(frag[3].xyz), vec3(frag[4].xyz), vec3(frag[5].xyz)) * vec3(fpos, 1.0)).xy / frag[9].xy);
                int _293 = int(frag[10].z);
                if (_293 == 1)
                {
                    color = vec4(color.xyz * color.w, color.w);
                }
                if (_293 == 2)
                {
                    color = vec4(color.x);
                }
                bool _320 = _293 == 3;
                bool _326;
                if (_320)
                {
                    _326 = color.w == 1.0;
                }
                else
                {
                    _326 = _320;
                }
                if (_326)
                {
                    discard;
                }
                highp vec4 _332 = color;
                highp vec4 _338 = (_332 * frag[6]) * (_141 * _154);
                color = _338;
                result = _338;
            }
            else
            {
                if (_163 == 2)
                {
                    result = vec4(1.0);
                }
                else
                {
                    if (_163 == 3)
                    {
                        highp vec4 color_1 = texture(tex_smp, ftcoord);
                        int _363 = int(frag[10].z);
                        if (_363 == 1)
                        {
                            color_1 = vec4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_363 == 2)
                        {
                            color_1 = vec4(color_1.x);
                        }
                        result = (color_1 * _154) * frag[6];
                    }
                }
            }
        }
        outColor = result;
    }

*/
#if defined(SOKOL_GLES3)
static const uint8_t nanovg_aa_fs_aa_source_glsl300es[3099] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x66,0x72,0x61,0x67,0x5b,0x31,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x69,0x6e,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x74,0x63,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x6f,0x75,0x74,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,0x28,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x69,
    0x6e,0x28,0x31,0x2e,0x30,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x62,
    0x73,0x28,0x28,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x20,0x2a,0x20,0x32,
    0x2e,0x30,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x66,0x72,
    0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x6d,0x69,0x6e,0x28,
    0x31,0x2e,0x30,0x2c,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x79,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x31,0x30,0x38,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x20,0x2d,0x20,0x28,0x28,
    0x61,0x62,0x73,0x28,0x28,0x6d,0x61,0x74,0x33,0x28,0x76,0x65,0x63,0x33,0x28,0x66,
    0x72,0x61,0x67,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x70,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x66,0x72,0x61,0x67,0x5b,0x38,0x5d,
    0x2e,0x78,0x79,0x29,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,0x38,0x5d,0x2e,0x7a,
    0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x63,
    0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x38,0x2e,0x78,0x2c,0x20,0x30,0x2e,0x30,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,
    0x31,0x30,0x38,0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x74,0x2c,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x65,0x78,0x74,0x2c,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x33,
    0x32,0x20,0x3d,0x20,0x61,0x62,0x73,0x28,0x70,0x74,0x29,0x20,0x2d,0x20,0x28,0x65,
    0x78,0x74,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x72,0x61,0x64,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x6d,0x69,0x6e,
    0x28,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x2e,0x78,0x2c,0x20,0x5f,0x33,0x32,0x2e,
    0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,0x20,0x2b,0x20,0x6c,0x65,0x6e,0x67,0x74,
    0x68,0x28,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x2c,0x20,0x76,0x65,0x63,0x32,0x28,
    0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,
    0x6b,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x34,
    0x31,0x20,0x3c,0x20,0x66,0x72,0x61,0x67,0x5b,0x31,0x30,0x5d,0x2e,0x79,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,
    0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x20,0x3d,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x35,0x34,0x20,0x3d,
    0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x70,0x61,0x72,
    0x61,0x6d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x35,
    0x34,0x20,0x3d,0x3d,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x31,0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x72,0x61,0x67,0x5b,0x31,
    0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x30,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,0x33,0x28,0x76,0x65,0x63,0x33,0x28,0x66,
    0x72,0x61,0x67,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,
    0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x70,0x6f,0x73,0x2c,0x20,
    0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x78,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,
    0x20,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,
    0x28,0x66,0x72,0x61,0x67,0x5b,0x36,0x5d,0x2c,0x20,0x66,0x72,0x61,0x67,0x5b,0x37,
    0x5d,0x2c,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x73,
    0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,
    0x61,0x6d,0x5f,0x33,0x29,0x20,0x2b,0x20,0x28,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,
    0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x29,0x20,0x2f,0x20,0x66,0x72,0x61,
    0x67,0x5b,0x39,0x5d,0x2e,0x77,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x29,0x29,0x20,0x2a,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,
    0x35,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,
    0x65,0x28,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x28,0x6d,0x61,0x74,0x33,
    0x28,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x33,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,0x5b,0x34,0x5d,
    0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x72,0x61,0x67,
    0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,
    0x28,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x20,
    0x2f,0x20,0x66,0x72,0x61,0x67,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x32,0x39,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x72,0x61,0x67,0x5b,0x31,
    0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x31,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,
    0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,0x20,0x3d,
    0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x33,0x32,0x30,0x20,0x3d,0x20,
    0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x33,0x32,0x36,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x33,0x32,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x36,0x20,0x3d,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x36,0x20,0x3d,
    0x20,0x5f,0x33,0x32,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x36,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x33,0x32,0x20,0x3d,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x5f,0x33,0x33,0x38,
    0x20,0x3d,0x20,0x28,0x5f,0x33,0x33,0x32,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,
    0x36,0x5d,0x29,0x20,0x2a,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,
    0x35,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,
    0x74,0x20,0x3d,0x20,0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,
    0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,
    0x20,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x74,0x65,0x78,0x5f,0x73,0x6d,0x70,0x2c,0x20,
    0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,
    0x74,0x20,0x5f,0x33,0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x66,0x72,0x61,
    0x67,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x31,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,
    0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x36,
    0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,
    0x74,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x2a,0x20,0x5f,
    0x31,0x35,0x34,0x29,0x20,0x2a,0x20,0x66,0x72,0x61,0x67,0x5b,0x36,0x5d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,
    0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    cbuffer viewSize : register(b0)
    {
        float4 _28_viewSize : packoffset(c0);
    };


    static float4 gl_Position;
    static float2 ftcoord;
    static float2 tcoord;
    static float2 fpos;
    static float2 vertex;

    struct SPIRV_Cross_Input
    {
        float2 vertex : TEXCOORD0;
        float2 tcoord : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float2 ftcoord : TEXCOORD0;
        float2 fpos : TEXCOORD1;
        float4 gl_Position : SV_Position;
    };

    void vert_main()
    {
        ftcoord = tcoord;
        fpos = vertex;
        gl_Position = float4(((2.0f * vertex.x) / _28_viewSize.x) - 1.0f, 1.0f - ((2.0f * vertex.y) / _28_viewSize.y), 0.0f, 1.0f);
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        tcoord = stage_input.tcoord;
        vertex = stage_input.vertex;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.ftcoord = ftcoord;
        stage_output.fpos = fpos;
        return stage_output;
    }
*/
#if defined(SOKOL_D3D11)
static const uint8_t nanovg_aa_vs_aa_source_hlsl4[926] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,
    0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x32,0x38,
    0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,
    0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x3a,0x20,0x54,
    0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,
    0x72,0x64,0x20,0x3d,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x66,0x20,
    0x2a,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x2e,0x78,0x29,0x20,0x2f,0x20,0x5f,0x32,
    0x38,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,0x78,0x29,0x20,0x2d,0x20,
    0x31,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x20,0x2d,0x20,0x28,0x28,0x32,
    0x2e,0x30,0x66,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x2e,0x79,0x29,0x20,
    0x2f,0x20,0x5f,0x32,0x38,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,
    0x29,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,
    0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x66,0x74,0x63,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x66,0x70,0x6f,0x73,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
/*
    cbuffer frag : register(b1)
    {
        float4 _58_dummy[11] : packoffset(c0);
    };

    Texture2D<float4> tex : register(t0);
    SamplerState smp : register(s3);

    static float2 ftcoord;
    static float2 fpos;
    static float4 outColor;

    struct SPIRV_Cross_Input
    {
        float2 ftcoord : TEXCOORD0;
        float2 fpos : TEXCOORD1;
    };

    struct SPIRV_Cross_Output
    {
        float4 outColor : SV_Target0;
    };

    float strokeMask()
    {
        return min(1.0f, (1.0f - abs((ftcoord.x * 2.0f) - 1.0f)) * _58_dummy[10].x) * min(1.0f, ftcoord.y);
    }

    float scissorMask(float2 p)
    {
        float2 _108 = 0.5f.xx - ((abs(mul(float3(p, 1.0f), float3x3(float3(_58_dummy[0].xyz), float3(_58_dummy[1].xyz), float3(_58_dummy[2].xyz))).xy) - _58_dummy[8].xy) * _58_dummy[8].zw);
        return clamp(_108.x, 0.0f, 1.0f) * clamp(_108.y, 0.0f, 1.0f);
    }

    float sdroundrect(float2 pt, float2 ext, float rad)
    {
        float2 _32 = abs(pt) - (ext - rad.xx);
        return (min(max(_32.x, _32.y), 0.0f) + length(max(_32, 0.0f.xx))) - rad;
    }

    void frag_main()
    {
        float _141 = strokeMask();
        if (_141 < _58_dummy[10].y)
        {
            discard;
        }
        float2 param = fpos;
        float _154 = scissorMask(param);
        if (_154 == 0.0f)
        {
            discard;
        }
        int _163 = int(_58_dummy[10].w);
        float4 result;
        if (_163 == 0)
        {
            float2 param_1 = mul(float3(fpos, 1.0f), float3x3(float3(_58_dummy[3].xyz), float3(_58_dummy[4].xyz), float3(_58_dummy[5].xyz))).xy;
            float2 param_2 = _58_dummy[9].xy;
            float param_3 = _58_dummy[9].z;
            result = lerp(_58_dummy[6], _58_dummy[7], clamp((sdroundrect(param_1, param_2, param_3) + (_58_dummy[9].w * 0.5f)) / _58_dummy[9].w, 0.0f, 1.0f).xxxx) * (_141 * _154);
        }
        else
        {
            if (_163 == 1)
            {
                float4 color = tex.Sample(smp, mul(float3(fpos, 1.0f), float3x3(float3(_58_dummy[3].xyz), float3(_58_dummy[4].xyz), float3(_58_dummy[5].xyz))).xy / _58_dummy[9].xy);
                int _293 = int(_58_dummy[10].z);
                if (_293 == 1)
                {
                    color = float4(color.xyz * color.w, color.w);
                }
                if (_293 == 2)
                {
                    color = color.x.xxxx;
                }
                bool _320 = _293 == 3;
                bool _326;
                if (_320)
                {
                    _326 = color.w == 1.0f;
                }
                else
                {
                    _326 = _320;
                }
                if (_326)
                {
                    discard;
                }
                float4 _332 = color;
                float4 _338 = (_332 * _58_dummy[6]) * (_141 * _154);
                color = _338;
                result = _338;
            }
            else
            {
                if (_163 == 2)
                {
                    result = 1.0f.xxxx;
                }
                else
                {
                    if (_163 == 3)
                    {
                        float4 color_1 = tex.Sample(smp, ftcoord);
                        int _363 = int(_58_dummy[10].z);
                        if (_363 == 1)
                        {
                            color_1 = float4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_363 == 2)
                        {
                            color_1 = color_1.x.xxxx;
                        }
                        result = (color_1 * _154) * _58_dummy[6];
                    }
                }
            }
        }
        outColor = result;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        ftcoord = stage_input.ftcoord;
        fpos = stage_input.fpos;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.outColor = outColor;
        return stage_output;
    }
*/
#if defined(SOKOL_D3D11)
static const uint8_t nanovg_aa_fs_aa_source_hlsl4[3587] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x66,0x72,0x61,0x67,0x20,0x3a,0x20,0x72,
    0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x31,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x31,0x5d,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x54,0x65,0x78,
    0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x74,
    0x65,0x78,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,
    0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,
    0x73,0x6d,0x70,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,
    0x33,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,
    0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,
    0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x70,0x6f,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,
    0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x74,0x72,
    0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x69,0x6e,0x28,0x31,0x2e,0x30,0x66,0x2c,
    0x20,0x28,0x31,0x2e,0x30,0x66,0x20,0x2d,0x20,0x61,0x62,0x73,0x28,0x28,0x66,0x74,
    0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x20,0x2a,0x20,0x32,0x2e,0x30,0x66,0x29,0x20,
    0x2d,0x20,0x31,0x2e,0x30,0x66,0x29,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x5f,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x6d,0x69,
    0x6e,0x28,0x31,0x2e,0x30,0x66,0x2c,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x2e,
    0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,0x69,
    0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x70,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,
    0x5f,0x31,0x30,0x38,0x20,0x3d,0x20,0x30,0x2e,0x35,0x66,0x2e,0x78,0x78,0x20,0x2d,
    0x20,0x28,0x28,0x61,0x62,0x73,0x28,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x70,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x5f,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x32,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x5f,0x35,0x38,0x5f,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,
    0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x7a,0x77,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,
    0x5f,0x31,0x30,0x38,0x2e,0x78,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,
    0x30,0x66,0x29,0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x38,
    0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,
    0x64,0x72,0x65,0x63,0x74,0x28,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x74,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x65,0x78,0x74,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x61,0x62,0x73,0x28,0x70,
    0x74,0x29,0x20,0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,0x20,0x72,0x61,0x64,0x2e,
    0x78,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x28,0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x2e,0x78,0x2c,0x20,
    0x5f,0x33,0x32,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x20,0x2b,0x20,
    0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x2c,0x20,
    0x30,0x2e,0x30,0x66,0x2e,0x78,0x78,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x31,0x34,0x31,0x20,0x3d,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,
    0x61,0x73,0x6b,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x31,0x34,0x31,0x20,0x3c,0x20,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x30,0x5d,0x2e,0x79,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x35,0x34,0x20,0x3d,0x20,0x73,0x63,
    0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x35,0x34,0x20,0x3d,
    0x3d,0x20,0x30,0x2e,0x30,0x66,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x31,0x36,
    0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x30,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x6d,
    0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x66,0x70,0x6f,0x73,0x2c,0x20,
    0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,
    0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x5f,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x29,0x2e,0x78,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x35,0x38,0x5f,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x33,0x20,0x3d,0x20,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,
    0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x20,0x3d,0x20,0x6c,0x65,0x72,0x70,0x28,0x5f,0x35,0x38,0x5f,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x2c,0x20,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x37,0x5d,0x2c,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x73,0x64,
    0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x33,0x29,0x20,0x2b,0x20,0x28,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x66,0x29,0x29,0x20,
    0x2f,0x20,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x77,
    0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2e,0x78,0x78,
    0x78,0x78,0x29,0x20,0x2a,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,
    0x35,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,
    0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x28,0x73,0x6d,0x70,0x2c,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,
    0x28,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,
    0x38,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x28,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,
    0x79,0x7a,0x29,0x29,0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x35,0x38,0x5f,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x39,
    0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,0x20,0x3d,
    0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,
    0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x2e,0x78,0x78,0x78,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x33,0x32,
    0x30,0x20,0x3d,0x20,0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x33,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x33,0x32,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x36,0x20,0x3d,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x66,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,
    0x33,0x32,0x36,0x20,0x3d,0x20,0x5f,0x33,0x32,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x36,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,
    0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x33,0x32,0x20,0x3d,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x5f,0x33,0x33,0x38,0x20,0x3d,0x20,
    0x28,0x5f,0x33,0x33,0x32,0x20,0x2a,0x20,0x5f,0x35,0x38,0x5f,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x36,0x5d,0x29,0x20,0x2a,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,
    0x5f,0x31,0x35,0x34,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x5f,0x33,0x33,0x38,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x20,0x3d,0x20,0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,
    0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,
    0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x31,
    0x2e,0x30,0x66,0x2e,0x78,0x78,0x78,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,
    0x3d,0x3d,0x20,0x33,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,
    0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,0x20,0x66,0x74,0x63,
    0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,
    0x33,0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x38,0x5f,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x5f,0x31,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x2e,0x78,0x78,
    0x78,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,
    0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,
    0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x5f,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x70,0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x2e,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6f,0x75,0x74,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,
    0x7d,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct viewSize
    {
        float4 _viewSize;
    };

    struct main0_out
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float2 vertex0 [[attribute(0)]];
        float2 tcoord [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant viewSize& _28 [[buffer(0)]])
    {
        main0_out out = {};
        out.ftcoord = in.tcoord;
        out.fpos = in.vertex0;
        out.gl_Position = float4(((2.0 * in.vertex0.x) / _28._viewSize.x) - 1.0, 1.0 - ((2.0 * in.vertex0.y) / _28._viewSize.y), 0.0, 1.0);
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_aa_vs_aa_source_metal_macos[665] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x69,
    0x65,0x77,0x53,0x69,0x7a,0x65,0x26,0x20,0x5f,0x32,0x38,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x74,0x63,
    0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x20,
    0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x2e,0x78,0x29,0x20,
    0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,
    0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,
    0x78,0x30,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,
    0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct frag
    {
        float4 dummy[11];
    };

    struct main0_out
    {
        float4 outColor [[color(0)]];
    };

    struct main0_in
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
    };

    static inline __attribute__((always_inline))
    float strokeMask(constant frag& _58, thread float2& ftcoord)
    {
        return fast::min(1.0, (1.0 - abs((ftcoord.x * 2.0) - 1.0)) * _58.dummy[10].x) * fast::min(1.0, ftcoord.y);
    }

    static inline __attribute__((always_inline))
    float scissorMask(thread const float2& p, constant frag& _58)
    {
        float2 _108 = float2(0.5) - ((abs((float3x3(float3(_58.dummy[0].xyz), float3(_58.dummy[1].xyz), float3(_58.dummy[2].xyz)) * float3(p, 1.0)).xy) - _58.dummy[8].xy) * _58.dummy[8].zw);
        return fast::clamp(_108.x, 0.0, 1.0) * fast::clamp(_108.y, 0.0, 1.0);
    }

    static inline __attribute__((always_inline))
    float sdroundrect(thread const float2& pt, thread const float2& ext, thread const float& rad)
    {
        float2 _32 = abs(pt) - (ext - float2(rad));
        return (fast::min(fast::max(_32.x, _32.y), 0.0) + length(fast::max(_32, float2(0.0)))) - rad;
    }

    fragment main0_out main0(main0_in in [[stage_in]], constant frag& _58 [[buffer(1)]], texture2d<float> tex [[texture(0)]], sampler smp [[sampler(3)]])
    {
        main0_out out = {};
        float _141 = strokeMask(_58, in.ftcoord);
        if (_141 < _58.dummy[10].y)
        {
            discard_fragment();
        }
        float2 param = in.fpos;
        float _154 = scissorMask(param, _58);
        if (_154 == 0.0)
        {
            discard_fragment();
        }
        int _163 = int(_58.dummy[10].w);
        float4 result;
        if (_163 == 0)
        {
            float2 param_1 = (float3x3(float3(_58.dummy[3].xyz), float3(_58.dummy[4].xyz), float3(_58.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy;
            float2 param_2 = _58.dummy[9].xy;
            float param_3 = _58.dummy[9].z;
            result = mix(_58.dummy[6], _58.dummy[7], float4(fast::clamp((sdroundrect(param_1, param_2, param_3) + (_58.dummy[9].w * 0.5)) / _58.dummy[9].w, 0.0, 1.0))) * (_141 * _154);
        }
        else
        {
            if (_163 == 1)
            {
                float4 color = tex.sample(smp, ((float3x3(float3(_58.dummy[3].xyz), float3(_58.dummy[4].xyz), float3(_58.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy / _58.dummy[9].xy));
                int _293 = int(_58.dummy[10].z);
                if (_293 == 1)
                {
                    color = float4(color.xyz * color.w, color.w);
                }
                if (_293 == 2)
                {
                    color = float4(color.x);
                }
                bool _320 = _293 == 3;
                bool _326;
                if (_320)
                {
                    _326 = color.w == 1.0;
                }
                else
                {
                    _326 = _320;
                }
                if (_326)
                {
                    discard_fragment();
                }
                float4 _332 = color;
                float4 _338 = (_332 * _58.dummy[6]) * (_141 * _154);
                color = _338;
                result = _338;
            }
            else
            {
                if (_163 == 2)
                {
                    result = float4(1.0);
                }
                else
                {
                    if (_163 == 3)
                    {
                        float4 color_1 = tex.sample(smp, in.ftcoord);
                        int _363 = int(_58.dummy[10].z);
                        if (_363 == 1)
                        {
                            color_1 = float4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_363 == 2)
                        {
                            color_1 = float4(color_1.x);
                        }
                        result = (color_1 * _154) * _58.dummy[6];
                    }
                }
            }
        }
        out.outColor = result;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_aa_fs_aa_source_metal_macos[3833] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,0x72,0x61,0x67,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,
    0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,0x28,0x63,0x6f,0x6e,0x73,0x74,
    0x61,0x6e,0x74,0x20,0x66,0x72,0x61,0x67,0x26,0x20,0x5f,0x35,0x38,0x2c,0x20,0x74,
    0x68,0x72,0x65,0x61,0x64,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x66,0x74,
    0x63,0x6f,0x6f,0x72,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x69,0x6e,0x28,0x31,0x2e,
    0x30,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x62,0x73,0x28,0x28,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,
    0x2d,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x66,0x61,0x73,
    0x74,0x3a,0x3a,0x6d,0x69,0x6e,0x28,0x31,0x2e,0x30,0x2c,0x20,0x66,0x74,0x63,0x6f,
    0x6f,0x72,0x64,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,
    0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,
    0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,
    0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x74,0x68,0x72,0x65,0x61,0x64,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x70,
    0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,0x61,0x67,0x26,
    0x20,0x5f,0x35,0x38,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x5f,0x31,0x30,0x38,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x30,0x2e,0x35,0x29,0x20,0x2d,0x20,0x28,0x28,0x61,0x62,0x73,0x28,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x32,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x70,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x5f,0x35,
    0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,0x20,0x2a,
    0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x7a,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x61,
    0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x38,0x2e,0x78,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x66,0x61,
    0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x38,0x2e,0x79,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,
    0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x74,
    0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x26,0x20,0x70,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x65,0x78,0x74,
    0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x26,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x61,0x62,
    0x73,0x28,0x70,0x74,0x29,0x20,0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x28,0x72,0x61,0x64,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,
    0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,
    0x2e,0x78,0x2c,0x20,0x5f,0x33,0x32,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x20,0x2b,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,
    0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,
    0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,
    0x61,0x67,0x26,0x20,0x5f,0x35,0x38,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,
    0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,
    0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x74,0x65,0x78,0x20,0x5b,0x5b,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x20,0x73,0x6d,0x70,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x28,0x33,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x31,
    0x20,0x3d,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,0x28,0x5f,0x35,
    0x38,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x3c,0x20,0x5f,
    0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x79,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,
    0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x28,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x66,0x70,
    0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x35,0x34,0x20,0x3d,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x5f,0x35,0x38,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x35,0x34,0x20,0x3d,0x3d,0x20,0x30,0x2e,
    0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,
    0x74,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x5f,0x31,0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,
    0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,
    0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,
    0x3d,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x20,0x3d,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,
    0x3d,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,
    0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x2c,0x20,0x5f,0x35,
    0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x37,0x5d,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,
    0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x33,0x29,0x20,0x2b,0x20,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x29,
    0x20,0x2f,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,
    0x77,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,
    0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,
    0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,
    0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x39,0x33,0x20,0x3d,
    0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,
    0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x31,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,
    0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,
    0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x33,0x32,
    0x30,0x20,0x3d,0x20,0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x33,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x33,0x32,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x36,0x20,0x3d,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,
    0x32,0x36,0x20,0x3d,0x20,0x5f,0x33,0x32,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x36,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,
    0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x5f,0x33,0x33,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x5f,0x33,0x33,0x38,0x20,0x3d,0x20,0x28,0x5f,0x33,0x33,0x32,0x20,
    0x2a,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x29,0x20,
    0x2a,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,
    0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x74,0x63,0x6f,
    0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,
    0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x5f,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x31,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct viewSize
    {
        float4 _viewSize;
    };

    struct main0_out
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float2 vertex0 [[attribute(0)]];
        float2 tcoord [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant viewSize& _28 [[buffer(0)]])
    {
        main0_out out = {};
        out.ftcoord = in.tcoord;
        out.fpos = in.vertex0;
        out.gl_Position = float4(((2.0 * in.vertex0.x) / _28._viewSize.x) - 1.0, 1.0 - ((2.0 * in.vertex0.y) / _28._viewSize.y), 0.0, 1.0);
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_aa_vs_aa_source_metal_ios[665] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x69,
    0x65,0x77,0x53,0x69,0x7a,0x65,0x26,0x20,0x5f,0x32,0x38,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x74,0x63,
    0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x20,
    0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x2e,0x78,0x29,0x20,
    0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,
    0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,
    0x78,0x30,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,
    0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct frag
    {
        float4 dummy[11];
    };

    struct main0_out
    {
        float4 outColor [[color(0)]];
    };

    struct main0_in
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
    };

    static inline __attribute__((always_inline))
    float strokeMask(constant frag& _58, thread float2& ftcoord)
    {
        return fast::min(1.0, (1.0 - abs((ftcoord.x * 2.0) - 1.0)) * _58.dummy[10].x) * fast::min(1.0, ftcoord.y);
    }

    static inline __attribute__((always_inline))
    float scissorMask(thread const float2& p, constant frag& _58)
    {
        float2 _108 = float2(0.5) - ((abs((float3x3(float3(_58.dummy[0].xyz), float3(_58.dummy[1].xyz), float3(_58.dummy[2].xyz)) * float3(p, 1.0)).xy) - _58.dummy[8].xy) * _58.dummy[8].zw);
        return fast::clamp(_108.x, 0.0, 1.0) * fast::clamp(_108.y, 0.0, 1.0);
    }

    static inline __attribute__((always_inline))
    float sdroundrect(thread const float2& pt, thread const float2& ext, thread const float& rad)
    {
        float2 _32 = abs(pt) - (ext - float2(rad));
        return (fast::min(fast::max(_32.x, _32.y), 0.0) + length(fast::max(_32, float2(0.0)))) - rad;
    }

    fragment main0_out main0(main0_in in [[stage_in]], constant frag& _58 [[buffer(1)]], texture2d<float> tex [[texture(0)]], sampler smp [[sampler(3)]])
    {
        main0_out out = {};
        float _141 = strokeMask(_58, in.ftcoord);
        if (_141 < _58.dummy[10].y)
        {
            discard_fragment();
        }
        float2 param = in.fpos;
        float _154 = scissorMask(param, _58);
        if (_154 == 0.0)
        {
            discard_fragment();
        }
        int _163 = int(_58.dummy[10].w);
        float4 result;
        if (_163 == 0)
        {
            float2 param_1 = (float3x3(float3(_58.dummy[3].xyz), float3(_58.dummy[4].xyz), float3(_58.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy;
            float2 param_2 = _58.dummy[9].xy;
            float param_3 = _58.dummy[9].z;
            result = mix(_58.dummy[6], _58.dummy[7], float4(fast::clamp((sdroundrect(param_1, param_2, param_3) + (_58.dummy[9].w * 0.5)) / _58.dummy[9].w, 0.0, 1.0))) * (_141 * _154);
        }
        else
        {
            if (_163 == 1)
            {
                float4 color = tex.sample(smp, ((float3x3(float3(_58.dummy[3].xyz), float3(_58.dummy[4].xyz), float3(_58.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy / _58.dummy[9].xy));
                int _293 = int(_58.dummy[10].z);
                if (_293 == 1)
                {
                    color = float4(color.xyz * color.w, color.w);
                }
                if (_293 == 2)
                {
                    color = float4(color.x);
                }
                bool _320 = _293 == 3;
                bool _326;
                if (_320)
                {
                    _326 = color.w == 1.0;
                }
                else
                {
                    _326 = _320;
                }
                if (_326)
                {
                    discard_fragment();
                }
                float4 _332 = color;
                float4 _338 = (_332 * _58.dummy[6]) * (_141 * _154);
                color = _338;
                result = _338;
            }
            else
            {
                if (_163 == 2)
                {
                    result = float4(1.0);
                }
                else
                {
                    if (_163 == 3)
                    {
                        float4 color_1 = tex.sample(smp, in.ftcoord);
                        int _363 = int(_58.dummy[10].z);
                        if (_363 == 1)
                        {
                            color_1 = float4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_363 == 2)
                        {
                            color_1 = float4(color_1.x);
                        }
                        result = (color_1 * _154) * _58.dummy[6];
                    }
                }
            }
        }
        out.outColor = result;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_aa_fs_aa_source_metal_ios[3833] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,0x72,0x61,0x67,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,
    0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,0x28,0x63,0x6f,0x6e,0x73,0x74,
    0x61,0x6e,0x74,0x20,0x66,0x72,0x61,0x67,0x26,0x20,0x5f,0x35,0x38,0x2c,0x20,0x74,
    0x68,0x72,0x65,0x61,0x64,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x66,0x74,
    0x63,0x6f,0x6f,0x72,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x69,0x6e,0x28,0x31,0x2e,
    0x30,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x62,0x73,0x28,0x28,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,
    0x2d,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x66,0x61,0x73,
    0x74,0x3a,0x3a,0x6d,0x69,0x6e,0x28,0x31,0x2e,0x30,0x2c,0x20,0x66,0x74,0x63,0x6f,
    0x6f,0x72,0x64,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,
    0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,
    0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,
    0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x74,0x68,0x72,0x65,0x61,0x64,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x70,
    0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,0x61,0x67,0x26,
    0x20,0x5f,0x35,0x38,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x5f,0x31,0x30,0x38,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x30,0x2e,0x35,0x29,0x20,0x2d,0x20,0x28,0x28,0x61,0x62,0x73,0x28,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x32,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x70,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x5f,0x35,
    0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,0x20,0x2a,
    0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x7a,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x61,
    0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x38,0x2e,0x78,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x66,0x61,
    0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x38,0x2e,0x79,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,
    0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x74,
    0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x26,0x20,0x70,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x65,0x78,0x74,
    0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x26,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x61,0x62,
    0x73,0x28,0x70,0x74,0x29,0x20,0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x28,0x72,0x61,0x64,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,
    0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,
    0x2e,0x78,0x2c,0x20,0x5f,0x33,0x32,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x20,0x2b,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,
    0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,
    0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,
    0x61,0x67,0x26,0x20,0x5f,0x35,0x38,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,
    0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,
    0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x74,0x65,0x78,0x20,0x5b,0x5b,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x20,0x73,0x6d,0x70,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x28,0x33,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x31,
    0x20,0x3d,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,0x28,0x5f,0x35,
    0x38,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x3c,0x20,0x5f,
    0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x79,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,
    0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x28,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x66,0x70,
    0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x35,0x34,0x20,0x3d,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x5f,0x35,0x38,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x35,0x34,0x20,0x3d,0x3d,0x20,0x30,0x2e,
    0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,
    0x74,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x5f,0x31,0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,
    0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,
    0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,
    0x3d,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x20,0x3d,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,
    0x3d,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,
    0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x2c,0x20,0x5f,0x35,
    0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x37,0x5d,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,
    0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x33,0x29,0x20,0x2b,0x20,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x29,
    0x20,0x2f,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,
    0x77,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,
    0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,
    0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,
    0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x39,0x33,0x20,0x3d,
    0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,
    0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x31,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,
    0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,
    0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x33,0x32,
    0x30,0x20,0x3d,0x20,0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x33,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x33,0x32,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x36,0x20,0x3d,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,
    0x32,0x36,0x20,0x3d,0x20,0x5f,0x33,0x32,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x36,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,
    0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x5f,0x33,0x33,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x5f,0x33,0x33,0x38,0x20,0x3d,0x20,0x28,0x5f,0x33,0x33,0x32,0x20,
    0x2a,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x29,0x20,
    0x2a,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,
    0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x74,0x63,0x6f,
    0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,
    0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x5f,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x31,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct viewSize
    {
        float4 _viewSize;
    };

    struct main0_out
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
        float4 gl_Position [[position]];
    };

    struct main0_in
    {
        float2 vertex0 [[attribute(0)]];
        float2 tcoord [[attribute(1)]];
    };

    vertex main0_out main0(main0_in in [[stage_in]], constant viewSize& _28 [[buffer(0)]])
    {
        main0_out out = {};
        out.ftcoord = in.tcoord;
        out.fpos = in.vertex0;
        out.gl_Position = float4(((2.0 * in.vertex0.x) / _28._viewSize.x) - 1.0, 1.0 - ((2.0 * in.vertex0.y) / _28._viewSize.y), 0.0, 1.0);
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_aa_vs_aa_source_metal_sim[665] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x76,
    0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x20,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,
    0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,
    0x72,0x28,0x6c,0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,
    0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,0x5d,0x3b,
    0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x28,0x31,0x29,0x5d,0x5d,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x76,0x69,
    0x65,0x77,0x53,0x69,0x7a,0x65,0x26,0x20,0x5f,0x32,0x38,0x20,0x5b,0x5b,0x62,0x75,
    0x66,0x66,0x65,0x72,0x28,0x30,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,
    0x20,0x7b,0x7d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x74,0x63,
    0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x74,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x70,0x6f,0x73,0x20,0x3d,
    0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,0x28,0x32,0x2e,0x30,0x20,
    0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,0x78,0x30,0x2e,0x78,0x29,0x20,
    0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,
    0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x28,0x28,0x32,0x2e,0x30,0x20,0x2a,0x20,0x69,0x6e,0x2e,0x76,0x65,0x72,0x74,0x65,
    0x78,0x30,0x2e,0x79,0x29,0x20,0x2f,0x20,0x5f,0x32,0x38,0x2e,0x5f,0x76,0x69,0x65,
    0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"

    #include <metal_stdlib>
    #include <simd/simd.h>

    using namespace metal;

    struct frag
    {
        float4 dummy[11];
    };

    struct main0_out
    {
        float4 outColor [[color(0)]];
    };

    struct main0_in
    {
        float2 ftcoord [[user(locn0)]];
        float2 fpos [[user(locn1)]];
    };

    static inline __attribute__((always_inline))
    float strokeMask(constant frag& _58, thread float2& ftcoord)
    {
        return fast::min(1.0, (1.0 - abs((ftcoord.x * 2.0) - 1.0)) * _58.dummy[10].x) * fast::min(1.0, ftcoord.y);
    }

    static inline __attribute__((always_inline))
    float scissorMask(thread const float2& p, constant frag& _58)
    {
        float2 _108 = float2(0.5) - ((abs((float3x3(float3(_58.dummy[0].xyz), float3(_58.dummy[1].xyz), float3(_58.dummy[2].xyz)) * float3(p, 1.0)).xy) - _58.dummy[8].xy) * _58.dummy[8].zw);
        return fast::clamp(_108.x, 0.0, 1.0) * fast::clamp(_108.y, 0.0, 1.0);
    }

    static inline __attribute__((always_inline))
    float sdroundrect(thread const float2& pt, thread const float2& ext, thread const float& rad)
    {
        float2 _32 = abs(pt) - (ext - float2(rad));
        return (fast::min(fast::max(_32.x, _32.y), 0.0) + length(fast::max(_32, float2(0.0)))) - rad;
    }

    fragment main0_out main0(main0_in in [[stage_in]], constant frag& _58 [[buffer(1)]], texture2d<float> tex [[texture(0)]], sampler smp [[sampler(3)]])
    {
        main0_out out = {};
        float _141 = strokeMask(_58, in.ftcoord);
        if (_141 < _58.dummy[10].y)
        {
            discard_fragment();
        }
        float2 param = in.fpos;
        float _154 = scissorMask(param, _58);
        if (_154 == 0.0)
        {
            discard_fragment();
        }
        int _163 = int(_58.dummy[10].w);
        float4 result;
        if (_163 == 0)
        {
            float2 param_1 = (float3x3(float3(_58.dummy[3].xyz), float3(_58.dummy[4].xyz), float3(_58.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy;
            float2 param_2 = _58.dummy[9].xy;
            float param_3 = _58.dummy[9].z;
            result = mix(_58.dummy[6], _58.dummy[7], float4(fast::clamp((sdroundrect(param_1, param_2, param_3) + (_58.dummy[9].w * 0.5)) / _58.dummy[9].w, 0.0, 1.0))) * (_141 * _154);
        }
        else
        {
            if (_163 == 1)
            {
                float4 color = tex.sample(smp, ((float3x3(float3(_58.dummy[3].xyz), float3(_58.dummy[4].xyz), float3(_58.dummy[5].xyz)) * float3(in.fpos, 1.0)).xy / _58.dummy[9].xy));
                int _293 = int(_58.dummy[10].z);
                if (_293 == 1)
                {
                    color = float4(color.xyz * color.w, color.w);
                }
                if (_293 == 2)
                {
                    color = float4(color.x);
                }
                bool _320 = _293 == 3;
                bool _326;
                if (_320)
                {
                    _326 = color.w == 1.0;
                }
                else
                {
                    _326 = _320;
                }
                if (_326)
                {
                    discard_fragment();
                }
                float4 _332 = color;
                float4 _338 = (_332 * _58.dummy[6]) * (_141 * _154);
                color = _338;
                result = _338;
            }
            else
            {
                if (_163 == 2)
                {
                    result = float4(1.0);
                }
                else
                {
                    if (_163 == 3)
                    {
                        float4 color_1 = tex.sample(smp, in.ftcoord);
                        int _363 = int(_58.dummy[10].z);
                        if (_363 == 1)
                        {
                            color_1 = float4(color_1.xyz * color_1.w, color_1.w);
                        }
                        if (_363 == 2)
                        {
                            color_1 = float4(color_1.x);
                        }
                        result = (color_1 * _154) * _58.dummy[6];
                    }
                }
            }
        }
        out.outColor = result;
        return out;
    }

*/
#if defined(SOKOL_METAL)
static const uint8_t nanovg_aa_fs_aa_source_metal_sim[3833] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x66,0x72,0x61,0x67,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x31,0x31,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x5b,0x5b,0x63,0x6f,0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,
    0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,
    0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x66,0x70,0x6f,0x73,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,
    0x6f,0x63,0x6e,0x31,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,
    0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,0x28,0x63,0x6f,0x6e,0x73,0x74,
    0x61,0x6e,0x74,0x20,0x66,0x72,0x61,0x67,0x26,0x20,0x5f,0x35,0x38,0x2c,0x20,0x74,
    0x68,0x72,0x65,0x61,0x64,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x66,0x74,
    0x63,0x6f,0x6f,0x72,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x69,0x6e,0x28,0x31,0x2e,
    0x30,0x2c,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,0x61,0x62,0x73,0x28,0x28,0x66,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x20,
    0x2d,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x78,0x29,0x20,0x2a,0x20,0x66,0x61,0x73,
    0x74,0x3a,0x3a,0x6d,0x69,0x6e,0x28,0x31,0x2e,0x30,0x2c,0x20,0x66,0x74,0x63,0x6f,
    0x6f,0x72,0x64,0x2e,0x79,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,0x72,0x69,
    0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,0x5f,0x69,
    0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x73,0x63,
    0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x28,0x74,0x68,0x72,0x65,0x61,0x64,
    0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x70,
    0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,0x61,0x67,0x26,
    0x20,0x5f,0x35,0x38,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x5f,0x31,0x30,0x38,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x30,0x2e,0x35,0x29,0x20,0x2d,0x20,0x28,0x28,0x61,0x62,0x73,0x28,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,
    0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x7a,0x29,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x32,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x70,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x5f,0x35,
    0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x78,0x79,0x29,0x20,0x2a,
    0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x38,0x5d,0x2e,0x7a,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x66,0x61,
    0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x38,0x2e,0x78,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x20,0x2a,0x20,0x66,0x61,
    0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x5f,0x31,0x30,0x38,0x2e,0x79,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,
    0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,
    0x61,0x79,0x73,0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x74,
    0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x26,0x20,0x70,0x74,0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,
    0x6f,0x6e,0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x65,0x78,0x74,
    0x2c,0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x26,0x20,0x72,0x61,0x64,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x61,0x62,
    0x73,0x28,0x70,0x74,0x29,0x20,0x2d,0x20,0x28,0x65,0x78,0x74,0x20,0x2d,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x28,0x72,0x61,0x64,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,
    0x69,0x6e,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,
    0x2e,0x78,0x2c,0x20,0x5f,0x33,0x32,0x2e,0x79,0x29,0x2c,0x20,0x30,0x2e,0x30,0x29,
    0x20,0x2b,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,
    0x6d,0x61,0x78,0x28,0x5f,0x33,0x32,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,
    0x30,0x2e,0x30,0x29,0x29,0x29,0x29,0x20,0x2d,0x20,0x72,0x61,0x64,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,0x74,0x61,0x6e,0x74,0x20,0x66,0x72,
    0x61,0x67,0x26,0x20,0x5f,0x35,0x38,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,0x72,
    0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,
    0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x74,0x65,0x78,0x20,0x5b,0x5b,0x74,0x65,
    0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x20,0x73,0x6d,0x70,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x28,0x33,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,0x34,0x31,
    0x20,0x3d,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,0x28,0x5f,0x35,
    0x38,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x3c,0x20,0x5f,
    0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x79,0x29,0x0a,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,
    0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x28,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x66,0x70,
    0x6f,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x31,
    0x35,0x34,0x20,0x3d,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x2c,0x20,0x5f,0x35,0x38,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x35,0x34,0x20,0x3d,0x3d,0x20,0x30,0x2e,
    0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,
    0x74,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x69,
    0x6e,0x74,0x20,0x5f,0x31,0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,
    0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x72,0x65,0x73,0x75,0x6c,
    0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,
    0x3d,0x3d,0x20,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x31,0x20,0x3d,0x20,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,
    0x33,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,
    0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,
    0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,
    0x3d,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x78,
    0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x35,0x38,0x2e,0x64,
    0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,
    0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x2c,0x20,0x5f,0x35,
    0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x37,0x5d,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x28,0x66,0x61,0x73,0x74,0x3a,0x3a,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,
    0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x28,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x2c,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x33,0x29,0x20,0x2b,0x20,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,0x2e,0x35,0x29,0x29,
    0x20,0x2f,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x5d,0x2e,
    0x77,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x29,0x20,0x2a,
    0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,
    0x20,0x28,0x28,0x66,0x6c,0x6f,0x61,0x74,0x33,0x78,0x33,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,0x5d,0x2e,
    0x78,0x79,0x7a,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,
    0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x35,0x5d,0x2e,0x78,0x79,0x7a,0x29,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x33,0x28,0x69,0x6e,0x2e,0x66,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,
    0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x39,0x5d,0x2e,0x78,0x79,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x32,0x39,0x33,0x20,0x3d,
    0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,
    0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x31,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,
    0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x32,0x39,0x33,
    0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,0x5f,0x33,0x32,
    0x30,0x20,0x3d,0x20,0x5f,0x32,0x39,0x33,0x20,0x3d,0x3d,0x20,0x33,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x62,0x6f,0x6f,0x6c,0x20,
    0x5f,0x33,0x32,0x36,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,0x32,0x36,0x20,0x3d,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5f,0x33,
    0x32,0x36,0x20,0x3d,0x20,0x5f,0x33,0x32,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x33,0x32,0x36,0x29,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,
    0x63,0x61,0x72,0x64,0x5f,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,0x74,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x5f,0x33,0x33,0x32,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x34,0x20,0x5f,0x33,0x33,0x38,0x20,0x3d,0x20,0x28,0x5f,0x33,0x33,0x32,0x20,
    0x2a,0x20,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x29,0x20,
    0x2a,0x20,0x28,0x5f,0x31,0x34,0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x20,0x3d,0x20,0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,
    0x5f,0x33,0x33,0x38,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,
    0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x5f,0x31,0x36,0x33,0x20,0x3d,0x3d,0x20,0x33,
    0x29,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x74,0x65,0x78,0x2e,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x28,0x73,0x6d,0x70,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x74,0x63,0x6f,
    0x6f,0x72,0x64,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x6e,0x74,0x20,0x5f,0x33,
    0x36,0x33,0x20,0x3d,0x20,0x69,0x6e,0x74,0x28,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x31,0x30,0x5d,0x2e,0x7a,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,
    0x66,0x20,0x28,0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x31,0x29,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x5f,0x31,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x31,0x2e,0x77,0x2c,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,
    0x5f,0x33,0x36,0x33,0x20,0x3d,0x3d,0x20,0x32,0x29,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,
    0x31,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x20,0x2a,0x20,0x5f,0x35,0x38,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x5d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,0x73,
    0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif
/*
    diagnostic(off, derivative_uniformity);

    struct viewSize {
      /_ @offset(0) _/
      x_viewSize : vec4f,
    }

    var<private> ftcoord : vec2f;

    var<private> tcoord : vec2f;

    var<private> fpos : vec2f;

    var<private> vertex_1 : vec2f;

    @binding(0) @group(0) var<uniform> x_28 : viewSize;

    var<private> gl_Position : vec4f;

    fn main_1() {
      var x : f32;
      var y : f32;
      ftcoord = tcoord;
      fpos = vertex_1;
      x = (((2.0f * vertex_1.x) / x_28.x_viewSize.x) - 1.0f);
      y = (1.0f - ((2.0f * vertex_1.y) / x_28.x_viewSize.y));
      gl_Position = vec4f(x, y, 0.0f, 1.0f);
      return;
    }

    struct main_out {
      @location(0)
      ftcoord_1 : vec2f,
      @location(1)
      fpos_1 : vec2f,
      @builtin(position)
      gl_Position : vec4f,
    }

    @vertex
    fn main(@location(1) tcoord_param : vec2f, @location(0) vertex_1_param : vec2f) -> main_out {
      tcoord = tcoord_param;
      vertex_1 = vertex_1_param;
      main_1();
      return main_out(ftcoord, fpos, gl_Position);
    }
*/
#if defined(SOKOL_WGPU)
static const uint8_t nanovg_aa_vs_aa_source_wgsl[917] = {
    0x64,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x28,0x6f,0x66,0x66,0x2c,0x20,
    0x64,0x65,0x72,0x69,0x76,0x61,0x74,0x69,0x76,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x69,0x74,0x79,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x20,0x7b,0x0a,0x20,0x20,0x2f,0x2a,0x20,
    0x40,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x30,0x29,0x20,0x2a,0x2f,0x0a,0x20,0x20,
    0x78,0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x34,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,
    0x74,0x65,0x3e,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x76,0x65,
    0x63,0x32,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,
    0x65,0x3e,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,
    0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,
    0x20,0x66,0x70,0x6f,0x73,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,
    0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x76,0x65,0x72,
    0x74,0x65,0x78,0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,
    0x40,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,0x28,0x30,0x29,0x20,0x40,0x67,0x72,0x6f,
    0x75,0x70,0x28,0x30,0x29,0x20,0x76,0x61,0x72,0x3c,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x3e,0x20,0x78,0x5f,0x32,0x38,0x20,0x3a,0x20,0x76,0x69,0x65,0x77,0x53,0x69,
    0x7a,0x65,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,
    0x3e,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,
    0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x5f,
    0x31,0x28,0x29,0x20,0x7b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x78,0x20,0x3a,0x20,
    0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x79,0x20,0x3a,0x20,0x66,
    0x33,0x32,0x3b,0x0a,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,
    0x74,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x66,0x70,0x6f,0x73,0x20,0x3d,
    0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x31,0x3b,0x0a,0x20,0x20,0x78,0x20,0x3d,
    0x20,0x28,0x28,0x28,0x32,0x2e,0x30,0x66,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x31,0x2e,0x78,0x29,0x20,0x2f,0x20,0x78,0x5f,0x32,0x38,0x2e,0x78,0x5f,
    0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,0x78,0x29,0x20,0x2d,0x20,0x31,0x2e,
    0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x79,0x20,0x3d,0x20,0x28,0x31,0x2e,0x30,0x66,
    0x20,0x2d,0x20,0x28,0x28,0x32,0x2e,0x30,0x66,0x20,0x2a,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x31,0x2e,0x79,0x29,0x20,0x2f,0x20,0x78,0x5f,0x32,0x38,0x2e,0x78,
    0x5f,0x76,0x69,0x65,0x77,0x53,0x69,0x7a,0x65,0x2e,0x79,0x29,0x29,0x3b,0x0a,0x20,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,
    0x65,0x63,0x34,0x66,0x28,0x78,0x2c,0x20,0x79,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,
    0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x5f,0x6f,0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x28,0x30,0x29,0x0a,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x5f,
    0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x2c,0x0a,0x20,0x20,0x40,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x31,0x29,0x0a,0x20,0x20,0x66,0x70,0x6f,0x73,
    0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x2c,0x0a,0x20,0x20,0x40,0x62,
    0x75,0x69,0x6c,0x74,0x69,0x6e,0x28,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,
    0x0a,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,
    0x20,0x76,0x65,0x63,0x34,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x40,0x76,0x65,0x72,0x74,
    0x65,0x78,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x28,0x40,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x28,0x31,0x29,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x2c,0x20,0x40,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,0x20,0x76,0x65,0x72,0x74,0x65,
    0x78,0x5f,0x31,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,
    0x66,0x29,0x20,0x2d,0x3e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x20,0x7b,
    0x0a,0x20,0x20,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x74,0x63,0x6f,0x6f,
    0x72,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x76,0x65,0x72,0x74,
    0x65,0x78,0x5f,0x31,0x20,0x3d,0x20,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x31,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,
    0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x61,0x69,0x6e,
    0x5f,0x6f,0x75,0x74,0x28,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x2c,0x20,0x66,0x70,
    0x6f,0x73,0x2c,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x29,
    0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
/*
    diagnostic(off, derivative_uniformity);

    alias Arr = array<vec4f, 11u>;

    struct frag {
      /_ @offset(0) _/
      dummy : Arr,
    }

    @binding(9) @group(0) var<uniform> x_58 : frag;

    var<private> ftcoord : vec2f;

    var<private> fpos : vec2f;

    @binding(64) @group(1) var tex : texture_2d<f32>;

    @binding(65) @group(1) var smp : sampler;

    var<private> outColor : vec4f;

    fn strokeMask_() -> f32 {
      let x_122 = ftcoord.x;
      let x_131 = x_58.dummy[10i].x;
      let x_135 = ftcoord.y;
      return (min(1.0f, ((1.0f - abs(((x_122 * 2.0f) - 1.0f))) * x_131)) * min(1.0f, x_135));
    }

    fn scissorMask_vf2_(p : ptr<function, vec2f>) -> f32 {
      var sc : vec2f;
      let x_65 = x_58.dummy[0i].xyz;
      let x_69 = x_58.dummy[1i].xyz;
      let x_73 = x_58.dummy[2i].xyz;
      let x_89 = *(p);
      sc = (abs(((mat3x3f(vec3f(x_65.x, x_65.y, x_65.z), vec3f(x_69.x, x_69.y, x_69.z), vec3f(x_73.x, x_73.y, x_73.z)) * vec3f(x_89.x, x_89.y, 1.0f))).xy) - x_58.dummy[8i].xy);
      sc = (vec2f(0.5f) - (sc * x_58.dummy[8i].zw));
      let x_110 = sc.x;
      let x_113 = sc.y;
      return (clamp(x_110, 0.0f, 1.0f) * clamp(x_113, 0.0f, 1.0f));
    }

    fn sdroundrect_vf2_vf2_f1_(pt : ptr<function, vec2f>, ext : ptr<function, vec2f>, rad : ptr<function, f32>) -> f32 {
      var ext2 : vec2f;
      var d : vec2f;
      ext2 = (*(ext) - vec2f(*(rad)));
      d = (abs(*(pt)) - ext2);
      let x_36 = d.x;
      let x_39 = d.y;
      let x_43 = d;
      let x_48 = *(rad);
      return ((min(max(x_36, x_39), 0.0f) + length(max(x_43, vec2f(0.0f)))) - x_48);
    }

    fn main_1() {
      var strokeAlpha : f32;
      var scissor : f32;
      var param : vec2f;
      var pt_1 : vec2f;
      var d_1 : f32;
      var param_1 : vec2f;
      var param_2 : vec2f;
      var param_3 : f32;
      var color : vec4f;
      var result : vec4f;
      var pt_2 : vec2f;
      var color_1 : vec4f;
      var color_2 : vec4f;
      let x_141 = strokeMask_();
      strokeAlpha = x_141;
      if ((strokeAlpha < x_58.dummy[10i].y)) {
        discard;
      }
      param = fpos;
      let x_154 = scissorMask_vf2_(&(param));
      scissor = x_154;
      if ((scissor == 0.0f)) {
        discard;
      }
      if ((i32(x_58.dummy[10i].w) == 0i)) {
        let x_171 = x_58.dummy[3i].xyz;
        let x_175 = x_58.dummy[4i].xyz;
        let x_179 = x_58.dummy[5i].xyz;
        pt_1 = ((mat3x3f(vec3f(x_171.x, x_171.y, x_171.z), vec3f(x_175.x, x_175.y, x_175.z), vec3f(x_179.x, x_179.y, x_179.z)) * vec3f(fpos.x, fpos.y, 1.0f))).xy;
        param_1 = pt_1;
        param_2 = x_58.dummy[9i].xy;
        param_3 = x_58.dummy[9i].z;
        let x_211 = sdroundrect_vf2_vf2_f1_(&(param_1), &(param_2), &(param_3));
        d_1 = clamp(((x_211 + (x_58.dummy[9i].w * 0.5f)) / x_58.dummy[9i].w), 0.0f, 1.0f);
        color = mix(x_58.dummy[6i], x_58.dummy[7i], vec4f(d_1));
        color = (color * (strokeAlpha * scissor));
        result = color;
      } else {
        var x_325 : bool;
        var x_326 : bool;
        if ((i32(x_58.dummy[10i].w) == 1i)) {
          let x_248 = x_58.dummy[3i].xyz;
          let x_251 = x_58.dummy[4i].xyz;
          let x_254 = x_58.dummy[5i].xyz;
          pt_2 = (((mat3x3f(vec3f(x_248.x, x_248.y, x_248.z), vec3f(x_251.x, x_251.y, x_251.z), vec3f(x_254.x, x_254.y, x_254.z)) * vec3f(fpos.x, fpos.y, 1.0f))).xy / x_58.dummy[9i].xy);
          let x_289 = pt_2;
          let x_290 = textureSample(tex, smp, x_289);
          color_1 = x_290;
          if ((i32(x_58.dummy[10i].z) == 1i)) {
            let x_301 = (color_1.xyz * color_1.w);
            color_1 = vec4f(x_301.x, x_301.y, x_301.z, color_1.w);
          }
          if ((i32(x_58.dummy[10i].z) == 2i)) {
            color_1 = vec4f(color_1.x);
          }
          let x_320 = (i32(x_58.dummy[10i].z) == 3i);
          x_326 = x_320;
          if (x_320) {
            x_325 = (color_1.w == 1.0f);
            x_326 = x_325;
          }
          if (x_326) {
            discard;
          }
          color_1 = (color_1 * x_58.dummy[6i]);
          color_1 = (color_1 * (strokeAlpha * scissor));
          result = color_1;
        } else {
          if ((i32(x_58.dummy[10i].w) == 2i)) {
            result = vec4f(1.0f);
          } else {
            if ((i32(x_58.dummy[10i].w) == 3i)) {
              let x_359 = ftcoord;
              let x_360 = textureSample(tex, smp, x_359);
              color_2 = x_360;
              if ((i32(x_58.dummy[10i].z) == 1i)) {
                let x_371 = (color_2.xyz * color_2.w);
                color_2 = vec4f(x_371.x, x_371.y, x_371.z, color_2.w);
              }
              if ((i32(x_58.dummy[10i].z) == 2i)) {
                color_2 = vec4f(color_2.x);
              }
              result = ((color_2 * scissor) * x_58.dummy[6i]);
            }
          }
        }
      }
      outColor = result;
      return;
    }

    struct main_out {
      @location(0)
      outColor_1 : vec4f,
    }

    @fragment
    fn main(@location(0) ftcoord_param : vec2f, @location(1) fpos_param : vec2f) -> main_out {
      ftcoord = ftcoord_param;
      fpos = fpos_param;
      main_1();
      return main_out(outColor);
    }
*/
#if defined(SOKOL_WGPU)
static const uint8_t nanovg_aa_fs_aa_source_wgsl[4638] = {
    0x64,0x69,0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x28,0x6f,0x66,0x66,0x2c,0x20,
    0x64,0x65,0x72,0x69,0x76,0x61,0x74,0x69,0x76,0x65,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x69,0x74,0x79,0x29,0x3b,0x0a,0x0a,0x61,0x6c,0x69,0x61,0x73,0x20,0x41,
    0x72,0x72,0x20,0x3d,0x20,0x61,0x72,0x72,0x61,0x79,0x3c,0x76,0x65,0x63,0x34,0x66,
    0x2c,0x20,0x31,0x31,0x75,0x3e,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x66,0x72,0x61,0x67,0x20,0x7b,0x0a,0x20,0x20,0x2f,0x2a,0x20,0x40,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x30,0x29,0x20,0x2a,0x2f,0x0a,0x20,0x20,0x64,0x75,0x6d,0x6d,
    0x79,0x20,0x3a,0x20,0x41,0x72,0x72,0x2c,0x0a,0x7d,0x0a,0x0a,0x40,0x62,0x69,0x6e,
    0x64,0x69,0x6e,0x67,0x28,0x39,0x29,0x20,0x40,0x67,0x72,0x6f,0x75,0x70,0x28,0x30,
    0x29,0x20,0x76,0x61,0x72,0x3c,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x3e,0x20,0x78,
    0x5f,0x35,0x38,0x20,0x3a,0x20,0x66,0x72,0x61,0x67,0x3b,0x0a,0x0a,0x76,0x61,0x72,
    0x3c,0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,
    0x64,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,
    0x70,0x72,0x69,0x76,0x61,0x74,0x65,0x3e,0x20,0x66,0x70,0x6f,0x73,0x20,0x3a,0x20,
    0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x0a,0x40,0x62,0x69,0x6e,0x64,0x69,0x6e,0x67,
    0x28,0x36,0x34,0x29,0x20,0x40,0x67,0x72,0x6f,0x75,0x70,0x28,0x31,0x29,0x20,0x76,
    0x61,0x72,0x20,0x74,0x65,0x78,0x20,0x3a,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x5f,0x32,0x64,0x3c,0x66,0x33,0x32,0x3e,0x3b,0x0a,0x0a,0x40,0x62,0x69,0x6e,0x64,
    0x69,0x6e,0x67,0x28,0x36,0x35,0x29,0x20,0x40,0x67,0x72,0x6f,0x75,0x70,0x28,0x31,
    0x29,0x20,0x76,0x61,0x72,0x20,0x73,0x6d,0x70,0x20,0x3a,0x20,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x3c,0x70,0x72,0x69,0x76,0x61,0x74,
    0x65,0x3e,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x76,0x65,
    0x63,0x34,0x66,0x3b,0x0a,0x0a,0x66,0x6e,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,
    0x61,0x73,0x6b,0x5f,0x28,0x29,0x20,0x2d,0x3e,0x20,0x66,0x33,0x32,0x20,0x7b,0x0a,
    0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x32,0x32,0x20,0x3d,0x20,0x66,0x74,
    0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,
    0x5f,0x31,0x33,0x31,0x20,0x3d,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x31,0x33,0x35,0x20,0x3d,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x2e,
    0x79,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x6d,0x69,0x6e,
    0x28,0x31,0x2e,0x30,0x66,0x2c,0x20,0x28,0x28,0x31,0x2e,0x30,0x66,0x20,0x2d,0x20,
    0x61,0x62,0x73,0x28,0x28,0x28,0x78,0x5f,0x31,0x32,0x32,0x20,0x2a,0x20,0x32,0x2e,
    0x30,0x66,0x29,0x20,0x2d,0x20,0x31,0x2e,0x30,0x66,0x29,0x29,0x29,0x20,0x2a,0x20,
    0x78,0x5f,0x31,0x33,0x31,0x29,0x29,0x20,0x2a,0x20,0x6d,0x69,0x6e,0x28,0x31,0x2e,
    0x30,0x66,0x2c,0x20,0x78,0x5f,0x31,0x33,0x35,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x66,0x6e,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x5f,0x76,
    0x66,0x32,0x5f,0x28,0x70,0x20,0x3a,0x20,0x70,0x74,0x72,0x3c,0x66,0x75,0x6e,0x63,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x76,0x65,0x63,0x32,0x66,0x3e,0x29,0x20,0x2d,0x3e,
    0x20,0x66,0x33,0x32,0x20,0x7b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x73,0x63,0x20,
    0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,
    0x5f,0x36,0x35,0x20,0x3d,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,
    0x5b,0x30,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x36,0x39,0x20,0x3d,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,
    0x20,0x78,0x5f,0x37,0x33,0x20,0x3d,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x32,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x6c,0x65,
    0x74,0x20,0x78,0x5f,0x38,0x39,0x20,0x3d,0x20,0x2a,0x28,0x70,0x29,0x3b,0x0a,0x20,
    0x20,0x73,0x63,0x20,0x3d,0x20,0x28,0x61,0x62,0x73,0x28,0x28,0x28,0x6d,0x61,0x74,
    0x33,0x78,0x33,0x66,0x28,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x36,0x35,0x2e,
    0x78,0x2c,0x20,0x78,0x5f,0x36,0x35,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x36,0x35,0x2e,
    0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x36,0x39,0x2e,0x78,
    0x2c,0x20,0x78,0x5f,0x36,0x39,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x36,0x39,0x2e,0x7a,
    0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x37,0x33,0x2e,0x78,0x2c,
    0x20,0x78,0x5f,0x37,0x33,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x37,0x33,0x2e,0x7a,0x29,
    0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x38,0x39,0x2e,0x78,
    0x2c,0x20,0x78,0x5f,0x38,0x39,0x2e,0x79,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x29,
    0x29,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x38,0x69,0x5d,0x2e,0x78,0x79,0x29,0x3b,0x0a,0x20,0x20,0x73,0x63,
    0x20,0x3d,0x20,0x28,0x76,0x65,0x63,0x32,0x66,0x28,0x30,0x2e,0x35,0x66,0x29,0x20,
    0x2d,0x20,0x28,0x73,0x63,0x20,0x2a,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x38,0x69,0x5d,0x2e,0x7a,0x77,0x29,0x29,0x3b,0x0a,0x20,0x20,0x6c,
    0x65,0x74,0x20,0x78,0x5f,0x31,0x31,0x30,0x20,0x3d,0x20,0x73,0x63,0x2e,0x78,0x3b,
    0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x31,0x33,0x20,0x3d,0x20,0x73,
    0x63,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x63,
    0x6c,0x61,0x6d,0x70,0x28,0x78,0x5f,0x31,0x31,0x30,0x2c,0x20,0x30,0x2e,0x30,0x66,
    0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x20,0x2a,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,
    0x78,0x5f,0x31,0x31,0x33,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,0x2e,0x30,
    0x66,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6e,0x20,0x73,0x64,0x72,0x6f,0x75,
    0x6e,0x64,0x72,0x65,0x63,0x74,0x5f,0x76,0x66,0x32,0x5f,0x76,0x66,0x32,0x5f,0x66,
    0x31,0x5f,0x28,0x70,0x74,0x20,0x3a,0x20,0x70,0x74,0x72,0x3c,0x66,0x75,0x6e,0x63,
    0x74,0x69,0x6f,0x6e,0x2c,0x20,0x76,0x65,0x63,0x32,0x66,0x3e,0x2c,0x20,0x65,0x78,
    0x74,0x20,0x3a,0x20,0x70,0x74,0x72,0x3c,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,0x6e,
    0x2c,0x20,0x76,0x65,0x63,0x32,0x66,0x3e,0x2c,0x20,0x72,0x61,0x64,0x20,0x3a,0x20,
    0x70,0x74,0x72,0x3c,0x66,0x75,0x6e,0x63,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x66,0x33,
    0x32,0x3e,0x29,0x20,0x2d,0x3e,0x20,0x66,0x33,0x32,0x20,0x7b,0x0a,0x20,0x20,0x76,
    0x61,0x72,0x20,0x65,0x78,0x74,0x32,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,
    0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x64,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,
    0x3b,0x0a,0x20,0x20,0x65,0x78,0x74,0x32,0x20,0x3d,0x20,0x28,0x2a,0x28,0x65,0x78,
    0x74,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x66,0x28,0x2a,0x28,0x72,0x61,0x64,
    0x29,0x29,0x29,0x3b,0x0a,0x20,0x20,0x64,0x20,0x3d,0x20,0x28,0x61,0x62,0x73,0x28,
    0x2a,0x28,0x70,0x74,0x29,0x29,0x20,0x2d,0x20,0x65,0x78,0x74,0x32,0x29,0x3b,0x0a,
    0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x33,0x36,0x20,0x3d,0x20,0x64,0x2e,0x78,
    0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x33,0x39,0x20,0x3d,0x20,0x64,
    0x2e,0x79,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x34,0x33,0x20,0x3d,
    0x20,0x64,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x34,0x38,0x20,0x3d,
    0x20,0x2a,0x28,0x72,0x61,0x64,0x29,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x28,0x28,0x6d,0x69,0x6e,0x28,0x6d,0x61,0x78,0x28,0x78,0x5f,0x33,0x36,
    0x2c,0x20,0x78,0x5f,0x33,0x39,0x29,0x2c,0x20,0x30,0x2e,0x30,0x66,0x29,0x20,0x2b,
    0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x28,0x6d,0x61,0x78,0x28,0x78,0x5f,0x34,0x33,
    0x2c,0x20,0x76,0x65,0x63,0x32,0x66,0x28,0x30,0x2e,0x30,0x66,0x29,0x29,0x29,0x29,
    0x20,0x2d,0x20,0x78,0x5f,0x34,0x38,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x66,0x6e,0x20,
    0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,0x29,0x20,0x7b,0x0a,0x20,0x20,0x76,0x61,0x72,
    0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x41,0x6c,0x70,0x68,0x61,0x20,0x3a,0x20,0x66,
    0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,
    0x72,0x20,0x3a,0x20,0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,
    0x76,0x61,0x72,0x20,0x70,0x74,0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,
    0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x64,0x5f,0x31,0x20,0x3a,0x20,0x66,0x33,
    0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,0x66,0x3b,
    0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,0x3a,
    0x20,0x66,0x33,0x32,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,
    0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x70,0x74,0x5f,0x32,0x20,0x3a,0x20,0x76,0x65,
    0x63,0x32,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,0x72,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x31,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x3b,0x0a,0x20,0x20,0x76,0x61,
    0x72,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x20,0x3a,0x20,0x76,0x65,0x63,0x34,
    0x66,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x34,0x31,0x20,0x3d,
    0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x4d,0x61,0x73,0x6b,0x5f,0x28,0x29,0x3b,0x0a,
    0x20,0x20,0x73,0x74,0x72,0x6f,0x6b,0x65,0x41,0x6c,0x70,0x68,0x61,0x20,0x3d,0x20,
    0x78,0x5f,0x31,0x34,0x31,0x3b,0x0a,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x73,0x74,
    0x72,0x6f,0x6b,0x65,0x41,0x6c,0x70,0x68,0x61,0x20,0x3c,0x20,0x78,0x5f,0x35,0x38,
    0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x79,0x29,0x29,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x7d,0x0a,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x70,0x6f,
    0x73,0x3b,0x0a,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x35,0x34,0x20,0x3d,
    0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x4d,0x61,0x73,0x6b,0x5f,0x76,0x66,0x32,
    0x5f,0x28,0x26,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x29,0x3b,0x0a,0x20,0x20,0x73,
    0x63,0x69,0x73,0x73,0x6f,0x72,0x20,0x3d,0x20,0x78,0x5f,0x31,0x35,0x34,0x3b,0x0a,
    0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,0x20,0x3d,
    0x3d,0x20,0x30,0x2e,0x30,0x66,0x29,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x64,
    0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x7d,0x0a,0x20,0x20,0x69,0x66,
    0x20,0x28,0x28,0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x77,0x29,0x20,0x3d,0x3d,0x20,0x30,0x69,0x29,
    0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x37,
    0x31,0x20,0x3d,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,
    0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,
    0x78,0x5f,0x31,0x37,0x35,0x20,0x3d,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x34,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x6c,0x65,0x74,0x20,0x78,0x5f,0x31,0x37,0x39,0x20,0x3d,0x20,0x78,0x5f,0x35,0x38,
    0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x35,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x70,0x74,0x5f,0x31,0x20,0x3d,0x20,0x28,0x28,0x6d,0x61,0x74,
    0x33,0x78,0x33,0x66,0x28,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x31,0x37,0x31,
    0x2e,0x78,0x2c,0x20,0x78,0x5f,0x31,0x37,0x31,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x31,
    0x37,0x31,0x2e,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x31,
    0x37,0x35,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x31,0x37,0x35,0x2e,0x79,0x2c,0x20,0x78,
    0x5f,0x31,0x37,0x35,0x2e,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,
    0x5f,0x31,0x37,0x39,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x31,0x37,0x39,0x2e,0x79,0x2c,
    0x20,0x78,0x5f,0x31,0x37,0x39,0x2e,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x33,0x66,0x28,0x66,0x70,0x6f,0x73,0x2e,0x78,0x2c,0x20,0x66,0x70,0x6f,0x73,0x2e,
    0x79,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x29,0x29,0x2e,0x78,0x79,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x70,0x74,0x5f,
    0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,
    0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x69,0x5d,0x2e,
    0x78,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x20,
    0x3d,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x69,0x5d,
    0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x31,
    0x31,0x20,0x3d,0x20,0x73,0x64,0x72,0x6f,0x75,0x6e,0x64,0x72,0x65,0x63,0x74,0x5f,
    0x76,0x66,0x32,0x5f,0x76,0x66,0x32,0x5f,0x66,0x31,0x5f,0x28,0x26,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x29,0x2c,0x20,0x26,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x32,0x29,0x2c,0x20,0x26,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x64,0x5f,0x31,0x20,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,
    0x28,0x28,0x28,0x78,0x5f,0x32,0x31,0x31,0x20,0x2b,0x20,0x28,0x78,0x5f,0x35,0x38,
    0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x69,0x5d,0x2e,0x77,0x20,0x2a,0x20,0x30,
    0x2e,0x35,0x66,0x29,0x29,0x20,0x2f,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x39,0x69,0x5d,0x2e,0x77,0x29,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,
    0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,
    0x72,0x20,0x3d,0x20,0x6d,0x69,0x78,0x28,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x36,0x69,0x5d,0x2c,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,
    0x6d,0x79,0x5b,0x37,0x69,0x5d,0x2c,0x20,0x76,0x65,0x63,0x34,0x66,0x28,0x64,0x5f,
    0x31,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,
    0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x20,0x28,0x73,0x74,0x72,0x6f,0x6b,
    0x65,0x41,0x6c,0x70,0x68,0x61,0x20,0x2a,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,
    0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x7d,0x20,0x65,0x6c,0x73,0x65,
    0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x61,0x72,0x20,0x78,0x5f,0x33,0x32,0x35,
    0x20,0x3a,0x20,0x62,0x6f,0x6f,0x6c,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x61,0x72,
    0x20,0x78,0x5f,0x33,0x32,0x36,0x20,0x3a,0x20,0x62,0x6f,0x6f,0x6c,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x38,
    0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x77,0x29,0x20,0x3d,
    0x3d,0x20,0x31,0x69,0x29,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,
    0x65,0x74,0x20,0x78,0x5f,0x32,0x34,0x38,0x20,0x3d,0x20,0x78,0x5f,0x35,0x38,0x2e,
    0x64,0x75,0x6d,0x6d,0x79,0x5b,0x33,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x35,0x31,0x20,0x3d,
    0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x34,0x69,0x5d,0x2e,
    0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,
    0x5f,0x32,0x35,0x34,0x20,0x3d,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x35,0x69,0x5d,0x2e,0x78,0x79,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x70,0x74,0x5f,0x32,0x20,0x3d,0x20,0x28,0x28,0x28,0x6d,0x61,0x74,0x33,0x78,
    0x33,0x66,0x28,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x32,0x34,0x38,0x2e,0x78,
    0x2c,0x20,0x78,0x5f,0x32,0x34,0x38,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x32,0x34,0x38,
    0x2e,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x32,0x35,0x31,
    0x2e,0x78,0x2c,0x20,0x78,0x5f,0x32,0x35,0x31,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x32,
    0x35,0x31,0x2e,0x7a,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x66,0x28,0x78,0x5f,0x32,
    0x35,0x34,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x32,0x35,0x34,0x2e,0x79,0x2c,0x20,0x78,
    0x5f,0x32,0x35,0x34,0x2e,0x7a,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x33,0x66,
    0x28,0x66,0x70,0x6f,0x73,0x2e,0x78,0x2c,0x20,0x66,0x70,0x6f,0x73,0x2e,0x79,0x2c,
    0x20,0x31,0x2e,0x30,0x66,0x29,0x29,0x29,0x2e,0x78,0x79,0x20,0x2f,0x20,0x78,0x5f,
    0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x39,0x69,0x5d,0x2e,0x78,0x79,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x38,
    0x39,0x20,0x3d,0x20,0x70,0x74,0x5f,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x6c,0x65,0x74,0x20,0x78,0x5f,0x32,0x39,0x30,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x73,
    0x6d,0x70,0x2c,0x20,0x78,0x5f,0x32,0x38,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x78,0x5f,0x32,0x39,
    0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x69,0x33,
    0x32,0x28,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x69,
    0x5d,0x2e,0x7a,0x29,0x20,0x3d,0x3d,0x20,0x31,0x69,0x29,0x29,0x20,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x33,0x30,0x31,
    0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x78,0x79,0x7a,0x20,
    0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,
    0x76,0x65,0x63,0x34,0x66,0x28,0x78,0x5f,0x33,0x30,0x31,0x2e,0x78,0x2c,0x20,0x78,
    0x5f,0x33,0x30,0x31,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x33,0x30,0x31,0x2e,0x7a,0x2c,
    0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,
    0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,
    0x30,0x69,0x5d,0x2e,0x7a,0x29,0x20,0x3d,0x3d,0x20,0x32,0x69,0x29,0x29,0x20,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x66,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x6c,0x65,0x74,0x20,0x78,0x5f,0x33,0x32,0x30,0x20,0x3d,0x20,0x28,
    0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,
    0x30,0x69,0x5d,0x2e,0x7a,0x29,0x20,0x3d,0x3d,0x20,0x33,0x69,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x78,0x5f,0x33,0x32,0x36,0x20,0x3d,0x20,0x78,0x5f,0x33,
    0x32,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x78,0x5f,
    0x33,0x32,0x30,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x78,
    0x5f,0x33,0x32,0x35,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x2e,
    0x77,0x20,0x3d,0x3d,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x78,0x5f,0x33,0x32,0x36,0x20,0x3d,0x20,0x78,0x5f,0x33,0x32,
    0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,
    0x20,0x69,0x66,0x20,0x28,0x78,0x5f,0x33,0x32,0x36,0x29,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x64,0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x31,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,
    0x2a,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,0x69,0x5d,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x20,0x2a,0x20,0x28,0x73,
    0x74,0x72,0x6f,0x6b,0x65,0x41,0x6c,0x70,0x68,0x61,0x20,0x2a,0x20,0x73,0x63,0x69,
    0x73,0x73,0x6f,0x72,0x29,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x72,0x65,
    0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x31,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x7d,0x20,0x65,0x6c,0x73,0x65,0x20,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x20,0x20,0x69,0x66,0x20,0x28,0x28,0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x38,
    0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x77,0x29,0x20,0x3d,
    0x3d,0x20,0x32,0x69,0x29,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x66,0x28,
    0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x20,0x65,
    0x6c,0x73,0x65,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x28,0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x77,0x29,0x20,0x3d,0x3d,0x20,0x33,0x69,0x29,
    0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,
    0x74,0x20,0x78,0x5f,0x33,0x35,0x39,0x20,0x3d,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,
    0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x6c,0x65,0x74,
    0x20,0x78,0x5f,0x33,0x36,0x30,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x74,0x65,0x78,0x2c,0x20,0x73,0x6d,0x70,0x2c,
    0x20,0x78,0x5f,0x33,0x35,0x39,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x20,0x3d,0x20,0x78,0x5f,0x33,
    0x36,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x69,0x66,
    0x20,0x28,0x28,0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,
    0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x7a,0x29,0x20,0x3d,0x3d,0x20,0x31,0x69,0x29,
    0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x6c,0x65,0x74,0x20,0x78,0x5f,0x33,0x37,0x31,0x20,0x3d,0x20,0x28,0x63,0x6f,0x6c,
    0x6f,0x72,0x5f,0x32,0x2e,0x78,0x79,0x7a,0x20,0x2a,0x20,0x63,0x6f,0x6c,0x6f,0x72,
    0x5f,0x32,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x66,0x28,0x78,0x5f,0x33,0x37,0x31,0x2e,0x78,0x2c,0x20,0x78,0x5f,0x33,0x37,
    0x31,0x2e,0x79,0x2c,0x20,0x78,0x5f,0x33,0x37,0x31,0x2e,0x7a,0x2c,0x20,0x63,0x6f,
    0x6c,0x6f,0x72,0x5f,0x32,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x69,0x66,0x20,0x28,0x28,0x69,0x33,0x32,0x28,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,
    0x6d,0x6d,0x79,0x5b,0x31,0x30,0x69,0x5d,0x2e,0x7a,0x29,0x20,0x3d,0x3d,0x20,0x32,
    0x69,0x29,0x29,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,
    0x66,0x28,0x63,0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,
    0x20,0x20,0x20,0x20,0x72,0x65,0x73,0x75,0x6c,0x74,0x20,0x3d,0x20,0x28,0x28,0x63,
    0x6f,0x6c,0x6f,0x72,0x5f,0x32,0x20,0x2a,0x20,0x73,0x63,0x69,0x73,0x73,0x6f,0x72,
    0x29,0x20,0x2a,0x20,0x78,0x5f,0x35,0x38,0x2e,0x64,0x75,0x6d,0x6d,0x79,0x5b,0x36,
    0x69,0x5d,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,0x7d,
    0x0a,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x72,0x65,
    0x73,0x75,0x6c,0x74,0x3b,0x0a,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,
    0x75,0x74,0x20,0x7b,0x0a,0x20,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x28,0x30,0x29,0x0a,0x20,0x20,0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x5f,0x31,
    0x20,0x3a,0x20,0x76,0x65,0x63,0x34,0x66,0x2c,0x0a,0x7d,0x0a,0x0a,0x40,0x66,0x72,
    0x61,0x67,0x6d,0x65,0x6e,0x74,0x0a,0x66,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x28,0x40,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x30,0x29,0x20,0x66,0x74,0x63,0x6f,
    0x6f,0x72,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,0x32,
    0x66,0x2c,0x20,0x40,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x28,0x31,0x29,0x20,
    0x66,0x70,0x6f,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x20,0x3a,0x20,0x76,0x65,0x63,
    0x32,0x66,0x29,0x20,0x2d,0x3e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x20,
    0x7b,0x0a,0x20,0x20,0x66,0x74,0x63,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x66,0x74,
    0x63,0x6f,0x6f,0x72,0x64,0x5f,0x70,0x61,0x72,0x61,0x6d,0x3b,0x0a,0x20,0x20,0x66,
    0x70,0x6f,0x73,0x20,0x3d,0x20,0x66,0x70,0x6f,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,
    0x3b,0x0a,0x20,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x31,0x28,0x29,0x3b,0x0a,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x61,0x69,0x6e,0x5f,0x6f,0x75,0x74,0x28,
    0x6f,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x29,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif
static inline const sg_shader_desc* nanovg_aa_sg_shader_desc(sg_backend backend) {
    #if defined(SOKOL_GLCORE)
    if (backend == SG_BACKEND_GLCORE) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_aa_vs_aa_source_glsl410;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)nanovg_aa_fs_aa_source_glsl410;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "vertex";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "tcoord";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "viewSize";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 11;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "frag";
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.texture_sampler_pairs[0].glsl_name = "tex_smp";
            desc.label = "nanovg_aa_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLCORE */
    #if defined(SOKOL_GLES3)
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_aa_vs_aa_source_glsl300es;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)nanovg_aa_fs_aa_source_glsl300es;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].glsl_name = "vertex";
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].glsl_name = "tcoord";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "viewSize";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 11;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "frag";
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.texture_sampler_pairs[0].glsl_name = "tex_smp";
            desc.label = "nanovg_aa_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_GLES3 */
    #if defined(SOKOL_D3D11)
    if (backend == SG_BACKEND_D3D11) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_aa_vs_aa_source_hlsl4;
            desc.vertex_func.d3d11_target = "vs_4_0";
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)nanovg_aa_fs_aa_source_hlsl4;
            desc.fragment_func.d3d11_target = "ps_4_0";
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[0].hlsl_sem_name = "TEXCOORD";
            desc.attrs[0].hlsl_sem_index = 0;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].hlsl_sem_name = "TEXCOORD";
            desc.attrs[1].hlsl_sem_index = 1;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].hlsl_register_b_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].hlsl_register_b_n = 1;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.hlsl_register_t_n = 0;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].hlsl_register_s_n = 3;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_aa_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_D3D11 */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_MACOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_aa_vs_aa_source_metal_macos;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)nanovg_aa_fs_aa_source_metal_macos;
            desc.fragment_func.entry = "main0";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].msl_buffer_n = 1;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.msl_texture_n = 0;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].msl_sampler_n = 3;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_aa_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_IOS) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_aa_vs_aa_source_metal_ios;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)nanovg_aa_fs_aa_source_metal_ios;
            desc.fragment_func.entry = "main0";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].msl_buffer_n = 1;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.msl_texture_n = 0;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].msl_sampler_n = 3;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_aa_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_METAL)
    if (backend == SG_BACKEND_METAL_SIMULATOR) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_aa_vs_aa_source_metal_sim;
            desc.vertex_func.entry = "main0";
            desc.fragment_func.source = (const char*)nanovg_aa_fs_aa_source_metal_sim;
            desc.fragment_func.entry = "main0";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].msl_buffer_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].msl_buffer_n = 1;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.msl_texture_n = 0;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].msl_sampler_n = 3;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_aa_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_METAL */
    #if defined(SOKOL_WGPU)
    if (backend == SG_BACKEND_WGPU) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)nanovg_aa_vs_aa_source_wgsl;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)nanovg_aa_fs_aa_source_wgsl;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.attrs[1].base_type = SG_SHADERATTRBASETYPE_FLOAT;
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 16;
            desc.uniform_blocks[0].wgsl_group0_binding_n = 0;
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 176;
            desc.uniform_blocks[1].wgsl_group0_binding_n = 9;
            desc.views[2].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[2].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[2].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[2].texture.multisampled = false;
            desc.views[2].texture.wgsl_group1_binding_n = 64;
            desc.samplers[3].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[3].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.samplers[3].wgsl_group1_binding_n = 65;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 2;
            desc.texture_sampler_pairs[0].sampler_slot = 3;
            desc.label = "nanovg_aa_sg_shader";
        }
        return &desc;
    }
    #endif /* SOKOL_WGPU */
    return 0;
}
// -- END --

enum SGNVGshaderType {
    NSVG_SHADER_FILLGRAD,
    NSVG_SHADER_FILLIMG,
    NSVG_SHADER_SIMPLE,
    NSVG_SHADER_IMG
};

struct SGNVGtexture {
    int id;
    sg_image img;
    sg_view img_view;
    sg_sampler smp;
    int width, height;
    int type;
    int flags;
    uint8_t* imgData;
};
typedef struct SGNVGtexture SGNVGtexture;

struct SGNVGblend
{
    sg_blend_factor srcRGB;
    sg_blend_factor dstRGB;
    sg_blend_factor srcAlpha;
    sg_blend_factor dstAlpha;
};
typedef struct SGNVGblend SGNVGblend;

enum SGNVGcallType {
    SGNVG_NONE = 0,
    SGNVG_FILL,
    SGNVG_CONVEXFILL,
    SGNVG_STROKE,
    SGNVG_TRIANGLES,
};

struct SGNVGcall {
    int type;
    int image;
    int pathOffset;
    int pathCount;
    int triangleOffset;
    int triangleCount;
    int uniformOffset;
    SGNVGblend blendFunc;
};
typedef struct SGNVGcall SGNVGcall;

struct SGNVGpath {
    int fillOffset;
    int fillCount;
    int strokeOffset;
    int strokeCount;
};
typedef struct SGNVGpath SGNVGpath;

struct SGNVGattribute {
    float vertex[2];
    float tcoord[2];
};
typedef struct SGNVGattribute SGNVGattribute;

struct SGNVGvertUniforms {
    float viewSize[4];
};
typedef struct SGNVGvertUniforms SGNVGvertUniforms;

struct SGNVGfragUniforms {
    #define NANOVG_SG_UNIFORMARRAY_SIZE 11
    union {
        struct {
            float scissorMat[12]; // matrices are actually 3 vec4s
            float paintMat[12];
            struct NVGcolor innerCol;
            struct NVGcolor outerCol;
            float scissorExt[2];
            float scissorScale[2];
            float extent[2];
            float radius;
            float feather;
            float strokeMult;
            float strokeThr;
            float texType;
            float type;
        };
        float uniformArray[NANOVG_SG_UNIFORMARRAY_SIZE][4];
    };
};
typedef struct SGNVGfragUniforms SGNVGfragUniforms;

// LRU cache; keep its size relatively small, as items are accessed via a linear search
#define NANOVG_SG_PIPELINE_CACHE_SIZE 32

struct SGNVGpipelineCacheKey {
    uint16_t blend;         // cached as `src_factor_rgb | (dst_factor_rgb << 4) | (src_factor_alpha << 8) | (dst_factor_alpha << 12)`
    uint16_t lastUse;      // updated on each read
};
typedef struct SGNVGpipelineCacheKey SGNVGpipelineCacheKey;

enum SGNVGpipelineType
{
    // used by sgnvg__convexFill, sgnvg__stroke, sgnvg__triangles
    SGNVG_PIP_BASE = 0,

    // used by sgnvg__fill
    SGNVG_PIP_FILL_STENCIL,
    SGNVG_PIP_FILL_ANTIALIAS,   // only used if sg->flags & NVG_ANTIALIAS
    SGNVG_PIP_FILL_DRAW,

    // used by sgnvg__stroke
    SGNVG_PIP_STROKE_STENCIL_DRAW,      // only used if sg->flags & NVG_STENCIL_STROKES
    SGNVG_PIP_STROKE_STENCIL_ANTIALIAS, // only used if sg->flags & NVG_STENCIL_STROKES
    SGNVG_PIP_STROKE_STENCIL_CLEAR,     // only used if sg->flags & NVG_STENCIL_STROKES

    SGNVG_PIP_NUM_
};
typedef enum SGNVGpipelineType SGNVGpipelineType;

struct SGNVGpipelineCache {
    // keys are stored as a separate array for search performance
    SGNVGpipelineCacheKey keys[NANOVG_SG_PIPELINE_CACHE_SIZE];
    sg_pipeline pipelines[NANOVG_SG_PIPELINE_CACHE_SIZE][SGNVG_PIP_NUM_];
    uint8_t pipelinesActive[NANOVG_SG_PIPELINE_CACHE_SIZE];
    uint16_t currentUse;   // incremented on each overwrite
};
typedef struct SGNVGpipelineCache SGNVGpipelineCache;

struct SGNVGcontext {
    sg_shader shader;
    SGNVGtexture* textures;
    SGNVGvertUniforms view;
    int ntextures;
    int ctextures;
    int textureId;
    sg_buffer vertBuf;
    sg_buffer indexBuf;
    SGNVGpipelineCache pipelineCache;
    int fragSize;
    int flags;

    // Per frame buffers
    SGNVGcall* calls;
    int ccalls;
    int ncalls;
    SGNVGpath* paths;
    int cpaths;
    int npaths;
    SGNVGattribute* verts;
    int cverts;
    int nverts;
    int cverts_gpu;
    uint32_t* indexes;
    int cindexes;
    int nindexes;
    int cindexes_gpu;
    unsigned char* uniforms;
    int cuniforms;
    int nuniforms;

    // state
    int pipelineCacheIndex;
    sg_blend_state blend;

    int dummyTex;
};
typedef struct SGNVGcontext SGNVGcontext;

static int sgnvg__maxi(int a, int b) { return a > b ? a : b; }

#ifdef SOKOL_GLES2
static unsigned int sgnvg__nearestPow2(unsigned int num)
{
    unsigned n = num > 0 ? num - 1 : 0;
    n |= n >> 1;
    n |= n >> 2;
    n |= n >> 4;
    n |= n >> 8;
    n |= n >> 16;
    n++;
    return n;
}
#endif

// you probably always want to have that one disabled for performance
// unless you want to trace all functions in here which is very verbose
//#define SGNVG_DEBUG_LOG

#ifdef SGNVG_DEBUG_LOG
#define SGNVG_EXTLOG(...)   printf("- " __VA_ARGS__);
#define SGNVG_INTLOG(...)   printf("  - " __VA_ARGS__);
#define SG_DRAW(b, n, i) do { \
    printf("  -> sg_draw(base_element: %d, num_elements: %d, num_instances: %d)\n", b, n, i); \
    sg_draw(b, n, i); \
  } while (0)
#else
#define SGNVG_EXTLOG(...)
#define SGNVG_INTLOG(...)
#define SG_DRAW(b, n, i) sg_draw(b, n, i);
#endif

static void sgnvg__flushTexture(SGNVGtexture* tex) {
    SGNVG_INTLOG("sgnvg__flushTexture(%p -> tex->id: %d, tex->img: 0x%0X)\n", tex, tex->id, tex->img.id);
    sg_update_image(tex->img, &(sg_image_data){
        .mip_levels = {tex->imgData, tex->width * tex->height * (tex->type == NVG_TEXTURE_RGBA ? 4 : 1)},
    });
}

static SGNVGtexture* sgnvg__allocTexture(SGNVGcontext* sg)
{
    SGNVG_INTLOG("sgnvg__allocTexture(%p)\n", sg);
    SGNVGtexture* tex = NULL;
    int i;

    for (i = 0; i < sg->ntextures; i++) {
        if (sg->textures[i].id == 0) {
            tex = &sg->textures[i];
            break;
        }
    }
    if (tex == NULL) {
        if (sg->ntextures+1 > sg->ctextures) {
            SGNVGtexture* textures;
            int ctextures = sgnvg__maxi(sg->ntextures+1, 4) +  sg->ctextures/2; // 1.5x Overallocate
            textures = (SGNVGtexture*)realloc(sg->textures, sizeof(SGNVGtexture)*ctextures);
            if (textures == NULL) return NULL;
            sg->textures = textures;
            sg->ctextures = ctextures;
        }
        tex = &sg->textures[sg->ntextures++];
    }

    memset(tex, 0, sizeof(*tex));
    tex->id = ++sg->textureId;
    SGNVG_INTLOG("sgnvg__allocTexture(%p) -> %d\n", sg, tex->id);
    return tex;
}

static SGNVGtexture* sgnvg__findTexture(SGNVGcontext* sg, int id)
{
    SGNVG_INTLOG("sgnvg__findTexture(sg: %p, id: %d)\n", sg, id);
    int i;
    for (i = 0; i < sg->ntextures; i++)
        if (sg->textures[i].id == id)
            return &sg->textures[i];
    return NULL;
}

static int sgnvg__deleteTexture(SGNVGcontext* sg, int id)
{
    SGNVG_INTLOG("sgnvg__deleteTexture(sg: %p, id: %d)\n", sg, id);
    int i;
    for (i = 0; i < sg->ntextures; i++) {
        if (sg->textures[i].id == id) {
            if (sg->textures[i].img.id != 0 && (sg->textures[i].flags & NVG_IMAGE_NODELETE) == 0)
                sg_destroy_view(sg->textures[i].img_view);
                sg_destroy_image(sg->textures[i].img);
            free(sg->textures[i].imgData);
            memset(&sg->textures[i], 0, sizeof(sg->textures[i]));
            return 1;
        }
    }
    return 0;
}

static uint16_t sgnvg__getCombinedBlendNumber(sg_blend_state blend)
{
    SGNVG_INTLOG("sgnvg__getCombinedBlendNumber(%d, %d, %d, %d)\n", blend.src_factor_rgb, blend.dst_factor_rgb, blend.src_factor_alpha, blend.dst_factor_alpha);
#if __STDC_VERSION__ >= 201112L
    _Static_assert(_SG_BLENDFACTOR_NUM <= 17, "too many blend factors for 16-bit blend number");
#else
    assert(_SG_BLENDFACTOR_NUM <= 17);  // can be a _Static_assert
#endif
    return blend.src_factor_rgb | (blend.dst_factor_rgb << 4) | (blend.src_factor_alpha << 8) | (blend.dst_factor_alpha << 12);
}

static void sgnvg__initPipeline(SGNVGcontext* sg, sg_pipeline pip, const sg_stencil_state* stencil, sg_color_mask write_mask, sg_cull_mode cull_mode)
{
    SGNVG_INTLOG("sgnvg__initPipeline(sg: %p, pip: %d, stencil: %p, write_mask: %d, cull_mode: %d)\n", sg, pip.id, stencil, write_mask, cull_mode);
    sg_init_pipeline(pip, &(sg_pipeline_desc){
        .shader = sg->shader,
        .layout = {
            // .buffers[0] = {.stride = sizeof(SGNVGattribute)},
            .attrs = {
                [ATTR_nanovg_sg_vertex].format = SG_VERTEXFORMAT_FLOAT2,
                [ATTR_nanovg_sg_tcoord].format = SG_VERTEXFORMAT_FLOAT2,
            },
        },
        .stencil = *stencil,
        .colors[0] = {
            .write_mask = write_mask,
            .blend = sg->blend,
        },
        .primitive_type = SG_PRIMITIVETYPE_TRIANGLES,
        .index_type = SG_INDEXTYPE_UINT32,
        .cull_mode = cull_mode,
        .face_winding = SG_FACEWINDING_CCW,
        .label = "nanovg.pipeline",
    });
}

static bool sgnvg__pipelineTypeIsInUse(SGNVGcontext* sg, SGNVGpipelineType type)
{
    SGNVG_INTLOG("sgnvg__pipelineTypeIsInUse(sg: %p, type: %d)\n", sg, type);
    switch(type)
    {
    case SGNVG_PIP_BASE:
    case SGNVG_PIP_FILL_STENCIL:
    case SGNVG_PIP_FILL_DRAW:
        return true;
    case SGNVG_PIP_FILL_ANTIALIAS:
        return !!(sg->flags & NVG_ANTIALIAS);
    case SGNVG_PIP_STROKE_STENCIL_DRAW:
    case SGNVG_PIP_STROKE_STENCIL_ANTIALIAS:
    case SGNVG_PIP_STROKE_STENCIL_CLEAR:
        return !!(sg->flags & NVG_STENCIL_STROKES);

    case SGNVG_PIP_NUM_:    // to avoid warnings
        break; /* fall through to assert */
    }
    assert(0);
    return false;
}

static int sgnvg__getIndexFromCache(SGNVGcontext* sg, uint16_t blendNumber)
{
    SGNVG_INTLOG("sgnvg__getIndexFromCache(sg: %p, blendNumber: %d)\n", sg, blendNumber);
    uint16_t currentUse = sg->pipelineCache.currentUse;

    int maxAge = 0;
    int maxAgeIndex = 0;

    // find the correct cache entry for `blend_number`
    for(unsigned int i = 0; i < NANOVG_SG_PIPELINE_CACHE_SIZE; i++)
    {
        if(sg->pipelineCache.keys[i].blend == blendNumber)
        {
            sg->pipelineCache.keys[i].lastUse = sg->pipelineCache.currentUse;
            return i;
        }
        int age = (uint16_t)(currentUse - sg->pipelineCache.keys[i].lastUse);
        if(age > maxAge)
        {
            maxAge = age;
            maxAgeIndex = i;
        }
    }

    // not found; reuse an old one
    sg->pipelineCache.currentUse = ++currentUse;
    sg->pipelineCache.keys[maxAgeIndex].blend = blendNumber;
    sg->pipelineCache.keys[maxAgeIndex].lastUse = currentUse;

    sg_pipeline* pipelines = sg->pipelineCache.pipelines[maxAgeIndex];
    uint8_t pipelinesActive = sg->pipelineCache.pipelinesActive[maxAgeIndex];
    // we may have had data already initialized; deinit those
    for(uint32_t type = SGNVG_PIP_BASE; type < SGNVG_PIP_NUM_; type++)
        if(pipelinesActive & (1 << type))
            sg_uninit_pipeline(pipelines[type]);
    // mark all as inactive
    sg->pipelineCache.pipelinesActive[maxAgeIndex] = 0;
    return maxAgeIndex;
}

static sg_pipeline sgnvg__getPipelineFromCache(SGNVGcontext* sg, SGNVGpipelineType type)
{
    SGNVG_INTLOG("sgnvg__getPipelineFromCache(sg: %p, type: %d)\n", sg, type);
    assert(sgnvg__pipelineTypeIsInUse(sg, type));

    int pipelineCacheIndex = sg->pipelineCacheIndex;
    sg_pipeline pipeline = sg->pipelineCache.pipelines[pipelineCacheIndex][type];
    uint8_t typeMask = 1 << type;
    if(!(sg->pipelineCache.pipelinesActive[pipelineCacheIndex] & typeMask))
    {
        sg->pipelineCache.pipelinesActive[pipelineCacheIndex] |= typeMask;
        switch(type)
        {
        case SGNVG_PIP_BASE:
            sgnvg__initPipeline(sg, pipeline, &(sg_stencil_state){
                .enabled = false,
            }, SG_COLORMASK_RGBA, SG_CULLMODE_BACK);
            break;

        case SGNVG_PIP_FILL_STENCIL:
            sgnvg__initPipeline(sg, pipeline, &(sg_stencil_state){
                .enabled = true,
                .front = {.compare = SG_COMPAREFUNC_ALWAYS, .fail_op = SG_STENCILOP_KEEP, .depth_fail_op = SG_STENCILOP_KEEP, .pass_op = SG_STENCILOP_INCR_WRAP},
                .back = {.compare = SG_COMPAREFUNC_ALWAYS, .fail_op = SG_STENCILOP_KEEP, .depth_fail_op = SG_STENCILOP_KEEP, .pass_op = SG_STENCILOP_DECR_WRAP},
                .read_mask = 0xFF,
                .write_mask = 0xFF,
                .ref = 0,
            }, SG_COLORMASK_NONE, SG_CULLMODE_NONE);
            break;
        case SGNVG_PIP_FILL_ANTIALIAS:
            sgnvg__initPipeline(sg, pipeline, &(sg_stencil_state){
                .enabled = true,
                .front = {.compare = SG_COMPAREFUNC_EQUAL, .fail_op = SG_STENCILOP_KEEP, .depth_fail_op = SG_STENCILOP_KEEP, .pass_op = SG_STENCILOP_KEEP},
                .back = {.compare = SG_COMPAREFUNC_EQUAL, .fail_op = SG_STENCILOP_KEEP, .depth_fail_op = SG_STENCILOP_KEEP, .pass_op = SG_STENCILOP_KEEP},
                .read_mask = 0xFF,
                .write_mask = 0xFF,
                .ref = 0,
            }, SG_COLORMASK_RGBA, SG_CULLMODE_BACK);
            break;
        case SGNVG_PIP_FILL_DRAW:
            sgnvg__initPipeline(sg, pipeline, &(sg_stencil_state){
                .enabled = true,
                .front = {.compare = SG_COMPAREFUNC_NOT_EQUAL, .fail_op = SG_STENCILOP_ZERO, .depth_fail_op = SG_STENCILOP_ZERO, .pass_op = SG_STENCILOP_ZERO},
                .back = {.compare = SG_COMPAREFUNC_NOT_EQUAL, .fail_op = SG_STENCILOP_ZERO, .depth_fail_op = SG_STENCILOP_ZERO, .pass_op = SG_STENCILOP_ZERO},
                .read_mask = 0xFF,
                .write_mask = 0xFF,
                .ref = 0,
            }, SG_COLORMASK_RGBA, SG_CULLMODE_BACK);
            break;

        case SGNVG_PIP_STROKE_STENCIL_DRAW:
            sgnvg__initPipeline(sg, pipeline, &(sg_stencil_state){
                .enabled = true,
                .front = {.compare = SG_COMPAREFUNC_EQUAL, .fail_op = SG_STENCILOP_KEEP, .depth_fail_op = SG_STENCILOP_KEEP, .pass_op = SG_STENCILOP_INCR_CLAMP},
                .back = {.compare = SG_COMPAREFUNC_EQUAL, .fail_op = SG_STENCILOP_KEEP, .depth_fail_op = SG_STENCILOP_KEEP, .pass_op = SG_STENCILOP_INCR_CLAMP},
                .read_mask = 0xFF,
                .write_mask = 0xFF,
                .ref = 0,
            }, SG_COLORMASK_RGBA, SG_CULLMODE_BACK);
            break;
        case SGNVG_PIP_STROKE_STENCIL_ANTIALIAS:
            sgnvg__initPipeline(sg, pipeline, &(sg_stencil_state){
                .enabled = true,
                .front = {.compare = SG_COMPAREFUNC_EQUAL, .fail_op = SG_STENCILOP_KEEP, .depth_fail_op = SG_STENCILOP_KEEP, .pass_op = SG_STENCILOP_KEEP},
                .back = {.compare = SG_COMPAREFUNC_EQUAL, .fail_op = SG_STENCILOP_KEEP, .depth_fail_op = SG_STENCILOP_KEEP, .pass_op = SG_STENCILOP_KEEP},
                .read_mask = 0xFF,
                .write_mask = 0xFF,
                .ref = 0,
            }, SG_COLORMASK_RGBA, SG_CULLMODE_BACK);
            break;
        case SGNVG_PIP_STROKE_STENCIL_CLEAR:
            sgnvg__initPipeline(sg, pipeline, &(sg_stencil_state){
                .enabled = true,
                .front = {.compare = SG_COMPAREFUNC_ALWAYS, .fail_op = SG_STENCILOP_ZERO, .depth_fail_op = SG_STENCILOP_ZERO, .pass_op = SG_STENCILOP_ZERO},
                .back = {.compare = SG_COMPAREFUNC_ALWAYS, .fail_op = SG_STENCILOP_ZERO, .depth_fail_op = SG_STENCILOP_ZERO, .pass_op = SG_STENCILOP_ZERO},
                .read_mask = 0xFF,
                .write_mask = 0xFF,
                .ref = 0,
            }, SG_COLORMASK_NONE, SG_CULLMODE_BACK);
            break;

        default:
            assert(0);
        }
    }
    return pipeline;
}

static SGNVGfragUniforms* nvg__fragUniformPtr(SGNVGcontext* gl, int i);

static void sgnvg__setUniforms(SGNVGcontext* sg, int uniformOffset, int image)
{
    SGNVG_INTLOG("sgnvg__setUniforms(sg: %p, uniformOffset: %d, image: %d)\n", sg, uniformOffset, image);
    SGNVGtexture* tex = NULL;
    SGNVGfragUniforms* frag = nvg__fragUniformPtr(sg, uniformOffset);
    sg_apply_uniforms(UB_nanovg_viewSize, &(sg_range){ &sg->view, sizeof(sg->view) });
    sg_apply_uniforms(UB_nanovg_frag, &(sg_range){ frag, sizeof(*frag) });

    if (image != 0) {
        tex = sgnvg__findTexture(sg, image);
    }
    // If no image is set, use empty texture
    if (tex == NULL) {
        tex = sgnvg__findTexture(sg, sg->dummyTex);
    }
    sg_apply_bindings(&(sg_bindings){
        .vertex_buffers[0] = sg->vertBuf,
        .index_buffer = sg->indexBuf,
        .views[VIEW_nanovg_tex] = tex ? tex->img_view : (sg_view){0},
        .samplers[SMP_nanovg_smp] = tex ? tex->smp : (sg_sampler){0},
    });
}

static void sgnvg__preparePipelineUniforms(SGNVGcontext* sg, SGNVGpipelineType pipelineType, int uniformOffset, int image)
{
    SGNVG_INTLOG("sgnvg__preparePipelineUniforms(sg: %p, pipelineType: %d, uniformOffset: %d, image: %d)\n", sg, pipelineType, uniformOffset, image);
    sg_pipeline pip = sgnvg__getPipelineFromCache(sg, pipelineType);
    sg_apply_pipeline(pip);
    sgnvg__setUniforms(sg, uniformOffset, image);
}

#define NANOVG_SG_TOSTRING_(X)  #X
#define NANOVG_SG_TOSTRING(X)   NANOVG_SG_TOSTRING_(X)

static int sgnvg__renderCreateTexture(void* uptr, int type, int w, int h, int imageFlags, const unsigned char* data);

static int sgnvg__renderCreate(void* uptr)
{
    SGNVG_EXTLOG("sgnvg__renderCreate(uptr: %p)\n", uptr);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    int align = 4;

    if(sg->flags & NVG_ANTIALIAS)
        sg->shader = sg_make_shader(nanovg_aa_sg_shader_desc(sg_query_backend()));
    else
        sg->shader = sg_make_shader(nanovg_sg_shader_desc(sg_query_backend()));
    for(int i = 0; i < NANOVG_SG_PIPELINE_CACHE_SIZE; i++)
    {
        for(uint32_t t = 0; t < SGNVG_PIP_NUM_; t++)
        {
            // only allocate pipelines if correct flags are set
            if(!sgnvg__pipelineTypeIsInUse(sg, (SGNVGpipelineType)t))
                continue;
            sg->pipelineCache.pipelines[i][t] = sg_alloc_pipeline();
        }
    }

    sg->blend = (sg_blend_state){
        .enabled = true,
        .src_factor_rgb = SG_BLENDFACTOR_ZERO,
        .dst_factor_rgb = SG_BLENDFACTOR_ZERO,
        .op_rgb = SG_BLENDOP_ADD,
        .src_factor_alpha = SG_BLENDFACTOR_ZERO,
        .dst_factor_alpha = SG_BLENDFACTOR_ZERO,
        .op_alpha = SG_BLENDOP_ADD,
    };

    sg->vertBuf = sg_alloc_buffer();
    sg->indexBuf = sg_alloc_buffer();

    sg->fragSize = sizeof(SGNVGfragUniforms) + (align - sizeof(SGNVGfragUniforms) % align) % align;

    // Some platforms does not allow to have samples to unset textures.
    // Create empty one which is bound when there's no texture specified.
    sg->dummyTex = sgnvg__renderCreateTexture(sg, NVG_TEXTURE_ALPHA, 1, 1, 0, NULL);

    return 1;
}

static int sgnvg__renderCreateTexture(void* uptr, int type, int w, int h, int imageFlags, const unsigned char* data)
{
    SGNVG_EXTLOG("sgnvg__renderCreateTexture(uptr: %p, type: %d, w: %d, h: %d, imageFlags: %d, data: %p)\n",uptr, type, w, h, imageFlags, data);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    SGNVGtexture* tex = sgnvg__allocTexture(sg);

    if (tex == NULL) return 0;

#ifdef SOKOL_GLES2
    // Check for non-power of 2.
    if (sgnvg__nearestPow2(w) != (unsigned int)w || sgnvg__nearestPow2(h) != (unsigned int)h) {
        // No repeat
        if ((imageFlags & NVG_IMAGE_REPEATX) != 0 || (imageFlags & NVG_IMAGE_REPEATY) != 0) {
            printf("Repeat X/Y is not supported for non power-of-two textures (%d x %d)\n", w, h);
            imageFlags &= ~(NVG_IMAGE_REPEATX | NVG_IMAGE_REPEATY);
        }
        // No mips.
        if (imageFlags & NVG_IMAGE_GENERATE_MIPMAPS) {
            printf("Mip-maps is not support for non power-of-two textures (%d x %d)\n", w, h);
            imageFlags &= ~NVG_IMAGE_GENERATE_MIPMAPS;
        }
    }
#endif
    assert(!(imageFlags & NVG_IMAGE_GENERATE_MIPMAPS) &&  "TODO mipmaps");

    // if we have mipmaps, we forbid updating
    bool immutable = !!(imageFlags & NVG_IMAGE_GENERATE_MIPMAPS) && data;

    tex->width = w;
    tex->height = h;
    tex->type = type;
    tex->flags = imageFlags;
    sg_image_data imageData = {
        // TODO mipmaps
        .mip_levels = {data, w * h * (type == NVG_TEXTURE_RGBA ? 4 : 1)},
    };
    tex->img = sg_make_image(&(sg_image_desc){
        .type = SG_IMAGETYPE_2D,
        //.render_target
        .width = w,
        .height = h,
        .num_mipmaps = 1,   // TODO mipmaps
        .usage.immutable = immutable,
        .usage.dynamic_update = !immutable,
        .pixel_format = type == NVG_TEXTURE_RGBA ? SG_PIXELFORMAT_RGBA8 : SG_PIXELFORMAT_R8,
        .data = ((imageFlags & NVG_IMAGE_GENERATE_MIPMAPS) && data) ? imageData : (sg_image_data){.mip_levels = {NULL, 0}},
        .label = "nanovg.image[]",
    });
    tex->imgData = malloc(w * h * (type == NVG_TEXTURE_RGBA ? 4 : 1));
    if (data != NULL) {
        memcpy(tex->imgData, data, w * h * (type == NVG_TEXTURE_RGBA ? 4 : 1));
    }

    tex->img_view = sg_make_view(&(sg_view_desc){
        .texture.image = tex->img,
    });

    tex->smp = sg_make_sampler(&(sg_sampler_desc){
        .min_filter = imageFlags & NVG_IMAGE_GENERATE_MIPMAPS
            ? _SG_FILTER_DEFAULT
            : (imageFlags & NVG_IMAGE_NEAREST ? SG_FILTER_NEAREST : SG_FILTER_LINEAR),
        .mipmap_filter = imageFlags & NVG_IMAGE_GENERATE_MIPMAPS
            ? (imageFlags & NVG_IMAGE_NEAREST ? SG_FILTER_NEAREST : SG_FILTER_LINEAR)
            : _SG_FILTER_DEFAULT,
        .mag_filter = imageFlags & NVG_IMAGE_NEAREST ? SG_FILTER_NEAREST : SG_FILTER_LINEAR,
        .wrap_u = imageFlags & NVG_IMAGE_REPEATX ? SG_WRAP_REPEAT : SG_WRAP_CLAMP_TO_EDGE,
        .wrap_v = imageFlags & NVG_IMAGE_REPEATY ? SG_WRAP_REPEAT : SG_WRAP_CLAMP_TO_EDGE,
    });

    return tex->id;
}

static int sgnvg__renderDeleteTexture(void* uptr, int image)
{
    SGNVG_EXTLOG("sgnvg__renderDeleteTexture(uptr: %p, image: %d)\n", uptr, image);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    return sgnvg__deleteTexture(sg, image);
}

static int sgnvg__renderUpdateTexture(void* uptr, int image, int x0, int y0, int w, int h, const unsigned char* data)
{
    SGNVG_EXTLOG("sgnvg__renderUpdateTexture(uptr: %p, image: %d, x0: %d, y0: %d, w: %d, h: %d, data: %p)\n", uptr, image, x0, y0, w, h, data);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    SGNVGtexture* tex = sgnvg__findTexture(sg, image);

    if (tex == NULL) return 0;

    if (tex->imgData) {
        // this is really weird but nanogl_gl.h is doing the same
        // somehow we always get a whole row or so? o_O
        x0 = 0;
        w = tex->width;

        size_t bytePerPixel = 1;
        if (tex->type == NVG_TEXTURE_RGBA) {
            bytePerPixel = 4;
        }
        size_t srcLineInBytes = w * bytePerPixel;
        size_t dstLineInBytes = tex->width * bytePerPixel;
        const unsigned char* src = data + y0 * srcLineInBytes;
        unsigned char* dst = tex->imgData + y0 * dstLineInBytes + x0 * bytePerPixel;

        for (int y=0; y<h; y++) {
            memcpy(dst, src, srcLineInBytes);
            src += srcLineInBytes;
            dst += dstLineInBytes;
        }
    }

    return 1;
}

static int sgnvg__renderGetTextureSize(void* uptr, int image, int* w, int* h)
{
    SGNVG_EXTLOG("sgnvg__renderGetTextureSize(uptr: %p, image: %d, w: %d, h: %d)\n", uptr, image, *w, *h);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    SGNVGtexture* tex = sgnvg__findTexture(sg, image);
    if (tex == NULL) return 0;
    *w = tex->width;
    *h = tex->height;
    return 1;
}

static void sgnvg__xformToMat3x4(float* m3, float* t)
{
    SGNVG_INTLOG("sgnvg__xformToMat3x4(m3: %p, t: %p)\n", m3, t);
    m3[0] = t[0];
    m3[1] = t[1];
    m3[2] = 0.0f;
    m3[3] = 0.0f;
    m3[4] = t[2];
    m3[5] = t[3];
    m3[6] = 0.0f;
    m3[7] = 0.0f;
    m3[8] = t[4];
    m3[9] = t[5];
    m3[10] = 1.0f;
    m3[11] = 0.0f;
}

static NVGcolor sgnvg__premulColor(NVGcolor c)
{
    SGNVG_INTLOG("sgnvg__premulColor(c: %f, %f, %f, %f)\n", c.r, c.g, c.b, c.a);
    c.r *= c.a;
    c.g *= c.a;
    c.b *= c.a;
    return c;
}

static int sgnvg__convertPaint(SGNVGcontext* sg, SGNVGfragUniforms* frag, NVGpaint* paint,
                               NVGscissor* scissor, float width, float fringe, float strokeThr)
{
    SGNVG_INTLOG("sgnvg__convertPaint(sg: %p, frag: %p, paint: %p, scissor: %p, width: %f, fringe: %f, strokeThr: %f)\n", sg, frag, paint, scissor, width, fringe, strokeThr);
    SGNVGtexture* tex = NULL;
    float invxform[6];

    memset(frag, 0, sizeof(*frag));

    frag->innerCol = sgnvg__premulColor(paint->innerColor);
    frag->outerCol = sgnvg__premulColor(paint->outerColor);

    if (scissor->extent[0] < -0.5f || scissor->extent[1] < -0.5f) {
        memset(frag->scissorMat, 0, sizeof(frag->scissorMat));
        frag->scissorExt[0] = 1.0f;
        frag->scissorExt[1] = 1.0f;
        frag->scissorScale[0] = 1.0f;
        frag->scissorScale[1] = 1.0f;
    } else {
        nvgTransformInverse(invxform, scissor->xform);
        sgnvg__xformToMat3x4(frag->scissorMat, invxform);
        frag->scissorExt[0] = scissor->extent[0];
        frag->scissorExt[1] = scissor->extent[1];
        frag->scissorScale[0] = sqrtf(scissor->xform[0]*scissor->xform[0] + scissor->xform[2]*scissor->xform[2]) / fringe;
        frag->scissorScale[1] = sqrtf(scissor->xform[1]*scissor->xform[1] + scissor->xform[3]*scissor->xform[3]) / fringe;
    }

    memcpy(frag->extent, paint->extent, sizeof(frag->extent));
    frag->strokeMult = (width*0.5f + fringe*0.5f) / fringe;
    frag->strokeThr = strokeThr;

    if (paint->image != 0) {
        tex = sgnvg__findTexture(sg, paint->image);
        if (tex == NULL) return 0;
        if ((tex->flags & NVG_IMAGE_FLIPY) != 0) {
            float m1[6], m2[6];
            nvgTransformTranslate(m1, 0.0f, frag->extent[1] * 0.5f);
            nvgTransformMultiply(m1, paint->xform);
            nvgTransformScale(m2, 1.0f, -1.0f);
            nvgTransformMultiply(m2, m1);
            nvgTransformTranslate(m1, 0.0f, -frag->extent[1] * 0.5f);
            nvgTransformMultiply(m1, m2);
            nvgTransformInverse(invxform, m1);
        } else {
            nvgTransformInverse(invxform, paint->xform);
        }
        frag->type = NSVG_SHADER_FILLIMG;

        #if NANOVG_GL_USE_UNIFORMBUFFER
        if (tex->type == NVG_TEXTURE_RGBA)
            frag->texType = (tex->flags & NVG_IMAGE_PREMULTIPLIED) ? 0 : 1;
        else
            frag->texType = 2;
        #else
        if (tex->type == NVG_TEXTURE_RGBA)
            frag->texType = (tex->flags & NVG_IMAGE_PREMULTIPLIED) ? 0.0f : 1.0f;
        else
            frag->texType = 2.0f;
        #endif
//		printf("frag->texType = %d\n", frag->texType);
    } else {
        frag->type = NSVG_SHADER_FILLGRAD;
        frag->radius = paint->radius;
        frag->feather = paint->feather;
        nvgTransformInverse(invxform, paint->xform);
    }

    sgnvg__xformToMat3x4(frag->paintMat, invxform);

    return 1;
}

static void sgnvg__renderViewport(void* uptr, float width, float height, float devicePixelRatio)
{
    SGNVG_EXTLOG("sgnvg__renderViewport(uptr: %p, width: %f, height: %f, devicePixelRatio: %f)\n", uptr, width, height, devicePixelRatio);
    NVG_NOTUSED(devicePixelRatio);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    sg->view.viewSize[0] = width;
    sg->view.viewSize[1] = height;
}

static void sgnvg__fill(SGNVGcontext* sg, SGNVGcall* call)
{
    SGNVG_INTLOG("sgnvg__fill(sg: %p, call: %p)\n", sg, call);
    SGNVGpath* paths = &sg->paths[call->pathOffset];
    int i, npaths = call->pathCount;

    sgnvg__preparePipelineUniforms(sg, SGNVG_PIP_FILL_STENCIL, call->uniformOffset, 0);
    for (i = 0; i < npaths; i++)
        SG_DRAW(paths[i].fillOffset, paths[i].fillCount, 1);

    if (sg->flags & NVG_ANTIALIAS) {
        sgnvg__preparePipelineUniforms(sg, SGNVG_PIP_FILL_ANTIALIAS, call->uniformOffset + sg->fragSize, call->image);
        // Draw fringes
        for (i = 0; i < npaths; i++)
            SG_DRAW(paths[i].strokeOffset, paths[i].strokeCount, 1);
    }

    // Draw fill
    sgnvg__preparePipelineUniforms(sg, SGNVG_PIP_FILL_DRAW, call->uniformOffset + sg->fragSize, call->image);
    SG_DRAW(call->triangleOffset, call->triangleCount, 1);
}

static void sgnvg__convexFill(SGNVGcontext* sg, SGNVGcall* call)
{
    SGNVG_INTLOG("sgnvg__convexFill(sg: %p, call: %p)\n", sg, call);
    SGNVGpath* paths = &sg->paths[call->pathOffset];
    int i, npaths = call->pathCount;

    sgnvg__preparePipelineUniforms(sg, SGNVG_PIP_BASE, call->uniformOffset, call->image);
    for (i = 0; i < npaths; i++) {
        SG_DRAW(paths[i].fillOffset, paths[i].fillCount, 1);
        // Draw fringes
        if (paths[i].strokeCount > 0) {
            SG_DRAW(paths[i].strokeOffset, paths[i].strokeCount, 1);
        }
    }
}

static void sgnvg__stroke(SGNVGcontext* sg, SGNVGcall* call)
{
    SGNVG_INTLOG("sgnvg__stroke(sg: %p, call: %p)\n", sg, call);
    SGNVGpath* paths = &sg->paths[call->pathOffset];
    int npaths = call->pathCount, i;

    if (sg->flags & NVG_STENCIL_STROKES) {
        sgnvg__preparePipelineUniforms(sg, SGNVG_PIP_STROKE_STENCIL_DRAW, call->uniformOffset + sg->fragSize, call->image);
        for (i = 0; i < npaths; i++)
            SG_DRAW(paths[i].strokeOffset, paths[i].strokeCount, 1);

        // Draw anti-aliased pixels.
        sgnvg__preparePipelineUniforms(sg, SGNVG_PIP_STROKE_STENCIL_ANTIALIAS, call->uniformOffset, call->image);
        for (i = 0; i < npaths; i++)
            SG_DRAW(paths[i].strokeOffset, paths[i].strokeCount, 1);

        // Clear stencil buffer.
        sgnvg__preparePipelineUniforms(sg, SGNVG_PIP_STROKE_STENCIL_CLEAR, call->uniformOffset, 0);
        for (i = 0; i < npaths; i++)
            SG_DRAW(paths[i].strokeOffset, paths[i].strokeCount, 1);

//		sgnvg__convertPaint(sg, nvg__fragUniformPtr(sg, call->uniformOffset + sg->fragSize), paint, scissor, strokeWidth, fringe, 1.0f - 0.5f/255.0f);

    } else {
        sgnvg__preparePipelineUniforms(sg, SGNVG_PIP_BASE, call->uniformOffset, call->image);
        // Draw Strokes
        for (i = 0; i < npaths; i++)
            SG_DRAW(paths[i].strokeOffset, paths[i].strokeCount, 1);
    }
}

static void sgnvg__triangles(SGNVGcontext* sg, SGNVGcall* call)
{
    SGNVG_INTLOG("sgnvg__triangles(sg: %p, call: %p)\n", sg, call);
    sgnvg__preparePipelineUniforms(sg, SGNVG_PIP_BASE, call->uniformOffset, call->image);
    SG_DRAW(call->triangleOffset, call->triangleCount, 1);
}

static void sgnvg__renderCancel(void* uptr) {
    SGNVG_EXTLOG("sgnvg__renderCancel(uptr: %p)\n", uptr);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    sg->nverts = 0;
    sg->npaths = 0;
    sg->ncalls = 0;
    sg->nuniforms = 0;
}

static sg_blend_factor sgnvg_convertBlendFuncFactor(int factor)
{
    if (factor == NVG_ZERO)
        return SG_BLENDFACTOR_ZERO;
    if (factor == NVG_ONE)
        return SG_BLENDFACTOR_ONE;
    if (factor == NVG_SRC_COLOR)
        return SG_BLENDFACTOR_SRC_COLOR;
    if (factor == NVG_ONE_MINUS_SRC_COLOR)
        return SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR;
    if (factor == NVG_DST_COLOR)
        return SG_BLENDFACTOR_DST_COLOR;
    if (factor == NVG_ONE_MINUS_DST_COLOR)
        return SG_BLENDFACTOR_ONE_MINUS_DST_COLOR;
    if (factor == NVG_SRC_ALPHA)
        return SG_BLENDFACTOR_SRC_ALPHA;
    if (factor == NVG_ONE_MINUS_SRC_ALPHA)
        return SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA;
    if (factor == NVG_DST_ALPHA)
        return SG_BLENDFACTOR_DST_ALPHA;
    if (factor == NVG_ONE_MINUS_DST_ALPHA)
        return SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA;
    if (factor == NVG_SRC_ALPHA_SATURATE)
        return SG_BLENDFACTOR_SRC_ALPHA_SATURATED;
    return _SG_BLENDFACTOR_DEFAULT;
}

static SGNVGblend sgnvg__blendCompositeOperation(NVGcompositeOperationState op)
{
    SGNVG_INTLOG("sgnvg__blendCompositeOperation(op: (%d, %d, %d, %d))\n", op.srcRGB, op.dstRGB, op.srcAlpha, op.dstAlpha);
    SGNVGblend blend;
    blend.srcRGB = sgnvg_convertBlendFuncFactor(op.srcRGB);
    blend.dstRGB = sgnvg_convertBlendFuncFactor(op.dstRGB);
    blend.srcAlpha = sgnvg_convertBlendFuncFactor(op.srcAlpha);
    blend.dstAlpha = sgnvg_convertBlendFuncFactor(op.dstAlpha);
    if (blend.srcRGB == _SG_BLENDFACTOR_DEFAULT || blend.dstRGB == _SG_BLENDFACTOR_DEFAULT || blend.srcAlpha == _SG_BLENDFACTOR_DEFAULT || blend.dstAlpha == _SG_BLENDFACTOR_DEFAULT)
    {
        blend.srcRGB = SG_BLENDFACTOR_ONE;
        blend.dstRGB = SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA;
        blend.srcAlpha = SG_BLENDFACTOR_ONE;
        blend.dstAlpha = SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA;
    }
    return blend;
}

static void sgnvg__renderFlush(void* uptr)
{
    SGNVG_EXTLOG("sgnvg__renderFlush(uptr: %p)\n", uptr);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    int i;

    for (i = 0; i < sg->ntextures; i++) {
        if (sg->textures[i].id != 0) {
            sgnvg__flushTexture(&sg->textures[i]);
        }
    }

    if (sg->ncalls > 0 && sg->nverts && sg->nindexes) {
        if(sg->cverts_gpu < sg->nverts) // resize GPU vertex buffer
        {
            if(sg->cverts_gpu)      // delete old buffer if necessary
                sg_uninit_buffer(sg->vertBuf);
            sg->cverts_gpu = sg->cverts;
            sg_init_buffer(sg->vertBuf, &(sg_buffer_desc){
                .size = sg->cverts_gpu * sizeof(*sg->verts),
                .usage.vertex_buffer = true,
                .usage.dynamic_update = true,
                .label = "nanovg.vertBuf",
            });
        }
        // upload vertex data
        sg_update_buffer(sg->vertBuf, &(sg_range){ sg->verts, sg->nverts * sizeof(*sg->verts) });

        if(sg->cindexes_gpu < sg->nindexes) // resize GPU index buffer
        {
            if(sg->cindexes_gpu)    // delete old buffer if necessary
                sg_uninit_buffer(sg->indexBuf);
            sg->cindexes_gpu = sg->cindexes;
            sg_init_buffer(sg->indexBuf, &(sg_buffer_desc){
                .size = sg->cindexes_gpu * sizeof(*sg->indexes),
                .usage.index_buffer = true,
                .usage.dynamic_update = true,
                .label = "nanovg.indexBuf",
            });
        }
        // upload index data
        sg_update_buffer(sg->indexBuf, &(sg_range){ sg->indexes, sg->nindexes * sizeof(*sg->indexes) });

        for (i = 0; i < sg->ncalls; i++) {
            SGNVGcall* call = &sg->calls[i];
            sg->blend.src_factor_rgb = call->blendFunc.srcRGB;
            sg->blend.dst_factor_rgb = call->blendFunc.dstRGB;
            sg->blend.src_factor_alpha = call->blendFunc.srcAlpha;
            sg->blend.dst_factor_alpha = call->blendFunc.dstAlpha;
            sg->pipelineCacheIndex = sgnvg__getIndexFromCache(sg, sgnvg__getCombinedBlendNumber(sg->blend));
            if (call->type == SGNVG_FILL)
                sgnvg__fill(sg, call);
            else if (call->type == SGNVG_CONVEXFILL)
                sgnvg__convexFill(sg, call);
            else if (call->type == SGNVG_STROKE)
                sgnvg__stroke(sg, call);
            else if (call->type == SGNVG_TRIANGLES)
                sgnvg__triangles(sg, call);
        }

        //sg_uninit_pipeline(sg->pipeline);
        //sgnvg__initPipeline(sg, &(sg_stencil_state){0}, SG_COLORMASK_RGBA, SG_CULLMODE_NONE);
    }

    // Reset calls
    sg->nverts = 0;
    sg->nindexes = 0;
    sg->npaths = 0;
    sg->ncalls = 0;
    sg->nuniforms = 0;
}

static int sgnvg__maxVertCount(const NVGpath* paths, int npaths)
{
    SGNVG_INTLOG("sgnvg__maxVertCount(paths: %p, npaths: %d)\n", paths, npaths);
    int i, count = 0;
    for (i = 0; i < npaths; i++) {
        count += paths[i].nfill;
        count += paths[i].nstroke;
    }
    return count;
}

static int sgnvg__maxIndexCount(const NVGpath* paths, int npaths)
{
    SGNVG_INTLOG("sgnvg__maxIndexCount(paths: %p, npaths: %d)\n", paths, npaths);
    int i, count = 0;
    for (i = 0; i < npaths; i++) {
        count += sgnvg__maxi(paths[i].nfill - 2, 0) * 3;      // triangle fan
        count += sgnvg__maxi(paths[i].nstroke - 2, 0) * 3;    // triangle strip
    }
    return count;
}

static SGNVGcall* sgnvg__allocCall(SGNVGcontext* sg)
{
    SGNVG_INTLOG("sgnvg__allocCall(sg: %p)\n", sg);
    SGNVGcall* ret = NULL;
    if (sg->ncalls+1 > sg->ccalls) {
        SGNVGcall* calls;
        int ccalls = sgnvg__maxi(sg->ncalls+1, 128) + sg->ccalls/2; // 1.5x Overallocate
        calls = (SGNVGcall*)realloc(sg->calls, sizeof(SGNVGcall) * ccalls);
        if (calls == NULL) return NULL;
        sg->calls = calls;
        sg->ccalls = ccalls;
    }
    ret = &sg->calls[sg->ncalls++];
    memset(ret, 0, sizeof(SGNVGcall));
    return ret;
}

static int sgnvg__allocPaths(SGNVGcontext* sg, int n)
{
    SGNVG_INTLOG("sgnvg__allocPaths(sg: %p, n: %d)\n", sg, n);
    int ret = 0;
    if (sg->npaths+n > sg->cpaths) {
        SGNVGpath* paths;
        int cpaths = sgnvg__maxi(sg->npaths + n, 128) + sg->cpaths/2; // 1.5x Overallocate
        paths = (SGNVGpath*)realloc(sg->paths, sizeof(SGNVGpath) * cpaths);
        if (paths == NULL) return -1;
        sg->paths = paths;
        sg->cpaths = cpaths;
    }
    ret = sg->npaths;
    sg->npaths += n;
    return ret;
}

static int sgnvg__allocVerts(SGNVGcontext* sg, int n)
{
    SGNVG_INTLOG("sgnvg__allocVerts(sg: %p, n: %d)\n", sg, n);
    int ret = 0;
    if (sg->nverts+n > sg->cverts) {
        SGNVGattribute* verts;
        int cverts = sgnvg__maxi(sg->nverts + n, 4096) + sg->cverts/2; // 1.5x Overallocate
        verts = (SGNVGattribute*)realloc(sg->verts, sizeof(SGNVGattribute) * cverts);
        if (verts == NULL) return -1;
        sg->verts = verts;
        sg->cverts = cverts;
    }
    ret = sg->nverts;
    sg->nverts += n;
    return ret;
}

static int sgnvg__allocIndexes(SGNVGcontext* sg, int n)
{
    SGNVG_INTLOG("sgnvg__allocIndexes(sg: %p, n: %d)\n", sg, n);
    int ret = 0;
    if (sg->nindexes+n > sg->cindexes) {
        uint32_t* indexes;
        int cindexes = sgnvg__maxi(sg->nindexes + n, 4096) + sg->cindexes/2; // 1.5x Overallocate
        indexes = (uint32_t*)realloc(sg->indexes, sizeof(uint32_t) * cindexes);
        if (indexes == NULL) return -1;
        sg->indexes = indexes;
        sg->cindexes = cindexes;
    }
    ret = sg->nindexes;
    sg->nindexes += n;
    return ret;
}

static int sgnvg__allocFragUniforms(SGNVGcontext* sg, int n)
{
    SGNVG_INTLOG("sgnvg__allocFragUniforms(sg: %p, n: %d)\n", sg, n);
    int ret = 0, structSize = sg->fragSize;
    if (sg->nuniforms+n > sg->cuniforms) {
        unsigned char* uniforms;
        int cuniforms = sgnvg__maxi(sg->nuniforms+n, 128) + sg->cuniforms/2; // 1.5x Overallocate
        uniforms = (unsigned char*)realloc(sg->uniforms, structSize * cuniforms);
        if (uniforms == NULL) return -1;
        sg->uniforms = uniforms;
        sg->cuniforms = cuniforms;
    }
    ret = sg->nuniforms * structSize;
    sg->nuniforms += n;
    return ret;
}

static SGNVGfragUniforms* nvg__fragUniformPtr(SGNVGcontext* gl, int i)
{
    SGNVG_INTLOG("nvg__fragUniformPtr(gl: %p, i: %d)\n", gl, i);
    return (SGNVGfragUniforms*)&gl->uniforms[i];
}

static void sgnvg__vset(SGNVGattribute* vtx, float x, float y, float u, float v)
{
    SGNVG_INTLOG("sgnvg__vset(vtx: %p, x: %f, y: %f, u: %f, v: %f)\n", vtx, x, y, u, v);
    vtx->vertex[0] = x;
    vtx->vertex[1] = y;
    vtx->tcoord[0] = u;
    vtx->tcoord[1] = v;
}

static void sgnvg__generateTriangleFanIndexes(uint32_t* indexes, int offset, int nverts)
{
    SGNVG_INTLOG("sgnvg__generateTriangleFanIndexes(indexes: %p, offset: %d, nverts: %d)\n", indexes, offset, nverts);
    // following triangles all use starting vertex, previous vertex, and current vertex
    for(int i = 2; i < nverts; i++)
    {
        indexes[3*(i-2)+0] = offset+0;
        indexes[3*(i-2)+1] = offset+i-1;
        indexes[3*(i-2)+2] = offset+i;
    }
}

static void sgnvg__generateTriangleStripIndexes(uint32_t* indexes, int offset, int nverts)
{
    SGNVG_INTLOG("sgnvg__generateTriangleStripIndexes(indexes: %p, offset: %d, nverts: %d)\n", indexes, offset, nverts);
    // following triangles all use previous 2 vertices, and current vertex
    // we use bit-shifts to get the sequence:
    // i  idx i(bits)   i-1(bits)   i-2(bits)
    // 2: 012 0010      0001        0000
    // 3: 213 0011      0010        0001
    // 4: 234 0100      0011        0010
    // 5: 435 0101      0100        0011
    // 6: 456 0110      0101        0100
    // 7: 657 0111      0110        0101
    //                  first index = above & ~1 = floor_to_even(i-1)
    //                              second index = above | 1 = ceil_to_even(i-2)
    // all this trickery ensures that we maintain correct (CCW) vertex order
    for(int i = 2; i < nverts; i++)
    {
        indexes[3*(i-2)+0] = offset+((i-1)&~1);
        indexes[3*(i-2)+1] = offset+((i-2)|1);
        indexes[3*(i-2)+2] = offset+i;
    }
}

static void sgnvg__renderFill(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, float fringe,
                              const float* bounds, const NVGpath* paths, int npaths)
{
    SGNVG_EXTLOG("sgnvg__renderFill(uptr: %p, paint: %p, compositeOperation: (%d, %d, %d, %d), scissor: %p, fringe: %f, bounds: %f, paths: %p, npaths: %d)\n", uptr, paint, compositeOperation.srcRGB, compositeOperation.dstRGB, compositeOperation.srcAlpha, compositeOperation.dstAlpha, scissor, fringe, *bounds, paths, npaths);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    SGNVGcall* call = sgnvg__allocCall(sg);
    SGNVGattribute* quad;
    SGNVGfragUniforms* frag;
    int i, maxverts, offset, maxindexes, ioffset;

    if (call == NULL) return;

    call->type = SGNVG_FILL;
    call->triangleCount = 4;
    call->pathOffset = sgnvg__allocPaths(sg, npaths);
    if (call->pathOffset == -1) goto error;
    call->pathCount = npaths;
    call->image = paint->image;
    call->blendFunc = sgnvg__blendCompositeOperation(compositeOperation);

    if (npaths == 1 && paths[0].convex)
    {
        call->type = SGNVG_CONVEXFILL;
        call->triangleCount = 0;	// Bounding box fill quad not needed for convex fill
    }

    // Allocate vertices for all the paths.
    maxverts = sgnvg__maxVertCount(paths, npaths) + call->triangleCount;
    offset = sgnvg__allocVerts(sg, maxverts);
    if (offset == -1) goto error;
    maxindexes = sgnvg__maxIndexCount(paths, npaths) + sgnvg__maxi(call->triangleCount - 2, 0) * 3;
    ioffset = sgnvg__allocIndexes(sg, maxindexes);
    if (ioffset == -1) goto error;

    for (i = 0; i < npaths; i++) {
        SGNVGpath* copy = &sg->paths[call->pathOffset + i];
        const NVGpath* path = &paths[i];
        memset(copy, 0, sizeof(SGNVGpath));
        if (path->nfill > 0) {
            // fill: triangle fan
            copy->fillOffset = ioffset;
            copy->fillCount = (path->nfill - 2) * 3;
            memcpy(&sg->verts[offset], path->fill, sizeof(NVGvertex) * path->nfill);
            sgnvg__generateTriangleFanIndexes(&sg->indexes[ioffset], offset, path->nfill);
            offset += path->nfill;
            ioffset += copy->fillCount;
        }
        if (path->nstroke > 0) {
            // stroke: triangle strip
            copy->strokeOffset = ioffset;
            copy->strokeCount = (path->nstroke - 2) * 3;
            memcpy(&sg->verts[offset], path->stroke, sizeof(NVGvertex) * path->nstroke);
            sgnvg__generateTriangleStripIndexes(&sg->indexes[ioffset], offset, path->nstroke);
            offset += path->nstroke;
            ioffset += copy->strokeCount;
        }
    }

    // Setup uniforms for draw calls
    if (call->type == SGNVG_FILL) {
        // Quad
        call->triangleOffset = ioffset;
        call->triangleCount = (call->triangleCount - 2) * 3;    // convert vertex count into index
        quad = &sg->verts[offset];
        sgnvg__vset(&quad[0], bounds[2], bounds[3], 0.5f, 1.0f);
        sgnvg__vset(&quad[1], bounds[2], bounds[1], 0.5f, 1.0f);
        sgnvg__vset(&quad[2], bounds[0], bounds[3], 0.5f, 1.0f);
        sgnvg__vset(&quad[3], bounds[0], bounds[1], 0.5f, 1.0f);
        sgnvg__generateTriangleStripIndexes(&sg->indexes[ioffset], offset, 4);
        call->uniformOffset = sgnvg__allocFragUniforms(sg, 2);
        if (call->uniformOffset == -1) goto error;
        // Simple shader for stencil
        frag = nvg__fragUniformPtr(sg, call->uniformOffset);
        memset(frag, 0, sizeof(*frag));
        frag->strokeThr = -1.0f;
        frag->type = NSVG_SHADER_SIMPLE;
        // Fill shader
        sgnvg__convertPaint(sg, nvg__fragUniformPtr(sg, call->uniformOffset + sg->fragSize), paint, scissor, fringe, fringe, -1.0f);
    } else {
        call->uniformOffset = sgnvg__allocFragUniforms(sg, 1);
        if (call->uniformOffset == -1) goto error;
        // Fill shader
        sgnvg__convertPaint(sg, nvg__fragUniformPtr(sg, call->uniformOffset), paint, scissor, fringe, fringe, -1.0f);
    }

    return;

error:
    // We get here if call alloc was ok, but something else is not.
    // Roll back the last call to prevent drawing it.
    if (sg->ncalls > 0) sg->ncalls--;
}

static void sgnvg__renderStroke(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor, float fringe,
                                float strokeWidth, const NVGpath* paths, int npaths)
{
    SGNVG_EXTLOG("sgnvg__renderStroke(uptr: %p, paint: %p, compositeOperation: (%d, %d, %d, %d), scissor: %p, fringe: %f, strokeWidth: %f, paths: %p, npaths: %d)\n", uptr, paint, compositeOperation.dstAlpha, compositeOperation.dstRGB, compositeOperation.srcAlpha, compositeOperation.srcRGB, scissor, fringe, strokeWidth, paths, npaths);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    SGNVGcall* call = sgnvg__allocCall(sg);
    int i, maxverts, offset, maxindexes, ioffset;

    if (call == NULL) return;

    call->type = SGNVG_STROKE;
    call->pathOffset = sgnvg__allocPaths(sg, npaths);
    if (call->pathOffset == -1) goto error;
    call->pathCount = npaths;
    call->image = paint->image;
    call->blendFunc = sgnvg__blendCompositeOperation(compositeOperation);

    // Allocate vertices for all the paths.
    maxverts = sgnvg__maxVertCount(paths, npaths);
    offset = sgnvg__allocVerts(sg, maxverts);
    if (offset == -1) goto error;
    maxindexes = sgnvg__maxIndexCount(paths, npaths);
    ioffset = sgnvg__allocIndexes(sg, maxindexes);
    if (ioffset == -1) goto error;

    for (i = 0; i < npaths; i++) {
        SGNVGpath* copy = &sg->paths[call->pathOffset + i];
        const NVGpath* path = &paths[i];
        memset(copy, 0, sizeof(SGNVGpath));
        if (path->nstroke) {
            // stroke: triangle strip
            copy->strokeOffset = ioffset;
            copy->strokeCount = (path->nstroke - 2) * 3;
            memcpy(&sg->verts[offset], path->stroke, sizeof(NVGvertex) * path->nstroke);
            sgnvg__generateTriangleStripIndexes(&sg->indexes[ioffset], offset, path->nstroke);
            offset += path->nstroke;
            ioffset += copy->strokeCount;
        }
    }

    if (sg->flags & NVG_STENCIL_STROKES) {
        // Fill shader
        call->uniformOffset = sgnvg__allocFragUniforms(sg, 2);
        if (call->uniformOffset == -1) goto error;

        sgnvg__convertPaint(sg, nvg__fragUniformPtr(sg, call->uniformOffset), paint, scissor, strokeWidth, fringe, -1.0f);
        sgnvg__convertPaint(sg, nvg__fragUniformPtr(sg, call->uniformOffset + sg->fragSize), paint, scissor, strokeWidth, fringe, 1.0f - 0.5f/255.0f);

    } else {
        // Fill shader
        call->uniformOffset = sgnvg__allocFragUniforms(sg, 1);
        if (call->uniformOffset == -1) goto error;
        sgnvg__convertPaint(sg, nvg__fragUniformPtr(sg, call->uniformOffset), paint, scissor, strokeWidth, fringe, -1.0f);
    }

    return;

error:
    // We get here if call alloc was ok, but something else is not.
    // Roll back the last call to prevent drawing it.
    if (sg->ncalls > 0) sg->ncalls--;
}

static void sgnvg__renderTriangles(void* uptr, NVGpaint* paint, NVGcompositeOperationState compositeOperation, NVGscissor* scissor,
                                   const NVGvertex* verts, int nverts, float fringe)
{
    SGNVG_EXTLOG("sgnvg__renderTriangles(uptr: %p, paint: %p, compositeOperation: (%d, %d, %d, %d), scissor: %p, verts: %p, nverts: %d, fringe: %f)\n", uptr, paint, compositeOperation.srcRGB, compositeOperation.dstRGB, compositeOperation.srcAlpha, compositeOperation.dstAlpha, scissor, verts, nverts, fringe);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    SGNVGcall* call = sgnvg__allocCall(sg);
    SGNVGfragUniforms* frag;

    if (call == NULL) return;

    call->type = SGNVG_TRIANGLES;
    call->image = paint->image;
    call->blendFunc = sgnvg__blendCompositeOperation(compositeOperation);

    int offset, ioffset;
    offset = sgnvg__allocVerts(sg, nverts);
    if(offset == -1) goto error;
    ioffset = sgnvg__allocIndexes(sg, nverts);
    if(ioffset == -1) goto error;

    // Allocate vertices for all the paths.
    call->triangleOffset = ioffset;
    call->triangleCount = nverts;
    memcpy(&sg->verts[offset], verts, sizeof(NVGvertex) * nverts);
    for(int i = 0; i < nverts; i++)
        sg->indexes[ioffset+i] = offset+i;

    // Fill shader
    call->uniformOffset = sgnvg__allocFragUniforms(sg, 1);
    if (call->uniformOffset == -1) goto error;
    frag = nvg__fragUniformPtr(sg, call->uniformOffset);
    sgnvg__convertPaint(sg, frag, paint, scissor, 1.0f, fringe, -1.0f);
    frag->type = NSVG_SHADER_IMG;

    return;

error:
    // We get here if call alloc was ok, but something else is not.
    // Roll back the last call to prevent drawing it.
    if (sg->ncalls > 0) sg->ncalls--;
}

static void sgnvg__renderDelete(void* uptr)
{
    SGNVG_EXTLOG("sgnvg__renderDelete(uptr: %p)\n", uptr);
    SGNVGcontext* sg = (SGNVGcontext*)uptr;
    int i;
    if (sg == NULL) return;

    sg_destroy_shader(sg->shader);

    for(int i = 0; i < NANOVG_SG_PIPELINE_CACHE_SIZE; i++)
    {
        for(uint32_t t = 0; t < SGNVG_PIP_NUM_; t++)
        {
            // only uninitialize if correct flags are set
            if(!sgnvg__pipelineTypeIsInUse(sg, (SGNVGpipelineType)t))
                continue;
            if(sg->pipelineCache.pipelinesActive[i] & (1 << t))
                sg_uninit_pipeline(sg->pipelineCache.pipelines[i][t]);
            sg_dealloc_pipeline(sg->pipelineCache.pipelines[i][t]);
        }
    }

    if(sg->cverts_gpu)
        sg_uninit_buffer(sg->vertBuf);
    sg_dealloc_buffer(sg->vertBuf);

    if(sg->cindexes_gpu)
        sg_uninit_buffer(sg->indexBuf);
    sg_dealloc_buffer(sg->indexBuf);

    for (i = 0; i < sg->ntextures; i++) {
        if (sg->textures[i].img.id != 0 && (sg->textures[i].flags & NVG_IMAGE_NODELETE) == 0)
            sg_destroy_view(sg->textures[i].img_view);
            sg_destroy_image(sg->textures[i].img);
    }
    free(sg->textures);

    free(sg->paths);
    free(sg->verts);
    free(sg->indexes);
    free(sg->uniforms);
    free(sg->calls);

    free(sg);
}

NVGcontext* nvgCreateSokol(int flags)
{
    SGNVG_EXTLOG("nvgCreateSokol(flags: %d)\n", flags);
    NVGparams params;
    NVGcontext* ctx = NULL;
    SGNVGcontext* sg = (SGNVGcontext*)malloc(sizeof(SGNVGcontext));
    if(sg == NULL) goto error;
    memset(sg, 0, sizeof(SGNVGcontext));

    memset(&params, 0, sizeof(params));
    params.renderCreate = sgnvg__renderCreate;
    params.renderCreateTexture = sgnvg__renderCreateTexture;
    params.renderDeleteTexture = sgnvg__renderDeleteTexture;
    params.renderUpdateTexture = sgnvg__renderUpdateTexture;
    params.renderGetTextureSize = sgnvg__renderGetTextureSize;
    params.renderViewport = sgnvg__renderViewport;
    params.renderCancel = sgnvg__renderCancel;
    params.renderFlush = sgnvg__renderFlush;
    params.renderFill = sgnvg__renderFill;
    params.renderStroke = sgnvg__renderStroke;
    params.renderTriangles = sgnvg__renderTriangles;
    params.renderDelete = sgnvg__renderDelete;
    params.userPtr = sg;
    params.edgeAntiAlias = flags & NVG_ANTIALIAS ? 1 : 0;

    sg->flags = flags;

    ctx = nvgCreateInternal(&params);
    if(ctx == NULL) goto error;

    return ctx;

error:
    if(ctx != NULL) nvgDeleteInternal(ctx);
    return NULL;
}

void nvgDeleteSokol(NVGcontext* ctx)
{
    nvgDeleteInternal(ctx);
}

int nvsgCreateImageFromHandleSokol(NVGcontext* ctx, sg_image imageSokol, sg_sampler samplerSokol, int type, int w, int h, int flags)
{
    SGNVG_INTLOG("nvsgCreateImageFromHandleSokol(ctx: %p, imageSokol: %d, samplerSokol: %d, type: %d, w: %d, h: %d, flags: %d)\n", ctx, imageSokol.id, samplerSokol.id, type, w, h, flags);
    SGNVGcontext* sg = (SGNVGcontext*)nvgInternalParams(ctx)->userPtr;
    SGNVGtexture* tex = sgnvg__allocTexture(sg);

    if (tex == NULL) return 0;

    tex->type = type;
    tex->img = imageSokol;
    tex->smp = samplerSokol;
    tex->flags = flags;
    tex->width = w;
    tex->height = h;

    return tex->id;
}

sg_image nvsgImageHandleSokol(NVGcontext* ctx, int image)
{
    SGNVG_INTLOG("nvsgImageHandleSokol(ctx: %p, image: %d)\n", ctx, image);
    SGNVGcontext* sg = (SGNVGcontext*)nvgInternalParams(ctx)->userPtr;
    SGNVGtexture* tex = sgnvg__findTexture(sg, image);
    return tex->img;
}

#endif /* NANOVG_SOKOL_IMPLEMENTATION */
